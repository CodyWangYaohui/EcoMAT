
MaintStorage-magnetic-field-trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009330  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08009470  08009470  00019470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800990c  0800990c  0001990c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009910  08009910  00019910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000008  08009914  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006c8  200001dc  08009ae8  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200008a4  08009ae8  000208a4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001edf6  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003b8d  00000000  00000000  0003f045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e00  00000000  00000000  00042bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000173f  00000000  00000000  000449d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00027fb3  00000000  00000000  00046117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001e444  00000000  00000000  0006e0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ec1b0  00000000  00000000  0008c50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000927c  00000000  00000000  001786c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  0018193c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08009458 	.word	0x08009458

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08009458 	.word	0x08009458

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b970 	b.w	8000e50 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	460f      	mov	r7, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4694      	mov	ip, r2
 8000b9c:	d965      	bls.n	8000c6a <__udivmoddi4+0xe2>
 8000b9e:	fab2 f382 	clz	r3, r2
 8000ba2:	b143      	cbz	r3, 8000bb6 <__udivmoddi4+0x2e>
 8000ba4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba8:	f1c3 0220 	rsb	r2, r3, #32
 8000bac:	409f      	lsls	r7, r3
 8000bae:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb2:	4317      	orrs	r7, r2
 8000bb4:	409c      	lsls	r4, r3
 8000bb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bba:	fa1f f58c 	uxth.w	r5, ip
 8000bbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc2:	0c22      	lsrs	r2, r4, #16
 8000bc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bcc:	fb01 f005 	mul.w	r0, r1, r5
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bdc:	f080 811c 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f240 8119 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4462      	add	r2, ip
 8000bea:	1a12      	subs	r2, r2, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfa:	fb00 f505 	mul.w	r5, r0, r5
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x90>
 8000c02:	eb1c 0404 	adds.w	r4, ip, r4
 8000c06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c0a:	f080 8107 	bcs.w	8000e1c <__udivmoddi4+0x294>
 8000c0e:	42a5      	cmp	r5, r4
 8000c10:	f240 8104 	bls.w	8000e1c <__udivmoddi4+0x294>
 8000c14:	4464      	add	r4, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1c:	1b64      	subs	r4, r4, r5
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11e      	cbz	r6, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40dc      	lsrs	r4, r3
 8000c24:	2300      	movs	r3, #0
 8000c26:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0xbc>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80ed 	beq.w	8000e12 <__udivmoddi4+0x28a>
 8000c38:	2100      	movs	r1, #0
 8000c3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	fab3 f183 	clz	r1, r3
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d149      	bne.n	8000ce0 <__udivmoddi4+0x158>
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	d302      	bcc.n	8000c56 <__udivmoddi4+0xce>
 8000c50:	4282      	cmp	r2, r0
 8000c52:	f200 80f8 	bhi.w	8000e46 <__udivmoddi4+0x2be>
 8000c56:	1a84      	subs	r4, r0, r2
 8000c58:	eb65 0203 	sbc.w	r2, r5, r3
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d0e2      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	e9c6 4700 	strd	r4, r7, [r6]
 8000c68:	e7df      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c6a:	b902      	cbnz	r2, 8000c6e <__udivmoddi4+0xe6>
 8000c6c:	deff      	udf	#255	; 0xff
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c78:	1a8a      	subs	r2, r1, r2
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2101      	movs	r1, #1
 8000c84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c88:	fb07 2015 	mls	r0, r7, r5, r2
 8000c8c:	0c22      	lsrs	r2, r4, #16
 8000c8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c92:	fb0e f005 	mul.w	r0, lr, r5
 8000c96:	4290      	cmp	r0, r2
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2b8>
 8000caa:	4645      	mov	r5, r8
 8000cac:	1a12      	subs	r2, r2, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x14e>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x14c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2c2>
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cde:	e79f      	b.n	8000c20 <__udivmoddi4+0x98>
 8000ce0:	f1c1 0720 	rsb	r7, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf2:	fa20 f307 	lsr.w	r3, r0, r7
 8000cf6:	40fd      	lsrs	r5, r7
 8000cf8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d10:	fb08 f50e 	mul.w	r5, r8, lr
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2b4>
 8000d2c:	42a5      	cmp	r5, r4
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2b4>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4464      	add	r4, ip
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	b29d      	uxth	r5, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2ac>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2ac>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d66:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6a:	eba4 040e 	sub.w	r4, r4, lr
 8000d6e:	42ac      	cmp	r4, r5
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46ae      	mov	lr, r5
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x29c>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x298>
 8000d78:	b156      	cbz	r6, 8000d90 <__udivmoddi4+0x208>
 8000d7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d82:	fa04 f707 	lsl.w	r7, r4, r7
 8000d86:	40ca      	lsrs	r2, r1
 8000d88:	40cc      	lsrs	r4, r1
 8000d8a:	4317      	orrs	r7, r2
 8000d8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d90:	4618      	mov	r0, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	f1c3 0120 	rsb	r1, r3, #32
 8000d9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da0:	fa20 f201 	lsr.w	r2, r0, r1
 8000da4:	fa25 f101 	lsr.w	r1, r5, r1
 8000da8:	409d      	lsls	r5, r3
 8000daa:	432a      	orrs	r2, r5
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dbc:	0c11      	lsrs	r1, r2, #16
 8000dbe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc2:	fb00 f50e 	mul.w	r5, r0, lr
 8000dc6:	428d      	cmp	r5, r1
 8000dc8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x258>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000dd8:	428d      	cmp	r5, r1
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1b49      	subs	r1, r1, r5
 8000de2:	b292      	uxth	r2, r2
 8000de4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de8:	fb07 1115 	mls	r1, r7, r5, r1
 8000dec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df0:	fb05 f10e 	mul.w	r1, r5, lr
 8000df4:	4291      	cmp	r1, r2
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x282>
 8000df8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2a8>
 8000e02:	4291      	cmp	r1, r2
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2a8>
 8000e06:	3d02      	subs	r5, #2
 8000e08:	4462      	add	r2, ip
 8000e0a:	1a52      	subs	r2, r2, r1
 8000e0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0xfc>
 8000e12:	4631      	mov	r1, r6
 8000e14:	4630      	mov	r0, r6
 8000e16:	e708      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e6e6      	b.n	8000bea <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e6fb      	b.n	8000c18 <__udivmoddi4+0x90>
 8000e20:	4548      	cmp	r0, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e30:	4645      	mov	r5, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e34:	462b      	mov	r3, r5
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x258>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e40:	3d02      	subs	r5, #2
 8000e42:	4462      	add	r2, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x124>
 8000e46:	4608      	mov	r0, r1
 8000e48:	e70a      	b.n	8000c60 <__udivmoddi4+0xd8>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x14e>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii>:
 *      Author: Wangy
 */

#include <hall_sensor.hpp>

Sensor::Sensor(I2C_HandleTypeDef *handler, int ads1115_addr,
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
				int ads1115_channel_number, int data_rate, int PGA_rate) :
				currentRawHead(0), currentProcessedHead(0), rawDataCount(0), sumRawData(
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
								0.0f), sumProcessedData(0.0f) {
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
	// Initialize arrays with zeros
	for (int i = 0; i < SENSOR_RAW_BUFFER_SIZE; ++i) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e00a      	b.n	8000eae <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii+0x5a>
		this->rawDataBuffer[i] = 0.0f;
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	331a      	adds	r3, #26
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < SENSOR_RAW_BUFFER_SIZE; ++i) {
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b31      	cmp	r3, #49	; 0x31
 8000eb2:	ddf1      	ble.n	8000e98 <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii+0x44>
	}
	for (int i = 0; i < SENSOR_PROCESSED_BUFFER_SIZE; ++i) {
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	e00a      	b.n	8000ed0 <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii+0x7c>
		this->processedDataBuffer[i] = 0.0f;
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	334c      	adds	r3, #76	; 0x4c
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < SENSOR_PROCESSED_BUFFER_SIZE; ++i) {
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	2bc7      	cmp	r3, #199	; 0xc7
 8000ed4:	ddf1      	ble.n	8000eba <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii+0x66>
	}
	memcpy(&this->i2cHandler, handler, sizeof(*handler));
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3310      	adds	r3, #16
 8000eda:	2254      	movs	r2, #84	; 0x54
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f006 f9b5 	bl	800724e <memcpy>
	this->ads1115Addr = ads1115_addr;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
	this->channelNO = ads1115_channel_number;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	605a      	str	r2, [r3, #4]
	this->PGARate = PGA_rate;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef4:	60da      	str	r2, [r3, #12]
	this->dataRate = data_rate;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6a3a      	ldr	r2, [r7, #32]
 8000efa:	609a      	str	r2, [r3, #8]
	this->SetAdcConvCoeff(this->PGARate);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	4619      	mov	r1, r3
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 f808 	bl	8000f18 <_ZN6Sensor15SetAdcConvCoeffEi>
	this->SetChannel();
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f000 f853 	bl	8000fb4 <_ZN6Sensor10SetChannelEv>

}
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_ZN6Sensor15SetAdcConvCoeffEi>:

void Sensor::SetAdcConvCoeff(int PGA_Rate) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	// Voltage coefficient update.
	switch (PGA_Rate) {
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b0e      	cmp	r3, #14
 8000f26:	d83f      	bhi.n	8000fa8 <_ZN6Sensor15SetAdcConvCoeffEi+0x90>
 8000f28:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <_ZN6Sensor15SetAdcConvCoeffEi+0x18>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f6d 	.word	0x08000f6d
 8000f34:	08000fa9 	.word	0x08000fa9
 8000f38:	08000f77 	.word	0x08000f77
 8000f3c:	08000fa9 	.word	0x08000fa9
 8000f40:	08000f81 	.word	0x08000f81
 8000f44:	08000fa9 	.word	0x08000fa9
 8000f48:	08000f8b 	.word	0x08000f8b
 8000f4c:	08000fa9 	.word	0x08000fa9
 8000f50:	08000f95 	.word	0x08000f95
 8000f54:	08000fa9 	.word	0x08000fa9
 8000f58:	08000fa9 	.word	0x08000fa9
 8000f5c:	08000fa9 	.word	0x08000fa9
 8000f60:	08000fa9 	.word	0x08000fa9
 8000f64:	08000fa9 	.word	0x08000fa9
 8000f68:	08000f9f 	.word	0x08000f9f

		case ADS1115_PGA_TWOTHIRDS:
			ADC_conversionCoeff = 0.1875;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f04f 5279 	mov.w	r2, #1044381696	; 0x3e400000
 8000f72:	665a      	str	r2, [r3, #100]	; 0x64
			break;
 8000f74:	e018      	b.n	8000fa8 <_ZN6Sensor15SetAdcConvCoeffEi+0x90>

		case ADS1115_PGA_ONE:
			ADC_conversionCoeff = 0.125;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8000f7c:	665a      	str	r2, [r3, #100]	; 0x64
			break;
 8000f7e:	e013      	b.n	8000fa8 <_ZN6Sensor15SetAdcConvCoeffEi+0x90>

		case ADS1115_PGA_TWO:
			ADC_conversionCoeff = 0.0625;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8000f86:	665a      	str	r2, [r3, #100]	; 0x64
			break;
 8000f88:	e00e      	b.n	8000fa8 <_ZN6Sensor15SetAdcConvCoeffEi+0x90>

		case ADS1115_PGA_FOUR:
			ADC_conversionCoeff = 0.03125;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f04f 5274 	mov.w	r2, #1023410176	; 0x3d000000
 8000f90:	665a      	str	r2, [r3, #100]	; 0x64
			break;
 8000f92:	e009      	b.n	8000fa8 <_ZN6Sensor15SetAdcConvCoeffEi+0x90>

		case ADS1115_PGA_EIGHT:
			ADC_conversionCoeff = 0.015625;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8000f9a:	665a      	str	r2, [r3, #100]	; 0x64
			break;
 8000f9c:	e004      	b.n	8000fa8 <_ZN6Sensor15SetAdcConvCoeffEi+0x90>

		case ADS1115_PGA_SIXTEEN:
			ADC_conversionCoeff = 0.0078125;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 8000fa4:	665a      	str	r2, [r3, #100]	; 0x64
			break;
 8000fa6:	bf00      	nop

	}
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_ZN6Sensor10SetChannelEv>:

HAL_StatusTypeDef Sensor::SetChannel(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af04      	add	r7, sp, #16
 8000fba:	6078      	str	r0, [r7, #4]

	uint8_t ADS1115_config[2];

	ADS1115_config[0] = ADS1115_OS | this->channelNO | this->PGARate
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fc6:	b25a      	sxtb	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
					| ADS1115_MODE;
	ADS1115_config[1] = this->dataRate | ADS1115_COMP_MODE | ADS1115_COMP_POL
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
					| ADS1115_COMP_LAT | ADS1115_COMP_QUE;
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	f043 0303 	orr.w	r3, r3, #3
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
	ADS1115_config[1] = this->dataRate | ADS1115_COMP_MODE | ADS1115_COMP_POL
 8000fe4:	737b      	strb	r3, [r7, #13]

	return HAL_I2C_Mem_Write(&this->i2cHandler, (uint16_t) (this->ads1115Addr),
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f103 0010 	add.w	r0, r3, #16
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	b299      	uxth	r1, r3
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2201      	movs	r2, #1
 8001004:	f001 fbbc 	bl	8002780 <HAL_I2C_Mem_Write>
 8001008:	4603      	mov	r3, r0
					ADS1115_CONFIG_REG, 1, ADS1115_config, 2, ADS1115_TIMEOUT);
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <_ZN6Sensor11SampleStoreEv>:

void Sensor::SampleStore(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]

	uint8_t ADS1115_rawValue[2];
	float curReading;

	// read from the ads1115 for the converted magnetic field correlated voltage value
	if (HAL_I2C_Mem_Read(&this->i2cHandler,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f103 0010 	add.w	r0, r3, #16
					(uint16_t) ((this->ads1115Addr) | 0x1),
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	b21b      	sxth	r3, r3
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	b21b      	sxth	r3, r3
	if (HAL_I2C_Mem_Read(&this->i2cHandler,
 800102e:	b299      	uxth	r1, r3
 8001030:	2301      	movs	r3, #1
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2302      	movs	r3, #2
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	2200      	movs	r2, #0
 8001042:	f001 fcb1 	bl	80029a8 <HAL_I2C_Mem_Read>
 8001046:	4603      	mov	r3, r0
					ADS1115_CONVER_REG, 1, ADS1115_rawValue, 2, ADS1115_TIMEOUT)
					== HAL_OK) {
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf0c      	ite	eq
 800104c:	2301      	moveq	r3, #1
 800104e:	2300      	movne	r3, #0
 8001050:	b2db      	uxtb	r3, r3
	if (HAL_I2C_Mem_Read(&this->i2cHandler,
 8001052:	2b00      	cmp	r3, #0
 8001054:	d053      	beq.n	80010fe <_ZN6Sensor11SampleStoreEv+0xea>

		curReading = (float) (((int16_t) (ADS1115_rawValue[0] << 8)
 8001056:	7a3b      	ldrb	r3, [r7, #8]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21b      	sxth	r3, r3
 800105c:	461a      	mov	r2, r3
						| ADS1115_rawValue[1]) * this->ADC_conversionCoeff);
 800105e:	7a7b      	ldrb	r3, [r7, #9]
 8001060:	4313      	orrs	r3, r2
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
		curReading = (float) (((int16_t) (ADS1115_rawValue[0] << 8)
 8001070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001074:	edc7 7a03 	vstr	s15, [r7, #12]
	} else {
		exit(EXIT_FAILURE);
	}

	// Update the sum by subtracting the value being overwritten and adding the new value
	this->sumRawData -= this->rawDataBuffer[this->currentRawHead];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	331a      	adds	r3, #26
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800109e:	edc3 7a00 	vstr	s15, [r3]
	this->sumRawData += curReading;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80010ba:	edc3 7a00 	vstr	s15, [r3]

	// Update the buffer and head index
	this->rawDataBuffer[this->currentRawHead] = curReading;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	331a      	adds	r3, #26
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	601a      	str	r2, [r3, #0]
	this->currentRawHead = (this->currentRawHead + 1) % SENSOR_RAW_BUFFER_SIZE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <_ZN6Sensor11SampleStoreEv+0x108>)
 80010da:	fb83 1302 	smull	r1, r3, r3, r2
 80010de:	1119      	asrs	r1, r3, #4
 80010e0:	17d3      	asrs	r3, r2, #31
 80010e2:	1acb      	subs	r3, r1, r3
 80010e4:	2132      	movs	r1, #50	; 0x32
 80010e6:	fb01 f303 	mul.w	r3, r1, r3
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

	// Update current sensor's raw buffer count (less than 50, beginning)
	if (this->rawDataCount < SENSOR_RAW_BUFFER_SIZE) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80010f8:	2b31      	cmp	r3, #49	; 0x31
 80010fa:	dc0a      	bgt.n	8001112 <_ZN6Sensor11SampleStoreEv+0xfe>
 80010fc:	e002      	b.n	8001104 <_ZN6Sensor11SampleStoreEv+0xf0>
		exit(EXIT_FAILURE);
 80010fe:	2001      	movs	r0, #1
 8001100:	f005 fafe 	bl	8006700 <exit>
		this->rawDataCount++;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
	}
}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	51eb851f 	.word	0x51eb851f

08001120 <_ZN6Sensor11ProcessDataEv>:

void Sensor::ProcessData() {
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

	// Compute the avg of the current updated raw buffer
	float averagedReading = this->sumRawData / this->rawDataCount;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800112e:	edd3 6a00 	vldr	s13, [r3]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001144:	edc7 7a03 	vstr	s15, [r7, #12]

	// Update the processed data buffer: sum value
	sumProcessedData -= processedDataBuffer[currentProcessedHead];
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800114e:	ed93 7a00 	vldr	s14, [r3]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	334c      	adds	r3, #76	; 0x4c
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800116e:	edc3 7a00 	vstr	s15, [r3]
	sumProcessedData += averagedReading;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800118a:	edc3 7a00 	vstr	s15, [r3]

	// Update the processed data buffer: entries and head
	processedDataBuffer[currentProcessedHead] = averagedReading;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	334c      	adds	r3, #76	; 0x4c
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	601a      	str	r2, [r3, #0]
	currentProcessedHead = (currentProcessedHead + 1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 80011a6:	1c5a      	adds	r2, r3, #1
					% SENSOR_PROCESSED_BUFFER_SIZE;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <_ZN6Sensor11ProcessDataEv+0xb0>)
 80011aa:	fb83 1302 	smull	r1, r3, r3, r2
 80011ae:	1199      	asrs	r1, r3, #6
 80011b0:	17d3      	asrs	r3, r2, #31
 80011b2:	1acb      	subs	r3, r1, r3
 80011b4:	21c8      	movs	r1, #200	; 0xc8
 80011b6:	fb01 f303 	mul.w	r3, r1, r3
 80011ba:	1ad3      	subs	r3, r2, r3
	currentProcessedHead = (currentProcessedHead + 1)
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
}
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	51eb851f 	.word	0x51eb851f

080011d4 <_ZN6Sensor6UpdateEv>:

void Sensor::Update() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

	// Set the ADC configuration according to current sensor requirement
//	this->SetChannel();

// Sample and store the data into the raw data buffer 5 times
	this->SampleStore();
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff19 	bl	8001014 <_ZN6Sensor11SampleStoreEv>
	this->SampleStore();
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff16 	bl	8001014 <_ZN6Sensor11SampleStoreEv>
	this->SampleStore();
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff13 	bl	8001014 <_ZN6Sensor11SampleStoreEv>
	this->SampleStore();
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff10 	bl	8001014 <_ZN6Sensor11SampleStoreEv>
	this->SampleStore();
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff0d 	bl	8001014 <_ZN6Sensor11SampleStoreEv>

	// Compute avg from the raw and update into processedDataBuffer
	this->ProcessData();
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff90 	bl	8001120 <_ZN6Sensor11ProcessDataEv>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_ZN6Sensor13ReportReadingEv>:

float Sensor::ReportReading() {
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

	int prevHead = (this->currentProcessedHead + SENSOR_PROCESSED_BUFFER_SIZE
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
					- 1) % SENSOR_PROCESSED_BUFFER_SIZE;
 8001216:	33c7      	adds	r3, #199	; 0xc7
	int prevHead = (this->currentProcessedHead + SENSOR_PROCESSED_BUFFER_SIZE
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <_ZN6Sensor13ReportReadingEv+0x44>)
 800121a:	fb82 1203 	smull	r1, r2, r2, r3
 800121e:	1191      	asrs	r1, r2, #6
 8001220:	17da      	asrs	r2, r3, #31
 8001222:	1a8a      	subs	r2, r1, r2
 8001224:	21c8      	movs	r1, #200	; 0xc8
 8001226:	fb01 f202 	mul.w	r2, r1, r2
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
	return this->processedDataBuffer[prevHead]; // Returning the most recent processed reading
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	334c      	adds	r3, #76	; 0x4c
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
}
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	51eb851f 	.word	0x51eb851f

08001250 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001260:	f023 0218 	bic.w	r2, r3, #24
 8001264:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4313      	orrs	r3, r2
 800126c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800128a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4313      	orrs	r3, r2
 8001292:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <_ZL13UART_Transmitfffff>:
static bool DataAcquisitionFlag = false;
static char StringToTransmit[100];
static uint32_t CurTimeStamp;

static HAL_StatusTypeDef UART_Transmit(float anchor_0_reading,
				float anchor_1_reading, float anchor_2_reading, float anchor_3_reading, float anchor_4_reading) {
 80012b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012b4:	b094      	sub	sp, #80	; 0x50
 80012b6:	af0a      	add	r7, sp, #40	; 0x28
 80012b8:	ed87 0a07 	vstr	s0, [r7, #28]
 80012bc:	edc7 0a06 	vstr	s1, [r7, #24]
 80012c0:	ed87 1a05 	vstr	s2, [r7, #20]
 80012c4:	edc7 1a04 	vstr	s3, [r7, #16]
 80012c8:	ed87 2a03 	vstr	s4, [r7, #12]
	// Prepare data into the transmission string
	int numChars = snprintf(StringToTransmit, sizeof(StringToTransmit),
 80012cc:	69f8      	ldr	r0, [r7, #28]
 80012ce:	f7ff f913 	bl	80004f8 <__aeabi_f2d>
 80012d2:	4604      	mov	r4, r0
 80012d4:	460d      	mov	r5, r1
 80012d6:	69b8      	ldr	r0, [r7, #24]
 80012d8:	f7ff f90e 	bl	80004f8 <__aeabi_f2d>
 80012dc:	4680      	mov	r8, r0
 80012de:	4689      	mov	r9, r1
 80012e0:	6978      	ldr	r0, [r7, #20]
 80012e2:	f7ff f909 	bl	80004f8 <__aeabi_f2d>
 80012e6:	4682      	mov	sl, r0
 80012e8:	468b      	mov	fp, r1
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f7ff f904 	bl	80004f8 <__aeabi_f2d>
 80012f0:	e9c7 0100 	strd	r0, r1, [r7]
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f7ff f8ff 	bl	80004f8 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001302:	ed97 7b00 	vldr	d7, [r7]
 8001306:	ed8d 7b06 	vstr	d7, [sp, #24]
 800130a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800130e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001312:	e9cd 4500 	strd	r4, r5, [sp]
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <_ZL13UART_Transmitfffff+0xa8>)
 8001318:	2164      	movs	r1, #100	; 0x64
 800131a:	4810      	ldr	r0, [pc, #64]	; (800135c <_ZL13UART_Transmitfffff+0xac>)
 800131c:	f005 fe68 	bl	8006ff0 <sniprintf>
 8001320:	6278      	str	r0, [r7, #36]	; 0x24
					"%f, %f, %f, %f, %f\r\n", anchor_0_reading, anchor_1_reading,
					anchor_2_reading, anchor_3_reading, anchor_4_reading);

	// Check if snprintf wrote successfully within buffer bounds
	if (numChars >= (int) sizeof(StringToTransmit) || numChars < 0) {
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	2b63      	cmp	r3, #99	; 0x63
 8001326:	dc02      	bgt.n	800132e <_ZL13UART_Transmitfffff+0x7e>
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	2b00      	cmp	r3, #0
 800132c:	da01      	bge.n	8001332 <_ZL13UART_Transmitfffff+0x82>
		// Handle error
		return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00c      	b.n	800134c <_ZL13UART_Transmitfffff+0x9c>
	}

	// Call the peripheral function to execute the data transmission
	return HAL_UART_Transmit(&huart1, (uint8_t*) StringToTransmit,
					strlen((char*) StringToTransmit),
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <_ZL13UART_Transmitfffff+0xac>)
 8001334:	f7fe ff74 	bl	8000220 <strlen>
 8001338:	4603      	mov	r3, r0
	return HAL_UART_Transmit(&huart1, (uint8_t*) StringToTransmit,
 800133a:	b29a      	uxth	r2, r3
 800133c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001340:	4906      	ldr	r1, [pc, #24]	; (800135c <_ZL13UART_Transmitfffff+0xac>)
 8001342:	4807      	ldr	r0, [pc, #28]	; (8001360 <_ZL13UART_Transmitfffff+0xb0>)
 8001344:	f004 fbce 	bl	8005ae4 <HAL_UART_Transmit>
 8001348:	4603      	mov	r3, r0
					HAL_MAX_DELAY);
 800134a:	bf00      	nop
}
 800134c:	4618      	mov	r0, r3
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001356:	bf00      	nop
 8001358:	08009470 	.word	0x08009470
 800135c:	200006e8 	.word	0x200006e8
 8001360:	2000035c 	.word	0x2000035c

08001364 <HAL_TIM_PeriodElapsedCallback>:
					strlen((char*) StringToTransmit),
					HAL_MAX_DELAY);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d107      	bne.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x20>
		CurTimeStamp = HAL_GetTick();
 8001374:	f000 feb8 	bl	80020e8 <HAL_GetTick>
 8001378:	4603      	mov	r3, r0
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800137c:	6013      	str	r3, [r2, #0]
		DataAcquisitionFlag = true;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
	}
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200002a0 	.word	0x200002a0
 8001390:	2000074c 	.word	0x2000074c
 8001394:	200006e4 	.word	0x200006e4

08001398 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	ed2d 8b04 	vpush	{d8-d9}
 800139e:	f5ad 5db0 	sub.w	sp, sp, #5632	; 0x1600
 80013a2:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013a4:	f000 fe32 	bl	800200c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013a8:	f000 f8ae 	bl	8001508 <_Z18SystemClock_Configv>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80013ac:	f000 f92c 	bl	8001608 <_Z24PeriphCommonClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013b0:	f000 fada 	bl	8001968 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80013b4:	f000 fa4a 	bl	800184c <_ZL19MX_USART1_UART_Initv>
	MX_USB_PCD_Init();
 80013b8:	f000 faa8 	bl	800190c <_ZL15MX_USB_PCD_Initv>
	MX_MEMORYMAP_Init();
 80013bc:	f000 f9e2 	bl	8001784 <_ZL17MX_MEMORYMAP_Initv>
	MX_I2C1_Init();
 80013c0:	f000 f944 	bl	800164c <_ZL12MX_I2C1_Initv>
	MX_TIM2_Init();
 80013c4:	f000 f9e6 	bl	8001794 <_ZL12MX_TIM2_Initv>
	MX_I2C3_Init();
 80013c8:	f000 f98e 	bl	80016e8 <_ZL12MX_I2C3_Initv>
	 * (38.0, 25.25) => ADS1115_ADDR_GND
	 */

	// first ADC with STD address on I2C 1
	Sensor hallSensor_0_0 = Sensor(&hi2c1, ADS1115_ADDR_STD, ADS1115_MUX_AIN0,
	ADS1115_DATA_RATE_475, ADS1115_PGA_TWOTHIRDS);
 80013cc:	f507 508c 	add.w	r0, r7, #4480	; 0x1180
 80013d0:	f100 0014 	add.w	r0, r0, #20
 80013d4:	2300      	movs	r3, #0
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	23c0      	movs	r3, #192	; 0xc0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2340      	movs	r3, #64	; 0x40
 80013de:	2290      	movs	r2, #144	; 0x90
 80013e0:	4945      	ldr	r1, [pc, #276]	; (80014f8 <main+0x160>)
 80013e2:	f7ff fd37 	bl	8000e54 <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii>
	// second ADC with ADDR pin connected to VDD on I2C 1
	Sensor hallSensor_0_50_5 = Sensor(&hi2c1, ADS1115_ADDR_VDD,
	ADS1115_MUX_AIN0, ADS1115_DATA_RATE_475,
	ADS1115_PGA_TWOTHIRDS);
 80013e6:	f507 6053 	add.w	r0, r7, #3376	; 0xd30
 80013ea:	2300      	movs	r3, #0
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	23c0      	movs	r3, #192	; 0xc0
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2340      	movs	r3, #64	; 0x40
 80013f4:	2292      	movs	r2, #146	; 0x92
 80013f6:	4940      	ldr	r1, [pc, #256]	; (80014f8 <main+0x160>)
 80013f8:	f7ff fd2c 	bl	8000e54 <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii>
	// third ADC with ADDR pin connected to SDA on I2C 1
	Sensor hallSensor_38_25_25 = Sensor(&hi2c1, ADS1115_ADDR_SDA,
	ADS1115_MUX_AIN0, ADS1115_DATA_RATE_475,
	ADS1115_PGA_TWOTHIRDS);
 80013fc:	f607 00cc 	addw	r0, r7, #2252	; 0x8cc
 8001400:	2300      	movs	r3, #0
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	23c0      	movs	r3, #192	; 0xc0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2340      	movs	r3, #64	; 0x40
 800140a:	2294      	movs	r2, #148	; 0x94
 800140c:	493a      	ldr	r1, [pc, #232]	; (80014f8 <main+0x160>)
 800140e:	f7ff fd21 	bl	8000e54 <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii>

	// fourth ADC with STD address on I2C 3
	Sensor hallSensor_76_0 = Sensor(&hi2c3, ADS1115_ADDR_STD, ADS1115_MUX_AIN0,
					ADS1115_DATA_RATE_475, ADS1115_PGA_TWOTHIRDS);
 8001412:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8001416:	3810      	subs	r0, #16
 8001418:	2300      	movs	r3, #0
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	23c0      	movs	r3, #192	; 0xc0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2340      	movs	r3, #64	; 0x40
 8001422:	2290      	movs	r2, #144	; 0x90
 8001424:	4935      	ldr	r1, [pc, #212]	; (80014fc <main+0x164>)
 8001426:	f7ff fd15 	bl	8000e54 <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii>
	// fifth ADS with ADDR pin connectede to VDD on I2C3
	Sensor hallSensor_76_50_5 = Sensor(&hi2c3, ADS1115_ADDR_VDD, ADS1115_MUX_AIN0,
					ADS1115_DATA_RATE_475, ADS1115_PGA_TWOTHIRDS);
 800142a:	f107 0018 	add.w	r0, r7, #24
 800142e:	3814      	subs	r0, #20
 8001430:	2300      	movs	r3, #0
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	23c0      	movs	r3, #192	; 0xc0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2340      	movs	r3, #64	; 0x40
 800143a:	2292      	movs	r2, #146	; 0x92
 800143c:	492f      	ldr	r1, [pc, #188]	; (80014fc <main+0x164>)
 800143e:	f7ff fd09 	bl	8000e54 <_ZN6SensorC1EP19__I2C_HandleTypeDefiiii>

	HAL_TIM_Base_Start_IT(&htim2);
 8001442:	482f      	ldr	r0, [pc, #188]	; (8001500 <main+0x168>)
 8001444:	f003 fe62 	bl	800510c <HAL_TIM_Base_Start_IT>

//	uint32_t transmit_indx = 0;

	while (1) {

		if (DataAcquisitionFlag) {
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <main+0x16c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0fb      	beq.n	8001448 <main+0xb0>

			hallSensor_0_0.Update();
 8001450:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001454:	f103 0314 	add.w	r3, r3, #20
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff febb 	bl	80011d4 <_ZN6Sensor6UpdateEv>
			hallSensor_0_50_5.Update();
 800145e:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff feb6 	bl	80011d4 <_ZN6Sensor6UpdateEv>
			hallSensor_38_25_25.Update();
 8001468:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff feb1 	bl	80011d4 <_ZN6Sensor6UpdateEv>
			hallSensor_76_0.Update();
 8001472:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001476:	3b10      	subs	r3, #16
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff feab 	bl	80011d4 <_ZN6Sensor6UpdateEv>
			hallSensor_76_50_5.Update();
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	3b14      	subs	r3, #20
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fea5 	bl	80011d4 <_ZN6Sensor6UpdateEv>

			DataAcquisitionFlag = false;
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <main+0x16c>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]

			UART_Transmit(hallSensor_0_0.ReportReading(),
 8001490:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001494:	f103 0314 	add.w	r3, r3, #20
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff feb5 	bl	8001208 <_ZN6Sensor13ReportReadingEv>
 800149e:	eeb0 8a40 	vmov.f32	s16, s0
 80014a2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff feae 	bl	8001208 <_ZN6Sensor13ReportReadingEv>
 80014ac:	eef0 8a40 	vmov.f32	s17, s0
 80014b0:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fea7 	bl	8001208 <_ZN6Sensor13ReportReadingEv>
 80014ba:	eeb0 9a40 	vmov.f32	s18, s0
 80014be:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80014c2:	3b10      	subs	r3, #16
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fe9f 	bl	8001208 <_ZN6Sensor13ReportReadingEv>
 80014ca:	eef0 9a40 	vmov.f32	s19, s0
 80014ce:	f107 0318 	add.w	r3, r7, #24
 80014d2:	3b14      	subs	r3, #20
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fe97 	bl	8001208 <_ZN6Sensor13ReportReadingEv>
 80014da:	eef0 7a40 	vmov.f32	s15, s0
 80014de:	eeb0 2a67 	vmov.f32	s4, s15
 80014e2:	eef0 1a69 	vmov.f32	s3, s19
 80014e6:	eeb0 1a49 	vmov.f32	s2, s18
 80014ea:	eef0 0a68 	vmov.f32	s1, s17
 80014ee:	eeb0 0a48 	vmov.f32	s0, s16
 80014f2:	f7ff fedd 	bl	80012b0 <_ZL13UART_Transmitfffff>
		if (DataAcquisitionFlag) {
 80014f6:	e7a7      	b.n	8001448 <main+0xb0>
 80014f8:	200001f8 	.word	0x200001f8
 80014fc:	2000024c 	.word	0x2000024c
 8001500:	200002a0 	.word	0x200002a0
 8001504:	200006e4 	.word	0x200006e4

08001508 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b09a      	sub	sp, #104	; 0x68
 800150c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2248      	movs	r2, #72	; 0x48
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f005 fe60 	bl	80071dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	619a      	str	r2, [r3, #24]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800153c:	60d3      	str	r3, [r2, #12]

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f023 0303 	bic.w	r3, r3, #3
 8001548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	60d3      	str	r3, [r2, #12]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001552:	f001 ff95 	bl	8003480 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fe7a 	bl	8001250 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <_Z18SystemClock_Configv+0xfc>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <_Z18SystemClock_Configv+0xfc>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <_Z18SystemClock_Configv+0xfc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8001578:	2327      	movs	r3, #39	; 0x27
 800157a:	623b      	str	r3, [r7, #32]
					| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
					| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800157c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001582:	2301      	movs	r3, #1
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001594:	2300      	movs	r3, #0
 8001596:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800159c:	2300      	movs	r3, #0
 800159e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 faff 	bl	8003ba8 <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_Z18SystemClock_Configv+0xb6>
		Error_Handler();
 80015ba:	f000 fa1d 	bl	80019f8 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 80015be:	236f      	movs	r3, #111	; 0x6f
 80015c0:	607b      	str	r3, [r7, #4]
					| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
					| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015c2:	2302      	movs	r3, #2
 80015c4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	2101      	movs	r1, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fe56 	bl	8004290 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <_Z18SystemClock_Configv+0xf0>
		Error_Handler();
 80015f4:	f000 fa00 	bl	80019f8 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80015f8:	f003 fc0c 	bl	8004e14 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015fc:	bf00      	nop
 80015fe:	3768      	adds	r7, #104	; 0x68
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	58000400 	.word	0x58000400

08001608 <_Z24PeriphCommonClock_Configv>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b094      	sub	sp, #80	; 0x50
 800160c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800160e:	463b      	mov	r3, r7
 8001610:	2250      	movs	r2, #80	; 0x50
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fde1 	bl	80071dc <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001620:	2300      	movs	r3, #0
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001624:	2300      	movs	r3, #0
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001628:	463b      	mov	r3, r7
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fa7c 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <_Z24PeriphCommonClock_Configv+0x3c>
		Error_Handler();
 8001640:	f000 f9da 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8001644:	bf00      	nop
 8001646:	3750      	adds	r7, #80	; 0x50
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 8001652:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <_ZL12MX_I2C1_Initv+0x94>)
 8001654:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00707CBB;
 8001656:	4b21      	ldr	r3, [pc, #132]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 8001658:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <_ZL12MX_I2C1_Initv+0x98>)
 800165a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 8001664:	2201      	movs	r2, #1
 8001666:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001686:	4815      	ldr	r0, [pc, #84]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 8001688:	f000 ffde 	bl	8002648 <HAL_I2C_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <_ZL12MX_I2C1_Initv+0x54>
		Error_Handler();
 800169c:	f000 f9ac 	bl	80019f8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80016a0:	2100      	movs	r1, #0
 80016a2:	480e      	ldr	r0, [pc, #56]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 80016a4:	f001 fd52 	bl	800314c <HAL_I2CEx_ConfigAnalogFilter>
 80016a8:	4603      	mov	r3, r0
					!= HAL_OK) {
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <_ZL12MX_I2C1_Initv+0x70>
		Error_Handler();
 80016b8:	f000 f99e 	bl	80019f8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80016bc:	2100      	movs	r1, #0
 80016be:	4807      	ldr	r0, [pc, #28]	; (80016dc <_ZL12MX_I2C1_Initv+0x90>)
 80016c0:	f001 fd8f 	bl	80031e2 <HAL_I2CEx_ConfigDigitalFilter>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <_ZL12MX_I2C1_Initv+0x8c>
		Error_Handler();
 80016d4:	f000 f990 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200001f8 	.word	0x200001f8
 80016e0:	40005400 	.word	0x40005400
 80016e4:	00707cbb 	.word	0x00707cbb

080016e8 <_ZL12MX_I2C3_Initv>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 80016ee:	4a23      	ldr	r2, [pc, #140]	; (800177c <_ZL12MX_I2C3_Initv+0x94>)
 80016f0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00707CBB;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <_ZL12MX_I2C3_Initv+0x98>)
 80016f6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 8001700:	2201      	movs	r2, #1
 8001702:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001722:	4815      	ldr	r0, [pc, #84]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 8001724:	f000 ff90 	bl	8002648 <HAL_I2C_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	bf14      	ite	ne
 800172e:	2301      	movne	r3, #1
 8001730:	2300      	moveq	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <_ZL12MX_I2C3_Initv+0x54>
		Error_Handler();
 8001738:	f000 f95e 	bl	80019f8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800173c:	2100      	movs	r1, #0
 800173e:	480e      	ldr	r0, [pc, #56]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 8001740:	f001 fd04 	bl	800314c <HAL_I2CEx_ConfigAnalogFilter>
 8001744:	4603      	mov	r3, r0
					!= HAL_OK) {
 8001746:	2b00      	cmp	r3, #0
 8001748:	bf14      	ite	ne
 800174a:	2301      	movne	r3, #1
 800174c:	2300      	moveq	r3, #0
 800174e:	b2db      	uxtb	r3, r3
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <_ZL12MX_I2C3_Initv+0x70>
		Error_Handler();
 8001754:	f000 f950 	bl	80019f8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8001758:	2100      	movs	r1, #0
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <_ZL12MX_I2C3_Initv+0x90>)
 800175c:	f001 fd41 	bl	80031e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <_ZL12MX_I2C3_Initv+0x8c>
		Error_Handler();
 8001770:	f000 f942 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000024c 	.word	0x2000024c
 800177c:	40005c00 	.word	0x40005c00
 8001780:	00707cbb 	.word	0x00707cbb

08001784 <_ZL17MX_MEMORYMAP_Initv>:
/**
 * @brief MEMORYMAP Initialization Function
 * @param None
 * @retval None
 */
static void MX_MEMORYMAP_Init(void) {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	/* USER CODE END MEMORYMAP_Init 1 */
	/* USER CODE BEGIN MEMORYMAP_Init 2 */

	/* USER CODE END MEMORYMAP_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 80017b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 31;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 80017bc:	221f      	movs	r2, #31
 80017be:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000;
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 80017c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80017cc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80017da:	481b      	ldr	r0, [pc, #108]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 80017dc:	f003 fc32 	bl	8005044 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf14      	ite	ne
 80017e6:	2301      	movne	r3, #1
 80017e8:	2300      	moveq	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <_ZL12MX_TIM2_Initv+0x60>
		Error_Handler();
 80017f0:	f000 f902 	bl	80019f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 8001802:	f003 fdf5 	bl	80053f0 <HAL_TIM_ConfigClockSource>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <_ZL12MX_TIM2_Initv+0x86>
		Error_Handler();
 8001816:	f000 f8ef 	bl	80019f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <_ZL12MX_TIM2_Initv+0xb4>)
 8001828:	f004 f864 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
					!= HAL_OK) {
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <_ZL12MX_TIM2_Initv+0xac>
		Error_Handler();
 800183c:	f000 f8dc 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200002a0 	.word	0x200002a0

0800184c <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001850:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001852:	4a2d      	ldr	r2, [pc, #180]	; (8001908 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8001854:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b23      	ldr	r3, [pc, #140]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001896:	f004 f8d5 	bl	8005a44 <HAL_UART_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <_ZL19MX_USART1_UART_Initv+0x62>
		Error_Handler();
 80018aa:	f000 f8a5 	bl	80019f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80018ae:	2100      	movs	r1, #0
 80018b0:	4814      	ldr	r0, [pc, #80]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018b2:	f004 fe1f 	bl	80064f4 <HAL_UARTEx_SetTxFifoThreshold>
 80018b6:	4603      	mov	r3, r0
					!= HAL_OK) {
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <_ZL19MX_USART1_UART_Initv+0x7e>
		Error_Handler();
 80018c6:	f000 f897 	bl	80019f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80018ca:	2100      	movs	r1, #0
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018ce:	f004 fe4f 	bl	8006570 <HAL_UARTEx_SetRxFifoThreshold>
 80018d2:	4603      	mov	r3, r0
					!= HAL_OK) {
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_ZL19MX_USART1_UART_Initv+0x9a>
		Error_Handler();
 80018e2:	f000 f889 	bl	80019f8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018e8:	f004 fdcb 	bl	8006482 <HAL_UARTEx_DisableFifoMode>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <_ZL19MX_USART1_UART_Initv+0xb4>
		Error_Handler();
 80018fc:	f000 f87c 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000035c 	.word	0x2000035c
 8001908:	40013800 	.word	0x40013800

0800190c <_ZL15MX_USB_PCD_Initv>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001912:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_ZL15MX_USB_PCD_Initv+0x58>)
 8001914:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001918:	2208      	movs	r2, #8
 800191a:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 800191e:	2202      	movs	r2, #2
 8001920:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001924:	2202      	movs	r2, #2
 8001926:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001928:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8001940:	4807      	ldr	r0, [pc, #28]	; (8001960 <_ZL15MX_USB_PCD_Initv+0x54>)
 8001942:	f001 fc9a 	bl	800327a <HAL_PCD_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <_ZL15MX_USB_PCD_Initv+0x4e>
		Error_Handler();
 8001956:	f000 f84f 	bl	80019f8 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200003f0 	.word	0x200003f0
 8001964:	40006800 	.word	0x40006800

08001968 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800197c:	2004      	movs	r0, #4
 800197e:	f7ff fc7d 	bl	800127c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2002      	movs	r0, #2
 8001984:	f7ff fc7a 	bl	800127c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff fc77 	bl	800127c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	2008      	movs	r0, #8
 8001990:	f7ff fc74 	bl	800127c <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin | LD3_Pin | LD1_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2123      	movs	r1, #35	; 0x23
 8001998:	4814      	ldr	r0, [pc, #80]	; (80019ec <_ZL12MX_GPIO_Initv+0x84>)
 800199a:	f000 fe3d 	bl	8002618 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800199e:	2310      	movs	r3, #16
 80019a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4810      	ldr	r0, [pc, #64]	; (80019f0 <_ZL12MX_GPIO_Initv+0x88>)
 80019b0:	f000 fcc2 	bl	8002338 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | LD3_Pin | LD1_Pin;
 80019b4:	2323      	movs	r3, #35	; 0x23
 80019b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4808      	ldr	r0, [pc, #32]	; (80019ec <_ZL12MX_GPIO_Initv+0x84>)
 80019ca:	f000 fcb5 	bl	8002338 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin | B3_Pin;
 80019ce:	2303      	movs	r3, #3
 80019d0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <_ZL12MX_GPIO_Initv+0x8c>)
 80019e0:	f000 fcaa 	bl	8002338 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019e4:	bf00      	nop
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800
 80019f4:	48000c00 	.word	0x48000c00

080019f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>

08001a02 <LL_AHB2_GRP1_EnableClock>:
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4013      	ands	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b085      	sub	sp, #20
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09c      	sub	sp, #112	; 0x70
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	2250      	movs	r2, #80	; 0x50
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f005 fb87 	bl	80071dc <memset>
  if(hi2c->Instance==I2C1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a2d      	ldr	r2, [pc, #180]	; (8001b88 <HAL_I2C_MspInit+0xe0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d127      	bne.n	8001b28 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001adc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 f81e 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001af2:	f7ff ff81 	bl	80019f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2002      	movs	r0, #2
 8001af8:	f7ff ff83 	bl	8001a02 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001afc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b00:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b02:	2312      	movs	r3, #18
 8001b04:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b16:	4619      	mov	r1, r3
 8001b18:	481c      	ldr	r0, [pc, #112]	; (8001b8c <HAL_I2C_MspInit+0xe4>)
 8001b1a:	f000 fc0d 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b1e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001b22:	f7ff ff87 	bl	8001a34 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b26:	e02a      	b.n	8001b7e <HAL_I2C_MspInit+0xd6>
  else if(hi2c->Instance==I2C3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <HAL_I2C_MspInit+0xe8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d125      	bne.n	8001b7e <HAL_I2C_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001b32:	2308      	movs	r3, #8
 8001b34:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001b36:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fff1 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8001b4c:	f7ff ff54 	bl	80019f8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b50:	2004      	movs	r0, #4
 8001b52:	f7ff ff56 	bl	8001a02 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b56:	2303      	movs	r3, #3
 8001b58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5a:	2312      	movs	r3, #18
 8001b5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b66:	2304      	movs	r3, #4
 8001b68:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4808      	ldr	r0, [pc, #32]	; (8001b94 <HAL_I2C_MspInit+0xec>)
 8001b72:	f000 fbe1 	bl	8002338 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b76:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b7a:	f7ff ff5b 	bl	8001a34 <LL_APB1_GRP1_EnableClock>
}
 8001b7e:	bf00      	nop
 8001b80:	3770      	adds	r7, #112	; 0x70
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	40005c00 	.word	0x40005c00
 8001b94:	48000800 	.word	0x48000800

08001b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff ff42 	bl	8001a34 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	201c      	movs	r0, #28
 8001bb6:	f000 fb8a 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bba:	201c      	movs	r0, #28
 8001bbc:	f000 fba1 	bl	8002302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b09c      	sub	sp, #112	; 0x70
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	2250      	movs	r2, #80	; 0x50
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 faf7 	bl	80071dc <memset>
  if(huart->Instance==USART1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <HAL_UART_MspInit+0x84>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d124      	bne.n	8001c42 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 ff8f 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c10:	f7ff fef2 	bl	80019f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c18:	f7ff ff25 	bl	8001a66 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	f7ff fef0 	bl	8001a02 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c22:	23c0      	movs	r3, #192	; 0xc0
 8001c24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c32:	2307      	movs	r3, #7
 8001c34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <HAL_UART_MspInit+0x88>)
 8001c3e:	f000 fb7b 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3770      	adds	r7, #112	; 0x70
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	48000400 	.word	0x48000400

08001c54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b09c      	sub	sp, #112	; 0x70
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	2250      	movs	r2, #80	; 0x50
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f005 fab1 	bl	80071dc <memset>
  if(hpcd->Instance==USB)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_PCD_MspInit+0xa8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d136      	bne.n	8001cf2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c88:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001c8a:	2318      	movs	r3, #24
 8001c8c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c92:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001c9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ca4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001ca6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 ff39 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001cbc:	f7ff fe9c 	bl	80019f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f7ff fe9e 	bl	8001a02 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001cd8:	230a      	movs	r3, #10
 8001cda:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce6:	f000 fb27 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001cea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001cee:	f7ff fea1 	bl	8001a34 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3770      	adds	r7, #112	; 0x70
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40006800 	.word	0x40006800

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <NMI_Handler+0x4>

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4c:	f000 f9b8 	bl	80020c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <TIM2_IRQHandler+0x10>)
 8001d5a:	f003 fa25 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200002a0 	.word	0x200002a0

08001d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_kill>:

int _kill(int pid, int sig)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d82:	f005 fa37 	bl	80071f4 <__errno>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2216      	movs	r2, #22
 8001d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_exit>:

void _exit (int status)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ffe7 	bl	8001d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001daa:	e7fe      	b.n	8001daa <_exit+0x12>

08001dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e00a      	b.n	8001dd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dbe:	f3af 8000 	nop.w
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	60ba      	str	r2, [r7, #8]
 8001dca:	b2ca      	uxtb	r2, r1
 8001dcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbf0      	blt.n	8001dbe <_read+0x12>
  }

  return len;
 8001ddc:	687b      	ldr	r3, [r7, #4]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b086      	sub	sp, #24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e009      	b.n	8001e0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	60ba      	str	r2, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf1      	blt.n	8001df8 <_write+0x12>
  }
  return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_close>:

int _close(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e46:	605a      	str	r2, [r3, #4]
  return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_isatty>:

int _isatty(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f005 f99c 	bl	80071f4 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20030000 	.word	0x20030000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20000750 	.word	0x20000750
 8001ef0:	200008a8 	.word	0x200008a8

08001ef4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <SystemInit+0x98>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <SystemInit+0x98>)
 8001f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f20:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <SystemInit+0x9c>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3e:	f023 0305 	bic.w	r3, r3, #5
 8001f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <SystemInit+0xa0>)
 8001f60:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <SystemInit+0xa0>)
 8001f68:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00
 8001f90:	faf6fefb 	.word	0xfaf6fefb
 8001f94:	22041000 	.word	0x22041000

08001f98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9c:	3304      	adds	r3, #4

08001f9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001fa2:	d3f9      	bcc.n	8001f98 <CopyDataInit>
  bx lr
 8001fa4:	4770      	bx	lr

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001fa6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001fa8:	3004      	adds	r0, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001faa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>
  bx lr
 8001fae:	4770      	bx	lr

08001fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fb4:	f7ff ff9e 	bl	8001ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <LoopForever+0x6>)
 8001fba:	490c      	ldr	r1, [pc, #48]	; (8001fec <LoopForever+0xa>)
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <LoopForever+0xe>)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f7ff ffed 	bl	8001f9e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <LoopForever+0x12>)
 8001fc6:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <LoopForever+0x16>)
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <LoopForever+0x1a>)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f7ff ffe7 	bl	8001f9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001fd0:	480b      	ldr	r0, [pc, #44]	; (8002000 <LoopForever+0x1e>)
 8001fd2:	490c      	ldr	r1, [pc, #48]	; (8002004 <LoopForever+0x22>)
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f7ff ffe8 	bl	8001faa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fda:	f005 f911 	bl	8007200 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fde:	f7ff f9db 	bl	8001398 <main>

08001fe2 <LoopForever>:

LoopForever:
  b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   r0, =_estack
 8001fe4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	200001dc 	.word	0x200001dc
 8001ff0:	08009914 	.word	0x08009914
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ff4:	20030000 	.word	0x20030000
 8001ff8:	20030000 	.word	0x20030000
 8001ffc:	08009ae8 	.word	0x08009ae8
  INIT_BSS _sbss, _ebss
 8002000:	200001dc 	.word	0x200001dc
 8002004:	200008a4 	.word	0x200008a4

08002008 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC1_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_Init+0x3c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_Init+0x3c>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002022:	2003      	movs	r0, #3
 8002024:	f000 f948 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002028:	2000      	movs	r0, #0
 800202a:	f000 f80f 	bl	800204c <HAL_InitTick>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	e001      	b.n	800203e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800203a:	f7ff fd2d 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800203e:	79fb      	ldrb	r3, [r7, #7]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	58004000 	.word	0x58004000

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_InitTick+0x6c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d024      	beq.n	80020aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002060:	f002 fac2 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_InitTick+0x6c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	4619      	mov	r1, r3
 800206c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002070:	fbb3 f3f1 	udiv	r3, r3, r1
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f950 	bl	800231e <HAL_SYSTICK_Config>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10f      	bne.n	80020a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	d809      	bhi.n	800209e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208a:	2200      	movs	r2, #0
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002092:	f000 f91c 	bl	80022ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_InitTick+0x70>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e007      	b.n	80020ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e004      	b.n	80020ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
 80020a8:	e001      	b.n	80020ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000010 	.word	0x20000010
 80020bc:	2000000c 	.word	0x2000000c

080020c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x20>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x24>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_IncTick+0x24>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000010 	.word	0x20000010
 80020e4:	20000754 	.word	0x20000754

080020e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return uwTick;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_GetTick+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000754 	.word	0x20000754

08002100 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_GetTickPrio+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	2000000c 	.word	0x2000000c

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff40 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff90 	bl	800220c <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5f 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff33 	bl	800217c <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa4 	bl	8002274 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002346:	e14c      	b.n	80025e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	4013      	ands	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 813e 	beq.w	80025dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d005      	beq.n	8002378 <HAL_GPIO_Init+0x40>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d130      	bne.n	80023da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	2203      	movs	r2, #3
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ae:	2201      	movs	r2, #1
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	f003 0201 	and.w	r2, r3, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d017      	beq.n	8002416 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d123      	bne.n	800246a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	6939      	ldr	r1, [r7, #16]
 8002466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0203 	and.w	r2, r3, #3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8098 	beq.w	80025dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80024ac:	4a54      	ldr	r2, [pc, #336]	; (8002600 <HAL_GPIO_Init+0x2c8>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d6:	d019      	beq.n	800250c <HAL_GPIO_Init+0x1d4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_GPIO_Init+0x2cc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d013      	beq.n	8002508 <HAL_GPIO_Init+0x1d0>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_GPIO_Init+0x2d0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00d      	beq.n	8002504 <HAL_GPIO_Init+0x1cc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a48      	ldr	r2, [pc, #288]	; (800260c <HAL_GPIO_Init+0x2d4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <HAL_GPIO_Init+0x1c8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_GPIO_Init+0x2d8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d101      	bne.n	80024fc <HAL_GPIO_Init+0x1c4>
 80024f8:	2304      	movs	r3, #4
 80024fa:	e008      	b.n	800250e <HAL_GPIO_Init+0x1d6>
 80024fc:	2307      	movs	r3, #7
 80024fe:	e006      	b.n	800250e <HAL_GPIO_Init+0x1d6>
 8002500:	2303      	movs	r3, #3
 8002502:	e004      	b.n	800250e <HAL_GPIO_Init+0x1d6>
 8002504:	2302      	movs	r3, #2
 8002506:	e002      	b.n	800250e <HAL_GPIO_Init+0x1d6>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_GPIO_Init+0x1d6>
 800250c:	2300      	movs	r3, #0
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	f002 0203 	and.w	r2, r2, #3
 8002514:	0092      	lsls	r2, r2, #2
 8002516:	4093      	lsls	r3, r2
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800251e:	4938      	ldr	r1, [pc, #224]	; (8002600 <HAL_GPIO_Init+0x2c8>)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800252c:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002550:	4a30      	ldr	r2, [pc, #192]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800257a:	4a26      	ldr	r2, [pc, #152]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 8002582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a6:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 80025b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x2dc>)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f aeab 	bne.w	8002348 <HAL_GPIO_Init+0x10>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40010000 	.word	0x40010000
 8002604:	48000400 	.word	0x48000400
 8002608:	48000800 	.word	0x48000800
 800260c:	48000c00 	.word	0x48000c00
 8002610:	48001000 	.word	0x48001000
 8002614:	58000800 	.word	0x58000800

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002634:	e002      	b.n	800263c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e08d      	b.n	8002776 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fa1a 	bl	8001aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002698:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d107      	bne.n	80026c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e006      	b.n	80026d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d108      	bne.n	80026ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	e007      	b.n	80026fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800271c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69d9      	ldr	r1, [r3, #28]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af02      	add	r7, sp, #8
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	461a      	mov	r2, r3
 800278e:	4603      	mov	r3, r0
 8002790:	817b      	strh	r3, [r7, #10]
 8002792:	460b      	mov	r3, r1
 8002794:	813b      	strh	r3, [r7, #8]
 8002796:	4613      	mov	r3, r2
 8002798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 80f9 	bne.w	800299a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_I2C_Mem_Write+0x34>
 80027ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0ed      	b.n	800299c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_Mem_Write+0x4e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0e6      	b.n	800299c <HAL_I2C_Mem_Write+0x21c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027d6:	f7ff fc87 	bl	80020e8 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2319      	movs	r3, #25
 80027e2:	2201      	movs	r2, #1
 80027e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fac3 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0d1      	b.n	800299c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2221      	movs	r2, #33	; 0x21
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2240      	movs	r2, #64	; 0x40
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002820:	88f8      	ldrh	r0, [r7, #6]
 8002822:	893a      	ldrh	r2, [r7, #8]
 8002824:	8979      	ldrh	r1, [r7, #10]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4603      	mov	r3, r0
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f9d3 	bl	8002bdc <I2C_RequestMemoryWrite>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0a9      	b.n	800299c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	2bff      	cmp	r3, #255	; 0xff
 8002850:	d90e      	bls.n	8002870 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	b2da      	uxtb	r2, r3
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	2300      	movs	r3, #0
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fc3d 	bl	80030e8 <I2C_TransferConfig>
 800286e:	e00f      	b.n	8002890 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287e:	b2da      	uxtb	r2, r3
 8002880:	8979      	ldrh	r1, [r7, #10]
 8002882:	2300      	movs	r3, #0
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 fc2c 	bl	80030e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fabc 	bl	8002e12 <I2C_WaitOnTXISFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e07b      	b.n	800299c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d034      	beq.n	8002948 <HAL_I2C_Mem_Write+0x1c8>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d130      	bne.n	8002948 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	2200      	movs	r2, #0
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fa3f 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e04d      	b.n	800299c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2bff      	cmp	r3, #255	; 0xff
 8002908:	d90e      	bls.n	8002928 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	22ff      	movs	r2, #255	; 0xff
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	b2da      	uxtb	r2, r3
 8002916:	8979      	ldrh	r1, [r7, #10]
 8002918:	2300      	movs	r3, #0
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fbe1 	bl	80030e8 <I2C_TransferConfig>
 8002926:	e00f      	b.n	8002948 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	b2da      	uxtb	r2, r3
 8002938:	8979      	ldrh	r1, [r7, #10]
 800293a:	2300      	movs	r3, #0
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fbd0 	bl	80030e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d19e      	bne.n	8002890 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 faa2 	bl	8002ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e01a      	b.n	800299c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2220      	movs	r2, #32
 800296c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_I2C_Mem_Write+0x224>)
 800297a:	400b      	ands	r3, r1
 800297c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800299a:	2302      	movs	r3, #2
  }
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	fe00e800 	.word	0xfe00e800

080029a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	817b      	strh	r3, [r7, #10]
 80029ba:	460b      	mov	r3, r1
 80029bc:	813b      	strh	r3, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	f040 80fd 	bne.w	8002bca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_I2C_Mem_Read+0x34>
 80029d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0f1      	b.n	8002bcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Mem_Read+0x4e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0ea      	b.n	8002bcc <HAL_I2C_Mem_Read+0x224>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029fe:	f7ff fb73 	bl	80020e8 <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2319      	movs	r3, #25
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f9af 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0d5      	b.n	8002bcc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2222      	movs	r2, #34	; 0x22
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2240      	movs	r2, #64	; 0x40
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a3a      	ldr	r2, [r7, #32]
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a48:	88f8      	ldrh	r0, [r7, #6]
 8002a4a:	893a      	ldrh	r2, [r7, #8]
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	4603      	mov	r3, r0
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f913 	bl	8002c84 <I2C_RequestMemoryRead>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0ad      	b.n	8002bcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	d90e      	bls.n	8002a98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	8979      	ldrh	r1, [r7, #10]
 8002a88:	4b52      	ldr	r3, [pc, #328]	; (8002bd4 <HAL_I2C_Mem_Read+0x22c>)
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fb29 	bl	80030e8 <I2C_TransferConfig>
 8002a96:	e00f      	b.n	8002ab8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	8979      	ldrh	r1, [r7, #10]
 8002aaa:	4b4a      	ldr	r3, [pc, #296]	; (8002bd4 <HAL_I2C_Mem_Read+0x22c>)
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fb18 	bl	80030e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f956 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e07c      	b.n	8002bcc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d034      	beq.n	8002b78 <HAL_I2C_Mem_Read+0x1d0>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d130      	bne.n	8002b78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f927 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e04d      	b.n	8002bcc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2bff      	cmp	r3, #255	; 0xff
 8002b38:	d90e      	bls.n	8002b58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	22ff      	movs	r2, #255	; 0xff
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	8979      	ldrh	r1, [r7, #10]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 fac9 	bl	80030e8 <I2C_TransferConfig>
 8002b56:	e00f      	b.n	8002b78 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	8979      	ldrh	r1, [r7, #10]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fab8 	bl	80030e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d19a      	bne.n	8002ab8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f98a 	bl	8002ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e01a      	b.n	8002bcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_I2C_Mem_Read+0x230>)
 8002baa:	400b      	ands	r3, r1
 8002bac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
  }
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	80002400 	.word	0x80002400
 8002bd8:	fe00e800 	.word	0xfe00e800

08002bdc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	817b      	strh	r3, [r7, #10]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	813b      	strh	r3, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	8979      	ldrh	r1, [r7, #10]
 8002bfc:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <I2C_RequestMemoryWrite+0xa4>)
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fa6f 	bl	80030e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	69b9      	ldr	r1, [r7, #24]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f8ff 	bl	8002e12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e02c      	b.n	8002c78 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c24:	893b      	ldrh	r3, [r7, #8]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002c2e:	e015      	b.n	8002c5c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c30:	893b      	ldrh	r3, [r7, #8]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	69b9      	ldr	r1, [r7, #24]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8e5 	bl	8002e12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e012      	b.n	8002c78 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c52:	893b      	ldrh	r3, [r7, #8]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2200      	movs	r2, #0
 8002c64:	2180      	movs	r1, #128	; 0x80
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f884 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	80002000 	.word	0x80002000

08002c84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	817b      	strh	r3, [r7, #10]
 8002c96:	460b      	mov	r3, r1
 8002c98:	813b      	strh	r3, [r7, #8]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <I2C_RequestMemoryRead+0xa4>)
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fa1c 	bl	80030e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f8ac 	bl	8002e12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e02c      	b.n	8002d1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cca:	893b      	ldrh	r3, [r7, #8]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002cd4:	e015      	b.n	8002d02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd6:	893b      	ldrh	r3, [r7, #8]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f892 	bl	8002e12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e012      	b.n	8002d1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf8:	893b      	ldrh	r3, [r7, #8]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2140      	movs	r1, #64	; 0x40
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f831 	bl	8002d74 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	80002000 	.word	0x80002000

08002d2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d103      	bne.n	8002d4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d007      	beq.n	8002d68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	619a      	str	r2, [r3, #24]
  }
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d84:	e031      	b.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d8c:	d02d      	beq.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7ff f9ab 	bl	80020e8 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d122      	bne.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4013      	ands	r3, r2
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d113      	bne.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00f      	b.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d0be      	beq.n	8002d86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e1e:	e033      	b.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f87f 	bl	8002f28 <I2C_IsErrorOccurred>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e031      	b.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e3a:	d025      	beq.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3c:	f7ff f954 	bl	80020e8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11a      	bne.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d013      	beq.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d1c4      	bne.n	8002e20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eac:	e02f      	b.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f838 	bl	8002f28 <I2C_IsErrorOccurred>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e02d      	b.n	8002f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	f7ff f911 	bl	80020e8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11a      	bne.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d013      	beq.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e007      	b.n	8002f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d1c8      	bne.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d068      	beq.n	8003026 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f5c:	e049      	b.n	8002ff2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f64:	d045      	beq.n	8002ff2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7ff f8bf 	bl	80020e8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_IsErrorOccurred+0x54>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d13a      	bne.n	8002ff2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9e:	d121      	bne.n	8002fe4 <I2C_IsErrorOccurred+0xbc>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fa6:	d01d      	beq.n	8002fe4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d01a      	beq.n	8002fe4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fbe:	f7ff f893 	bl	80020e8 <HAL_GetTick>
 8002fc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc4:	e00e      	b.n	8002fe4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fc6:	f7ff f88f 	bl	80020e8 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b19      	cmp	r3, #25
 8002fd2:	d907      	bls.n	8002fe4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f043 0320 	orr.w	r3, r3, #32
 8002fda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002fe2:	e006      	b.n	8002ff2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d1e9      	bne.n	8002fc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0320 	and.w	r3, r3, #32
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d003      	beq.n	8003008 <I2C_IsErrorOccurred+0xe0>
 8003000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0aa      	beq.n	8002f5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2220      	movs	r2, #32
 8003016:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003048:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800306a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f043 0302 	orr.w	r3, r3, #2
 8003082:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01c      	beq.n	80030d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff fe45 	bl	8002d2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <I2C_IsErrorOccurred+0x1bc>)
 80030ae:	400b      	ands	r3, r1
 80030b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	fe00e800 	.word	0xfe00e800

080030e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	460b      	mov	r3, r1
 80030f4:	817b      	strh	r3, [r7, #10]
 80030f6:	4613      	mov	r3, r2
 80030f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030fa:	897b      	ldrh	r3, [r7, #10]
 80030fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003100:	7a7b      	ldrb	r3, [r7, #9]
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003108:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	4313      	orrs	r3, r2
 8003112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003116:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	0d5b      	lsrs	r3, r3, #21
 8003122:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003126:	4b08      	ldr	r3, [pc, #32]	; (8003148 <I2C_TransferConfig+0x60>)
 8003128:	430b      	orrs	r3, r1
 800312a:	43db      	mvns	r3, r3
 800312c:	ea02 0103 	and.w	r1, r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	03ff63ff 	.word	0x03ff63ff

0800314c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	d138      	bne.n	80031d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800316c:	2302      	movs	r3, #2
 800316e:	e032      	b.n	80031d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2224      	movs	r2, #36	; 0x24
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800319e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b085      	sub	sp, #20
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d139      	bne.n	800326c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003202:	2302      	movs	r3, #2
 8003204:	e033      	b.n	800326e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2224      	movs	r2, #36	; 0x24
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003234:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800327a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327c:	b08b      	sub	sp, #44	; 0x2c
 800327e:	af06      	add	r7, sp, #24
 8003280:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0cb      	b.n	8003424 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fe fcd7 	bl	8001c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2203      	movs	r2, #3
 80032aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 f9e8 	bl	8006688 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	e040      	b.n	8003340 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	3301      	adds	r3, #1
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3303      	adds	r3, #3
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3338      	adds	r3, #56	; 0x38
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003312:	7bfa      	ldrb	r2, [r7, #15]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	333c      	adds	r3, #60	; 0x3c
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	3340      	adds	r3, #64	; 0x40
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3301      	adds	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3b9      	bcc.n	80032be <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334a:	2300      	movs	r3, #0
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e044      	b.n	80033da <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	440b      	add	r3, r1
 8003374:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	440b      	add	r3, r1
 80033cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3b5      	bcc.n	8003350 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	687e      	ldr	r6, [r7, #4]
 80033ec:	466d      	mov	r5, sp
 80033ee:	f106 0410 	add.w	r4, r6, #16
 80033f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	602b      	str	r3, [r5, #0]
 80033fa:	1d33      	adds	r3, r6, #4
 80033fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f003 f95d 	bl	80066be <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d102      	bne.n	8003422 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f805 	bl	800342c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800342c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003450:	b29b      	uxth	r3, r3
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003464:	b29b      	uxth	r3, r3
 8003466:	f043 0302 	orr.w	r3, r3, #2
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800348a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	58000400 	.word	0x58000400

080034a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	58000400 	.word	0x58000400

080034bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ce:	d101      	bne.n	80034d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e000      	b.n	80034d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <LL_RCC_HSE_Enable>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80034e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_RCC_HSE_Disable>:
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800350c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_RCC_HSE_IsReady>:
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352e:	d101      	bne.n	8003534 <LL_RCC_HSE_IsReady+0x18>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <LL_RCC_HSE_IsReady+0x1a>
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <LL_RCC_HSI_Enable>:
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6013      	str	r3, [r2, #0]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_RCC_HSI_Disable>:
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_RCC_HSI_IsReady>:
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d101      	bne.n	8003594 <LL_RCC_HSI_IsReady+0x18>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <LL_RCC_HSI_IsReady+0x1a>
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_RCC_HSI48_Enable>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_RCC_HSI48_Disable>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <LL_RCC_HSI48_IsReady>:
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d101      	bne.n	8003626 <LL_RCC_HSI48_IsReady+0x18>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <LL_RCC_HSI48_IsReady+0x1a>
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_RCC_LSE_Enable>:
{
 8003632:	b480      	push	{r7}
 8003634:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_RCC_LSE_Disable>:
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <LL_RCC_LSE_EnableBypass>:
{
 8003676:	b480      	push	{r7}
 8003678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800367a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800368e:	bf00      	nop
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_RCC_LSE_DisableBypass>:
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80036be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d101      	bne.n	80036d2 <LL_RCC_LSE_IsReady+0x18>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <LL_RCC_LSE_IsReady+0x1a>
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80036e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800370c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d101      	bne.n	800373a <LL_RCC_LSI1_IsReady+0x18>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <LL_RCC_LSI1_IsReady+0x1a>
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003756:	f043 0304 	orr.w	r3, r3, #4
 800375a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003778:	f023 0304 	bic.w	r3, r3, #4
 800377c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800378e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b08      	cmp	r3, #8
 800379c:	d101      	bne.n	80037a2 <LL_RCC_LSI2_IsReady+0x18>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <LL_RCC_LSI2_IsReady+0x1a>
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80037fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6013      	str	r3, [r2, #0]
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800381c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d101      	bne.n	800382e <LL_RCC_MSI_IsReady+0x16>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <LL_RCC_MSI_IsReady+0x18>
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003872:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2bb0      	cmp	r3, #176	; 0xb0
 8003878:	d901      	bls.n	800387e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800387a:	23b0      	movs	r3, #176	; 0xb0
 800387c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800387e:	687b      	ldr	r3, [r7, #4]
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 0203 	bic.w	r2, r3, #3
 80038c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800392e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800395a:	f023 020f 	bic.w	r2, r3, #15
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800398a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80039cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5c:	6013      	str	r3, [r2, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a7a:	d101      	bne.n	8003a80 <LL_RCC_PLL_IsReady+0x18>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <LL_RCC_PLL_IsReady+0x1a>
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b00:	d101      	bne.n	8003b06 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b26:	d101      	bne.n	8003b2c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4c:	d101      	bne.n	8003b52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b70:	d101      	bne.n	8003b76 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b94:	d101      	bne.n	8003b9a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b08d      	sub	sp, #52	; 0x34
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e363      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 808d 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc8:	f7ff fe89 	bl	80038de <LL_RCC_GetSysClkSource>
 8003bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bce:	f7ff ff82 	bl	8003ad6 <LL_RCC_PLL_GetMainSource>
 8003bd2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_RCC_OscConfig+0x3e>
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d147      	bne.n	8003c70 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d144      	bne.n	8003c70 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e347      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003bf6:	f7ff fe34 	bl	8003862 <LL_RCC_MSI_GetRange>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	429c      	cmp	r4, r3
 8003bfe:	d914      	bls.n	8003c2a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fd2f 	bl	8004668 <RCC_SetFlashLatencyFromMSIRange>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e336      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fe0e 	bl	800383a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fe32 	bl	800388c <LL_RCC_MSI_SetCalibTrimming>
 8003c28:	e013      	b.n	8003c52 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fe03 	bl	800383a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fe27 	bl	800388c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fd10 	bl	8004668 <RCC_SetFlashLatencyFromMSIRange>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e317      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c52:	f000 fcc9 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4aa4      	ldr	r2, [pc, #656]	; (8003eec <HAL_RCC_OscConfig+0x344>)
 8003c5a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c5c:	4ba4      	ldr	r3, [pc, #656]	; (8003ef0 <HAL_RCC_OscConfig+0x348>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe f9f3 	bl	800204c <HAL_InitTick>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d039      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e308      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01e      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c78:	f7ff fdb0 	bl	80037dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fa34 	bl	80020e8 <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c84:	f7fe fa30 	bl	80020e8 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e2f5      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003c96:	f7ff fdbf 	bl	8003818 <LL_RCC_MSI_IsReady>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f1      	beq.n	8003c84 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fdc8 	bl	800383a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fdec 	bl	800388c <LL_RCC_MSI_SetCalibTrimming>
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cb6:	f7ff fda0 	bl	80037fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cba:	f7fe fa15 	bl	80020e8 <HAL_GetTick>
 8003cbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cc2:	f7fe fa11 	bl	80020e8 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e2d6      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003cd4:	f7ff fda0 	bl	8003818 <LL_RCC_MSI_IsReady>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f1      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x11a>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ce0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d047      	beq.n	8003d7e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cee:	f7ff fdf6 	bl	80038de <LL_RCC_GetSysClkSource>
 8003cf2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cf4:	f7ff feef 	bl	8003ad6 <LL_RCC_PLL_GetMainSource>
 8003cf8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_OscConfig+0x164>
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d108      	bne.n	8003d18 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d134      	bne.n	8003d7e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e2b4      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	d102      	bne.n	8003d28 <HAL_RCC_OscConfig+0x180>
 8003d22:	f7ff fbdd 	bl	80034e0 <LL_RCC_HSE_Enable>
 8003d26:	e001      	b.n	8003d2c <HAL_RCC_OscConfig+0x184>
 8003d28:	f7ff fbe9 	bl	80034fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d012      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fe f9d8 	bl	80020e8 <HAL_GetTick>
 8003d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fe f9d4 	bl	80020e8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e299      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003d4e:	f7ff fbe5 	bl	800351c <LL_RCC_HSE_IsReady>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f1      	beq.n	8003d3c <HAL_RCC_OscConfig+0x194>
 8003d58:	e011      	b.n	8003d7e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fe f9c5 	bl	80020e8 <HAL_GetTick>
 8003d5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d62:	f7fe f9c1 	bl	80020e8 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b64      	cmp	r3, #100	; 0x64
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e286      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003d74:	f7ff fbd2 	bl	800351c <LL_RCC_HSE_IsReady>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f1      	bne.n	8003d62 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d04c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8a:	f7ff fda8 	bl	80038de <LL_RCC_GetSysClkSource>
 8003d8e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d90:	f7ff fea1 	bl	8003ad6 <LL_RCC_PLL_GetMainSource>
 8003d94:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_OscConfig+0x200>
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d10e      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e266      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fbf1 	bl	80035a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003dbe:	e031      	b.n	8003e24 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d019      	beq.n	8003dfc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc8:	f7ff fbba 	bl	8003540 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe f98c 	bl	80020e8 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd4:	f7fe f988 	bl	80020e8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e24d      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003de6:	f7ff fbc9 	bl	800357c <LL_RCC_HSI_IsReady>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f1      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fbd3 	bl	80035a0 <LL_RCC_HSI_SetCalibTrimming>
 8003dfa:	e013      	b.n	8003e24 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfc:	f7ff fbaf 	bl	800355e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe f972 	bl	80020e8 <HAL_GetTick>
 8003e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fe f96e 	bl	80020e8 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e233      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003e1a:	f7ff fbaf 	bl	800357c <LL_RCC_HSI_IsReady>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1f1      	bne.n	8003e08 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80a3 	beq.w	8003f84 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d076      	beq.n	8003f34 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d046      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003e52:	f7ff fc66 	bl	8003722 <LL_RCC_LSI1_IsReady>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003e5c:	f7ff fc3f 	bl	80036de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e60:	f7fe f942 	bl	80020e8 <HAL_GetTick>
 8003e64:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003e68:	f7fe f93e 	bl	80020e8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e203      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003e7a:	f7ff fc52 	bl	8003722 <LL_RCC_LSI1_IsReady>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f1      	beq.n	8003e68 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003e84:	f7ff fc5f 	bl	8003746 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fe f92e 	bl	80020e8 <HAL_GetTick>
 8003e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003e90:	f7fe f92a 	bl	80020e8 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e1ef      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003ea2:	f7ff fc72 	bl	800378a <LL_RCC_LSI2_IsReady>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f1      	beq.n	8003e90 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fc7c 	bl	80037ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003eb6:	f7ff fc23 	bl	8003700 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fe f915 	bl	80020e8 <HAL_GetTick>
 8003ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ec2:	f7fe f911 	bl	80020e8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e1d6      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003ed4:	f7ff fc25 	bl	8003722 <LL_RCC_LSI1_IsReady>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f1      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x31a>
 8003ede:	e051      	b.n	8003f84 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003ee0:	f7ff fbfd 	bl	80036de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe f900 	bl	80020e8 <HAL_GetTick>
 8003ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003eea:	e00c      	b.n	8003f06 <HAL_RCC_OscConfig+0x35e>
 8003eec:	20000008 	.word	0x20000008
 8003ef0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ef4:	f7fe f8f8 	bl	80020e8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e1bd      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003f06:	f7ff fc0c 	bl	8003722 <LL_RCC_LSI1_IsReady>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f1      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003f10:	f7ff fc2a 	bl	8003768 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f16:	f7fe f8e7 	bl	80020e8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1ac      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003f28:	f7ff fc2f 	bl	800378a <LL_RCC_LSI2_IsReady>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f1      	bne.n	8003f16 <HAL_RCC_OscConfig+0x36e>
 8003f32:	e027      	b.n	8003f84 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003f34:	f7ff fc18 	bl	8003768 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fe f8d6 	bl	80020e8 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f40:	f7fe f8d2 	bl	80020e8 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e197      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003f52:	f7ff fc1a 	bl	800378a <LL_RCC_LSI2_IsReady>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f1      	bne.n	8003f40 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003f5c:	f7ff fbd0 	bl	8003700 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fe f8c2 	bl	80020e8 <HAL_GetTick>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f68:	f7fe f8be 	bl	80020e8 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e183      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003f7a:	f7ff fbd2 	bl	8003722 <LL_RCC_LSI1_IsReady>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f1      	bne.n	8003f68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d05b      	beq.n	8004048 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f90:	4ba7      	ldr	r3, [pc, #668]	; (8004230 <HAL_RCC_OscConfig+0x688>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d114      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003f9c:	f7ff fa70 	bl	8003480 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa0:	f7fe f8a2 	bl	80020e8 <HAL_GetTick>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa8:	f7fe f89e 	bl	80020e8 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e163      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fba:	4b9d      	ldr	r3, [pc, #628]	; (8004230 <HAL_RCC_OscConfig+0x688>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d102      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x42c>
 8003fce:	f7ff fb30 	bl	8003632 <LL_RCC_LSE_Enable>
 8003fd2:	e00c      	b.n	8003fee <HAL_RCC_OscConfig+0x446>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d104      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x43e>
 8003fdc:	f7ff fb4b 	bl	8003676 <LL_RCC_LSE_EnableBypass>
 8003fe0:	f7ff fb27 	bl	8003632 <LL_RCC_LSE_Enable>
 8003fe4:	e003      	b.n	8003fee <HAL_RCC_OscConfig+0x446>
 8003fe6:	f7ff fb35 	bl	8003654 <LL_RCC_LSE_Disable>
 8003fea:	f7ff fb55 	bl	8003698 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d014      	beq.n	8004020 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff6:	f7fe f877 	bl	80020e8 <HAL_GetTick>
 8003ffa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ffc:	e00a      	b.n	8004014 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffe:	f7fe f873 	bl	80020e8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	f241 3288 	movw	r2, #5000	; 0x1388
 800400c:	4293      	cmp	r3, r2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e136      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004014:	f7ff fb51 	bl	80036ba <LL_RCC_LSE_IsReady>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ef      	beq.n	8003ffe <HAL_RCC_OscConfig+0x456>
 800401e:	e013      	b.n	8004048 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fe f862 	bl	80020e8 <HAL_GetTick>
 8004024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fe f85e 	bl	80020e8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e121      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800403e:	f7ff fb3c 	bl	80036ba <LL_RCC_LSE_IsReady>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ef      	bne.n	8004028 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02c      	beq.n	80040ae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	2b00      	cmp	r3, #0
 800405a:	d014      	beq.n	8004086 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800405c:	f7ff fab5 	bl	80035ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fe f842 	bl	80020e8 <HAL_GetTick>
 8004064:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004068:	f7fe f83e 	bl	80020e8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e103      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800407a:	f7ff fac8 	bl	800360e <LL_RCC_HSI48_IsReady>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f1      	beq.n	8004068 <HAL_RCC_OscConfig+0x4c0>
 8004084:	e013      	b.n	80040ae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004086:	f7ff fab1 	bl	80035ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fe f82d 	bl	80020e8 <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004092:	f7fe f829 	bl	80020e8 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0ee      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80040a4:	f7ff fab3 	bl	800360e <LL_RCC_HSI48_IsReady>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f1      	bne.n	8004092 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80e4 	beq.w	8004280 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b8:	f7ff fc11 	bl	80038de <LL_RCC_GetSysClkSource>
 80040bc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	f040 80b4 	bne.w	8004238 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f003 0203 	and.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	429a      	cmp	r2, r3
 80040dc:	d123      	bne.n	8004126 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d11c      	bne.n	8004126 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d114      	bne.n	8004126 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d10d      	bne.n	8004126 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d106      	bne.n	8004126 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d05d      	beq.n	80041e2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b0c      	cmp	r3, #12
 800412a:	d058      	beq.n	80041de <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e0a1      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800413e:	f7ff fc84 	bl	8003a4a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004142:	f7fd ffd1 	bl	80020e8 <HAL_GetTick>
 8004146:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414a:	f7fd ffcd 	bl	80020e8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e092      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ef      	bne.n	800414a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800416a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_RCC_OscConfig+0x68c>)
 8004172:	4013      	ands	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800417c:	4311      	orrs	r1, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004182:	0212      	lsls	r2, r2, #8
 8004184:	4311      	orrs	r1, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800418a:	4311      	orrs	r1, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004190:	4311      	orrs	r1, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004196:	430a      	orrs	r2, r1
 8004198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419c:	4313      	orrs	r3, r2
 800419e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041a0:	f7ff fc44 	bl	8003a2c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b4:	f7fd ff98 	bl	80020e8 <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fd ff94 	bl	80020e8 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e059      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0ef      	beq.n	80041bc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041dc:	e050      	b.n	8004280 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e04f      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d147      	bne.n	8004280 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041f0:	f7ff fc1c 	bl	8003a2c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004202:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004204:	f7fd ff70 	bl	80020e8 <HAL_GetTick>
 8004208:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420c:	f7fd ff6c 	bl	80020e8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e031      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ef      	beq.n	800420c <HAL_RCC_OscConfig+0x664>
 800422c:	e028      	b.n	8004280 <HAL_RCC_OscConfig+0x6d8>
 800422e:	bf00      	nop
 8004230:	58000400 	.word	0x58000400
 8004234:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d01e      	beq.n	800427c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	f7ff fc04 	bl	8003a4a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fd ff51 	bl	80020e8 <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424a:	f7fd ff4d 	bl	80020e8 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e012      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1ef      	bne.n	800424a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_OscConfig+0x6e4>)
 8004276:	4013      	ands	r3, r2
 8004278:	60cb      	str	r3, [r1, #12]
 800427a:	e001      	b.n	8004280 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3734      	adds	r7, #52	; 0x34
 8004286:	46bd      	mov	sp, r7
 8004288:	bd90      	pop	{r4, r7, pc}
 800428a:	bf00      	nop
 800428c:	eefefffc 	.word	0xeefefffc

08004290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e12d      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b98      	ldr	r3, [pc, #608]	; (8004508 <HAL_RCC_ClockConfig+0x278>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d91b      	bls.n	80042ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b95      	ldr	r3, [pc, #596]	; (8004508 <HAL_RCC_ClockConfig+0x278>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 0207 	bic.w	r2, r3, #7
 80042ba:	4993      	ldr	r1, [pc, #588]	; (8004508 <HAL_RCC_ClockConfig+0x278>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c2:	f7fd ff11 	bl	80020e8 <HAL_GetTick>
 80042c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80042ca:	f7fd ff0d 	bl	80020e8 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e111      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042dc:	4b8a      	ldr	r3, [pc, #552]	; (8004508 <HAL_RCC_ClockConfig+0x278>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d1ef      	bne.n	80042ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fafb 	bl	80038f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004300:	f7fd fef2 	bl	80020e8 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004308:	f7fd feee 	bl	80020e8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0f2      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800431a:	f7ff fbe8 	bl	8003aee <LL_RCC_IsActiveFlag_HPRE>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f1      	beq.n	8004308 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d016      	beq.n	800435e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff faf2 	bl	800391e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800433a:	f7fd fed5 	bl	80020e8 <HAL_GetTick>
 800433e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004342:	f7fd fed1 	bl	80020e8 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e0d5      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004354:	f7ff fbdd 	bl	8003b12 <LL_RCC_IsActiveFlag_C2HPRE>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f1      	beq.n	8004342 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff faeb 	bl	800394a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004374:	f7fd feb8 	bl	80020e8 <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800437c:	f7fd feb4 	bl	80020e8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0b8      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800438e:	f7ff fbd3 	bl	8003b38 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f1      	beq.n	800437c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d016      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fae5 	bl	8003978 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043ae:	f7fd fe9b 	bl	80020e8 <HAL_GetTick>
 80043b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043b6:	f7fd fe97 	bl	80020e8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e09b      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80043c8:	f7ff fbc9 	bl	8003b5e <LL_RCC_IsActiveFlag_PPRE1>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f1      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d017      	beq.n	800440e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fadb 	bl	80039a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043ea:	f7fd fe7d 	bl	80020e8 <HAL_GetTick>
 80043ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043f2:	f7fd fe79 	bl	80020e8 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e07d      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004404:	f7ff fbbd 	bl	8003b82 <LL_RCC_IsActiveFlag_PPRE2>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f1      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d043      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d106      	bne.n	8004430 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004422:	f7ff f87b 	bl	800351c <LL_RCC_HSE_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d11e      	bne.n	800446a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e067      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d106      	bne.n	8004446 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004438:	f7ff fb16 	bl	8003a68 <LL_RCC_PLL_IsReady>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d113      	bne.n	800446a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e05c      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800444e:	f7ff f9e3 	bl	8003818 <LL_RCC_MSI_IsReady>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d108      	bne.n	800446a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e051      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800445c:	f7ff f88e 	bl	800357c <LL_RCC_HSI_IsReady>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e04a      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fa21 	bl	80038b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004474:	f7fd fe38 	bl	80020e8 <HAL_GetTick>
 8004478:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447a:	e00a      	b.n	8004492 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7fd fe34 	bl	80020e8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e036      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	f7ff fa24 	bl	80038de <LL_RCC_GetSysClkSource>
 8004496:	4602      	mov	r2, r0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	429a      	cmp	r2, r3
 80044a0:	d1ec      	bne.n	800447c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a2:	4b19      	ldr	r3, [pc, #100]	; (8004508 <HAL_RCC_ClockConfig+0x278>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d21b      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b0:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_RCC_ClockConfig+0x278>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 0207 	bic.w	r2, r3, #7
 80044b8:	4913      	ldr	r1, [pc, #76]	; (8004508 <HAL_RCC_ClockConfig+0x278>)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c0:	f7fd fe12 	bl	80020e8 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	e008      	b.n	80044da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80044c8:	f7fd fe0e 	bl	80020e8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e012      	b.n	8004500 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_ClockConfig+0x278>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d1ef      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80044e8:	f000 f87e 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4a07      	ldr	r2, [pc, #28]	; (800450c <HAL_RCC_ClockConfig+0x27c>)
 80044f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80044f2:	f7fd fe05 	bl	8002100 <HAL_GetTickPrio>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd fda7 	bl	800204c <HAL_InitTick>
 80044fe:	4603      	mov	r3, r0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	58004000 	.word	0x58004000
 800450c:	20000008 	.word	0x20000008

08004510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004516:	f7ff f9e2 	bl	80038de <LL_RCC_GetSysClkSource>
 800451a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004522:	f7ff f99e 	bl	8003862 <LL_RCC_MSI_GetRange>
 8004526:	4603      	mov	r3, r0
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	4a2b      	ldr	r2, [pc, #172]	; (80045dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8004530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e04b      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d102      	bne.n	8004544 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800453e:	4b28      	ldr	r3, [pc, #160]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e045      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b08      	cmp	r3, #8
 8004548:	d10a      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800454a:	f7fe ffb7 	bl	80034bc <LL_RCC_HSE_IsEnabledDiv2>
 800454e:	4603      	mov	r3, r0
 8004550:	2b01      	cmp	r3, #1
 8004552:	d102      	bne.n	800455a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e03a      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800455a:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e037      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004560:	f7ff fab9 	bl	8003ad6 <LL_RCC_PLL_GetMainSource>
 8004564:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d003      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x64>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d003      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x6a>
 8004572:	e00d      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004576:	60bb      	str	r3, [r7, #8]
        break;
 8004578:	e015      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800457a:	f7fe ff9f 	bl	80034bc <LL_RCC_HSE_IsEnabledDiv2>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d102      	bne.n	800458a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004586:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004588:	e00d      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800458c:	60bb      	str	r3, [r7, #8]
        break;
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004590:	f7ff f967 	bl	8003862 <LL_RCC_MSI_GetRange>
 8004594:	4603      	mov	r3, r0
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	4a0f      	ldr	r2, [pc, #60]	; (80045dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800459e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a2:	60bb      	str	r3, [r7, #8]
        break;
 80045a4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80045a6:	f7ff fa71 	bl	8003a8c <LL_RCC_PLL_GetN>
 80045aa:	4602      	mov	r2, r0
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	fb03 f402 	mul.w	r4, r3, r2
 80045b2:	f7ff fa84 	bl	8003abe <LL_RCC_PLL_GetDivider>
 80045b6:	4603      	mov	r3, r0
 80045b8:	091b      	lsrs	r3, r3, #4
 80045ba:	3301      	adds	r3, #1
 80045bc:	fbb4 f4f3 	udiv	r4, r4, r3
 80045c0:	f7ff fa71 	bl	8003aa6 <LL_RCC_PLL_GetR>
 80045c4:	4603      	mov	r3, r0
 80045c6:	0f5b      	lsrs	r3, r3, #29
 80045c8:	3301      	adds	r3, #1
 80045ca:	fbb4 f3f3 	udiv	r3, r4, r3
 80045ce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd90      	pop	{r4, r7, pc}
 80045da:	bf00      	nop
 80045dc:	0800952c 	.word	0x0800952c
 80045e0:	00f42400 	.word	0x00f42400
 80045e4:	01e84800 	.word	0x01e84800

080045e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e8:	b598      	push	{r3, r4, r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80045ec:	f7ff ff90 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80045f0:	4604      	mov	r4, r0
 80045f2:	f7ff f9e9 	bl	80039c8 <LL_RCC_GetAHBPrescaler>
 80045f6:	4603      	mov	r3, r0
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	4a03      	ldr	r2, [pc, #12]	; (800460c <HAL_RCC_GetHCLKFreq+0x24>)
 8004600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004604:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd98      	pop	{r3, r4, r7, pc}
 800460c:	080094cc 	.word	0x080094cc

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b598      	push	{r3, r4, r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004614:	f7ff ffe8 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004618:	4604      	mov	r4, r0
 800461a:	f7ff f9ef 	bl	80039fc <LL_RCC_GetAPB1Prescaler>
 800461e:	4603      	mov	r3, r0
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	4a04      	ldr	r2, [pc, #16]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd98      	pop	{r3, r4, r7, pc}
 8004638:	0800950c 	.word	0x0800950c

0800463c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800463c:	b598      	push	{r3, r4, r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004640:	f7ff ffd2 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004644:	4604      	mov	r4, r0
 8004646:	f7ff f9e5 	bl	8003a14 <LL_RCC_GetAPB2Prescaler>
 800464a:	4603      	mov	r3, r0
 800464c:	0adb      	lsrs	r3, r3, #11
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd98      	pop	{r3, r4, r7, pc}
 8004664:	0800950c 	.word	0x0800950c

08004668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2bb0      	cmp	r3, #176	; 0xb0
 8004674:	d903      	bls.n	800467e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e007      	b.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	4a11      	ldr	r2, [pc, #68]	; (80046cc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800468e:	f7ff f9a7 	bl	80039e0 <LL_RCC_GetAHB4Prescaler>
 8004692:	4603      	mov	r3, r0
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800469c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	0c9c      	lsrs	r4, r3, #18
 80046b2:	f7fe fef5 	bl	80034a0 <HAL_PWREx_GetVoltageRange>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4619      	mov	r1, r3
 80046ba:	4620      	mov	r0, r4
 80046bc:	f000 f80c 	bl	80046d8 <RCC_SetFlashLatency>
 80046c0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd90      	pop	{r4, r7, pc}
 80046ca:	bf00      	nop
 80046cc:	0800952c 	.word	0x0800952c
 80046d0:	080094cc 	.word	0x080094cc
 80046d4:	431bde83 	.word	0x431bde83

080046d8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b093      	sub	sp, #76	; 0x4c
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <RCC_SetFlashLatency+0xe8>)
 80046e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80046e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80046ee:	4a35      	ldr	r2, [pc, #212]	; (80047c4 <RCC_SetFlashLatency+0xec>)
 80046f0:	f107 031c 	add.w	r3, r7, #28
 80046f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80046f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <RCC_SetFlashLatency+0xf0>)
 80046fc:	f107 040c 	add.w	r4, r7, #12
 8004700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004702:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004706:	2300      	movs	r3, #0
 8004708:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004710:	d11a      	bne.n	8004748 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004712:	2300      	movs	r3, #0
 8004714:	643b      	str	r3, [r7, #64]	; 0x40
 8004716:	e013      	b.n	8004740 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	3348      	adds	r3, #72	; 0x48
 800471e:	443b      	add	r3, r7
 8004720:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	429a      	cmp	r2, r3
 8004728:	d807      	bhi.n	800473a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800472a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	3348      	adds	r3, #72	; 0x48
 8004730:	443b      	add	r3, r7
 8004732:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004736:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004738:	e020      	b.n	800477c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800473a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473c:	3301      	adds	r3, #1
 800473e:	643b      	str	r3, [r7, #64]	; 0x40
 8004740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004742:	2b03      	cmp	r3, #3
 8004744:	d9e8      	bls.n	8004718 <RCC_SetFlashLatency+0x40>
 8004746:	e019      	b.n	800477c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004748:	2300      	movs	r3, #0
 800474a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800474c:	e013      	b.n	8004776 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800474e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	3348      	adds	r3, #72	; 0x48
 8004754:	443b      	add	r3, r7
 8004756:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d807      	bhi.n	8004770 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	3348      	adds	r3, #72	; 0x48
 8004766:	443b      	add	r3, r7
 8004768:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800476c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800476e:	e005      	b.n	800477c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004772:	3301      	adds	r3, #1
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004778:	2b02      	cmp	r3, #2
 800477a:	d9e8      	bls.n	800474e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <RCC_SetFlashLatency+0xf4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f023 0207 	bic.w	r2, r3, #7
 8004784:	4911      	ldr	r1, [pc, #68]	; (80047cc <RCC_SetFlashLatency+0xf4>)
 8004786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004788:	4313      	orrs	r3, r2
 800478a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800478c:	f7fd fcac 	bl	80020e8 <HAL_GetTick>
 8004790:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004792:	e008      	b.n	80047a6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004794:	f7fd fca8 	bl	80020e8 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e007      	b.n	80047b6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <RCC_SetFlashLatency+0xf4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d1ef      	bne.n	8004794 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	374c      	adds	r7, #76	; 0x4c
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}
 80047be:	bf00      	nop
 80047c0:	080094a0 	.word	0x080094a0
 80047c4:	080094b0 	.word	0x080094b0
 80047c8:	080094bc 	.word	0x080094bc
 80047cc:	58004000 	.word	0x58004000

080047d0 <LL_RCC_LSE_IsEnabled>:
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80047d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <LL_RCC_LSE_IsEnabled+0x18>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <LL_RCC_LSE_IsEnabled+0x1a>
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_RCC_LSE_IsReady>:
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80047f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d101      	bne.n	800480c <LL_RCC_LSE_IsReady+0x18>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <LL_RCC_LSE_IsReady+0x1a>
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_MSI_EnablePLLMode>:
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004826:	f043 0304 	orr.w	r3, r3, #4
 800482a:	6013      	str	r3, [r2, #0]
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <LL_RCC_SetRFWKPClockSource>:
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004846:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800484a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <LL_RCC_SetSMPSClockSource>:
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800486a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f023 0203 	bic.w	r2, r3, #3
 8004874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4313      	orrs	r3, r2
 800487c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <LL_RCC_SetSMPSPrescaler>:
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800489c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <LL_RCC_SetUSARTClockSource>:
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80048ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f023 0203 	bic.w	r2, r3, #3
 80048c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_SetLPUARTClockSource>:
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_RCC_SetI2CClockSource>:
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004916:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004922:	43db      	mvns	r3, r3
 8004924:	401a      	ands	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800492e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <LL_RCC_SetLPTIMClockSource>:
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004950:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	43db      	mvns	r3, r3
 800495c:	401a      	ands	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	041b      	lsls	r3, r3, #16
 8004962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <LL_RCC_SetSAIClockSource>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800498c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_RCC_SetRNGClockSource>:
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80049b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <LL_RCC_SetCLK48ClockSource>:
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_RCC_SetUSBClockSource>:
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ffe3 	bl	80049d0 <LL_RCC_SetCLK48ClockSource>
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <LL_RCC_SetADCClockSource>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_RCC_SetRTCClockSource>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <LL_RCC_GetRTCClockSource>:
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_RCC_ForceBackupDomainReset>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_RCC_PLLSAI1_Enable>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_PLLSAI1_Disable>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004af8:	6013      	str	r3, [r2, #0]
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_RCC_PLLSAI1_IsReady>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b16:	d101      	bne.n	8004b1c <LL_RCC_PLLSAI1_IsReady+0x18>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004b30:	2300      	movs	r3, #0
 8004b32:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004b34:	2300      	movs	r3, #0
 8004b36:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d034      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b4c:	d021      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004b4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b52:	d81b      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b58:	d01d      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004b5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b5e:	d815      	bhi.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b68:	d110      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b78:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b7a:	e00d      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f94d 	bl	8004e20 <RCCEx_PLLSAI1_ConfigNP>
 8004b86:	4603      	mov	r3, r0
 8004b88:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b8a:	e005      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	77fb      	strb	r3, [r7, #31]
        break;
 8004b90:	e002      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b98:	7ffb      	ldrb	r3, [r7, #31]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fee8 	bl	8004978 <LL_RCC_SetSAIClockSource>
 8004ba8:	e001      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	7ffb      	ldrb	r3, [r7, #31]
 8004bac:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d046      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004bba:	f7ff ff56 	bl	8004a6a <LL_RCC_GetRTCClockSource>
 8004bbe:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d03c      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004bca:	f7fe fc59 	bl	8003480 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ff30 	bl	8004a3e <LL_RCC_SetRTCClockSource>
 8004bde:	e02e      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004bea:	f7ff ff4b 	bl	8004a84 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004bee:	f7ff ff5a 	bl	8004aa6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004c0a:	f7ff fde1 	bl	80047d0 <LL_RCC_LSE_IsEnabled>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d114      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c14:	f7fd fa68 	bl	80020e8 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fd fa64 	bl	80020e8 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d902      	bls.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	77fb      	strb	r3, [r7, #31]
              break;
 8004c32:	e004      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c34:	f7ff fdde 	bl	80047f4 <LL_RCC_LSE_IsReady>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d1ee      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004c3e:	7ffb      	ldrb	r3, [r7, #31]
 8004c40:	77bb      	strb	r3, [r7, #30]
 8004c42:	e001      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c44:	7ffb      	ldrb	r3, [r7, #31]
 8004c46:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fe2a 	bl	80048b2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fe35 	bl	80048de <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d004      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fe5d 	bl	8004944 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fe52 	bl	8004944 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fe2a 	bl	800490a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fe1f 	bl	800490a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d022      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fe8d 	bl	80049fc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cea:	d107      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfa:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d04:	d10b      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f8e3 	bl	8004ed6 <RCCEx_PLLSAI1_ConfigNQ>
 8004d10:	4603      	mov	r3, r0
 8004d12:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004d14:	7ffb      	ldrb	r3, [r7, #31]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004d1a:	7ffb      	ldrb	r3, [r7, #31]
 8004d1c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02b      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d32:	d008      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d3c:	d003      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d105      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fe2a 	bl	80049a4 <LL_RCC_SetRNGClockSource>
 8004d50:	e00a      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	f7ff fe21 	bl	80049a4 <LL_RCC_SetRNGClockSource>
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff fe34 	bl	80049d0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004d70:	d107      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d80:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d022      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fe3d 	bl	8004a12 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da0:	d107      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dba:	d10b      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 f8e3 	bl	8004f8c <RCCEx_PLLSAI1_ConfigNR>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004dca:	7ffb      	ldrb	r3, [r7, #31]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004dd0:	7ffb      	ldrb	r3, [r7, #31]
 8004dd2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d004      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fd26 	bl	8004836 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fd45 	bl	800488a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fd2c 	bl	8004862 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004e0a:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004e18:	f7ff fcfe 	bl	8004818 <LL_RCC_MSI_EnablePLLMode>
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004e2c:	f7ff fe5b 	bl	8004ae6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e30:	f7fd f95a 	bl	80020e8 <HAL_GetTick>
 8004e34:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e36:	e009      	b.n	8004e4c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e38:	f7fd f956 	bl	80020e8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d902      	bls.n	8004e4c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4a:	e004      	b.n	8004e56 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e4c:	f7ff fe5a 	bl	8004b04 <LL_RCC_PLLSAI1_IsReady>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d137      	bne.n	8004ecc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e70:	4313      	orrs	r3, r2
 8004e72:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004e8a:	f7ff fe1d 	bl	8004ac8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8e:	f7fd f92b 	bl	80020e8 <HAL_GetTick>
 8004e92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e94:	e009      	b.n	8004eaa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e96:	f7fd f927 	bl	80020e8 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d902      	bls.n	8004eaa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ea8:	e004      	b.n	8004eb4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004eaa:	f7ff fe2b 	bl	8004b04 <LL_RCC_PLLSAI1_IsReady>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d1f0      	bne.n	8004e96 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d108      	bne.n	8004ecc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ee2:	f7ff fe00 	bl	8004ae6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ee6:	f7fd f8ff 	bl	80020e8 <HAL_GetTick>
 8004eea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004eec:	e009      	b.n	8004f02 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eee:	f7fd f8fb 	bl	80020e8 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d902      	bls.n	8004f02 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	73fb      	strb	r3, [r7, #15]
      break;
 8004f00:	e004      	b.n	8004f0c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f02:	f7ff fdff 	bl	8004b04 <LL_RCC_PLLSAI1_IsReady>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1f0      	bne.n	8004eee <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d137      	bne.n	8004f82 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f26:	4313      	orrs	r3, r2
 8004f28:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f40:	f7ff fdc2 	bl	8004ac8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f44:	f7fd f8d0 	bl	80020e8 <HAL_GetTick>
 8004f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f4a:	e009      	b.n	8004f60 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f4c:	f7fd f8cc 	bl	80020e8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d902      	bls.n	8004f60 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f5e:	e004      	b.n	8004f6a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f60:	f7ff fdd0 	bl	8004b04 <LL_RCC_PLLSAI1_IsReady>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d1f0      	bne.n	8004f4c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d108      	bne.n	8004f82 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f98:	f7ff fda5 	bl	8004ae6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f9c:	f7fd f8a4 	bl	80020e8 <HAL_GetTick>
 8004fa0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fa2:	e009      	b.n	8004fb8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fa4:	f7fd f8a0 	bl	80020e8 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d902      	bls.n	8004fb8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb6:	e004      	b.n	8004fc2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fb8:	f7ff fda4 	bl	8004b04 <LL_RCC_PLLSAI1_IsReady>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d137      	bne.n	8005038 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004ff6:	f7ff fd67 	bl	8004ac8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffa:	f7fd f875 	bl	80020e8 <HAL_GetTick>
 8004ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005000:	e009      	b.n	8005016 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005002:	f7fd f871 	bl	80020e8 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d902      	bls.n	8005016 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	73fb      	strb	r3, [r7, #15]
        break;
 8005014:	e004      	b.n	8005020 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005016:	f7ff fd75 	bl	8004b04 <LL_RCC_PLLSAI1_IsReady>
 800501a:	4603      	mov	r3, r0
 800501c:	2b01      	cmp	r3, #1
 800501e:	d1f0      	bne.n	8005002 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d108      	bne.n	8005038 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005034:	4313      	orrs	r3, r2
 8005036:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e054      	b.n	8005100 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d111      	bne.n	8005086 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fbe4 	bl	8005838 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a23      	ldr	r2, [pc, #140]	; (8005108 <HAL_TIM_Base_Init+0xc4>)
 800507c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f000 facd 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	08001b99 	.word	0x08001b99

0800510c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d001      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e036      	b.n	8005192 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_TIM_Base_Start_IT+0x94>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_TIM_Base_Start_IT+0x44>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514e:	d115      	bne.n	800517c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <HAL_TIM_Base_Start_IT+0x98>)
 8005158:	4013      	ands	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b06      	cmp	r3, #6
 8005160:	d015      	beq.n	800518e <HAL_TIM_Base_Start_IT+0x82>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005168:	d011      	beq.n	800518e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517a:	e008      	b.n	800518e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e000      	b.n	8005190 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	00010007 	.word	0x00010007

080051a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d026      	beq.n	8005218 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d021      	beq.n	8005218 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0202 	mvn.w	r2, #2
 80051dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d005      	beq.n	80051fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4798      	blx	r3
 80051fc:	e009      	b.n	8005212 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d026      	beq.n	8005270 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d021      	beq.n	8005270 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0204 	mvn.w	r2, #4
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2202      	movs	r2, #2
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
 8005254:	e009      	b.n	800526a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d026      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d021      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0208 	mvn.w	r2, #8
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2204      	movs	r2, #4
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
 80052ac:	e009      	b.n	80052c2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d026      	beq.n	8005320 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d021      	beq.n	8005320 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0210 	mvn.w	r2, #16
 80052e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2208      	movs	r2, #8
 80052ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	4798      	blx	r3
 8005304:	e009      	b.n	800531a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00e      	beq.n	8005348 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d009      	beq.n	8005348 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0201 	mvn.w	r2, #1
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00e      	beq.n	8005370 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00e      	beq.n	8005398 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00e      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00e      	beq.n	80053e8 <HAL_TIM_IRQHandler+0x240>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <HAL_TIM_IRQHandler+0x240>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0220 	mvn.w	r2, #32
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_TIM_ConfigClockSource+0x1c>
 8005408:	2302      	movs	r3, #2
 800540a:	e0b6      	b.n	800557a <HAL_TIM_ConfigClockSource+0x18a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800542a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800542e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005448:	d03e      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0xd8>
 800544a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544e:	f200 8087 	bhi.w	8005560 <HAL_TIM_ConfigClockSource+0x170>
 8005452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005456:	f000 8086 	beq.w	8005566 <HAL_TIM_ConfigClockSource+0x176>
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	d87f      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x170>
 8005460:	2b70      	cmp	r3, #112	; 0x70
 8005462:	d01a      	beq.n	800549a <HAL_TIM_ConfigClockSource+0xaa>
 8005464:	2b70      	cmp	r3, #112	; 0x70
 8005466:	d87b      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x170>
 8005468:	2b60      	cmp	r3, #96	; 0x60
 800546a:	d050      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x11e>
 800546c:	2b60      	cmp	r3, #96	; 0x60
 800546e:	d877      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x170>
 8005470:	2b50      	cmp	r3, #80	; 0x50
 8005472:	d03c      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0xfe>
 8005474:	2b50      	cmp	r3, #80	; 0x50
 8005476:	d873      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x170>
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d058      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x13e>
 800547c:	2b40      	cmp	r3, #64	; 0x40
 800547e:	d86f      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x170>
 8005480:	2b30      	cmp	r3, #48	; 0x30
 8005482:	d064      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x15e>
 8005484:	2b30      	cmp	r3, #48	; 0x30
 8005486:	d86b      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x170>
 8005488:	2b20      	cmp	r3, #32
 800548a:	d060      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x15e>
 800548c:	2b20      	cmp	r3, #32
 800548e:	d867      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x170>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d05c      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x15e>
 8005494:	2b10      	cmp	r3, #16
 8005496:	d05a      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x15e>
 8005498:	e062      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054aa:	f000 f9a5 	bl	80057f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	609a      	str	r2, [r3, #8]
      break;
 80054c6:	e04f      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054d8:	f000 f98e 	bl	80057f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ea:	609a      	str	r2, [r3, #8]
      break;
 80054ec:	e03c      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fa:	461a      	mov	r2, r3
 80054fc:	f000 f900 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2150      	movs	r1, #80	; 0x50
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f959 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 800550c:	e02c      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800551a:	461a      	mov	r2, r3
 800551c:	f000 f91f 	bl	800575e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2160      	movs	r1, #96	; 0x60
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f949 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 800552c:	e01c      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	461a      	mov	r2, r3
 800553c:	f000 f8e0 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2140      	movs	r1, #64	; 0x40
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f939 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 800554c:	e00c      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f000 f930 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 800555e:	e003      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	e000      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <TIM_Base_SetConfig+0xbc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x20>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d108      	bne.n	800566a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a21      	ldr	r2, [pc, #132]	; (80056f4 <TIM_Base_SetConfig+0xbc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00b      	beq.n	800568a <TIM_Base_SetConfig+0x52>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d007      	beq.n	800568a <TIM_Base_SetConfig+0x52>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a1e      	ldr	r2, [pc, #120]	; (80056f8 <TIM_Base_SetConfig+0xc0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d003      	beq.n	800568a <TIM_Base_SetConfig+0x52>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a1d      	ldr	r2, [pc, #116]	; (80056fc <TIM_Base_SetConfig+0xc4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d108      	bne.n	800569c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <TIM_Base_SetConfig+0xbc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d007      	beq.n	80056d8 <TIM_Base_SetConfig+0xa0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a0b      	ldr	r2, [pc, #44]	; (80056f8 <TIM_Base_SetConfig+0xc0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_Base_SetConfig+0xa0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <TIM_Base_SetConfig+0xc4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d103      	bne.n	80056e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	615a      	str	r2, [r3, #20]
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40014400 	.word	0x40014400
 80056fc:	40014800 	.word	0x40014800

08005700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800572a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 030a 	bic.w	r3, r3, #10
 800573c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f023 0210 	bic.w	r2, r3, #16
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	031b      	lsls	r3, r3, #12
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800579a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80057d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f043 0307 	orr.w	r3, r3, #7
 80057e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	021a      	lsls	r2, r3, #8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	431a      	orrs	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4313      	orrs	r3, r2
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	609a      	str	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <TIM_ResetCallback+0x84>)
 8005844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <TIM_ResetCallback+0x88>)
 800584c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <TIM_ResetCallback+0x8c>)
 8005854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <TIM_ResetCallback+0x90>)
 800585c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1a      	ldr	r2, [pc, #104]	; (80058cc <TIM_ResetCallback+0x94>)
 8005864:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <TIM_ResetCallback+0x98>)
 800586c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <TIM_ResetCallback+0x9c>)
 8005874:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <TIM_ResetCallback+0xa0>)
 800587c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a16      	ldr	r2, [pc, #88]	; (80058dc <TIM_ResetCallback+0xa4>)
 8005884:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a15      	ldr	r2, [pc, #84]	; (80058e0 <TIM_ResetCallback+0xa8>)
 800588c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a14      	ldr	r2, [pc, #80]	; (80058e4 <TIM_ResetCallback+0xac>)
 8005894:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a13      	ldr	r2, [pc, #76]	; (80058e8 <TIM_ResetCallback+0xb0>)
 800589c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a12      	ldr	r2, [pc, #72]	; (80058ec <TIM_ResetCallback+0xb4>)
 80058a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <TIM_ResetCallback+0xb8>)
 80058ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	08001365 	.word	0x08001365
 80058c0:	08005583 	.word	0x08005583
 80058c4:	080055fb 	.word	0x080055fb
 80058c8:	0800560f 	.word	0x0800560f
 80058cc:	080055ab 	.word	0x080055ab
 80058d0:	080055bf 	.word	0x080055bf
 80058d4:	08005597 	.word	0x08005597
 80058d8:	080055d3 	.word	0x080055d3
 80058dc:	080055e7 	.word	0x080055e7
 80058e0:	08005623 	.word	0x08005623
 80058e4:	080059b5 	.word	0x080059b5
 80058e8:	080059c9 	.word	0x080059c9
 80058ec:	080059dd 	.word	0x080059dd
 80058f0:	080059f1 	.word	0x080059f1

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e04a      	b.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d108      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800593c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4313      	orrs	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d10c      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4313      	orrs	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40012c00 	.word	0x40012c00

080059b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <LL_RCC_GetUSARTClockSource>:
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4013      	ands	r3, r2
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_RCC_GetLPUARTClockSource>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4013      	ands	r3, r2
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e042      	b.n	8005adc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d106      	bne.n	8005a6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fc f8ad 	bl	8001bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2224      	movs	r2, #36	; 0x24
 8005a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0201 	bic.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fade 	bl	8006050 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f8b3 	bl	8005c00 <UART_SetConfig>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e01b      	b.n	8005adc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fb5d 	bl	8006194 <UART_CheckIdleState>
 8005ada:	4603      	mov	r3, r0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d17b      	bne.n	8005bf6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_UART_Transmit+0x26>
 8005b04:	88fb      	ldrh	r3, [r7, #6]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e074      	b.n	8005bf8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2221      	movs	r2, #33	; 0x21
 8005b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b1e:	f7fc fae3 	bl	80020e8 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	88fa      	ldrh	r2, [r7, #6]
 8005b28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3c:	d108      	bne.n	8005b50 <HAL_UART_Transmit+0x6c>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d104      	bne.n	8005b50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	e003      	b.n	8005b58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b58:	e030      	b.n	8005bbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	2180      	movs	r1, #128	; 0x80
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fbbf 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e03d      	b.n	8005bf8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	3302      	adds	r3, #2
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	e007      	b.n	8005baa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1c8      	bne.n	8005b5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2140      	movs	r1, #64	; 0x40
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fb88 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e006      	b.n	8005bf8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c04:	b08c      	sub	sp, #48	; 0x30
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4baf      	ldr	r3, [pc, #700]	; (8005eec <UART_SetConfig+0x2ec>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4aa4      	ldr	r2, [pc, #656]	; (8005ef0 <UART_SetConfig+0x2f0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c76:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f023 010f 	bic.w	r1, r3, #15
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a95      	ldr	r2, [pc, #596]	; (8005ef4 <UART_SetConfig+0x2f4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d125      	bne.n	8005cf0 <UART_SetConfig+0xf0>
 8005ca4:	2003      	movs	r0, #3
 8005ca6:	f7ff fead 	bl	8005a04 <LL_RCC_GetUSARTClockSource>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d81b      	bhi.n	8005ce8 <UART_SetConfig+0xe8>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <UART_SetConfig+0xb8>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cd9 	.word	0x08005cd9
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cce:	e042      	b.n	8005d56 <UART_SetConfig+0x156>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cd6:	e03e      	b.n	8005d56 <UART_SetConfig+0x156>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cde:	e03a      	b.n	8005d56 <UART_SetConfig+0x156>
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce6:	e036      	b.n	8005d56 <UART_SetConfig+0x156>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cee:	e032      	b.n	8005d56 <UART_SetConfig+0x156>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a7e      	ldr	r2, [pc, #504]	; (8005ef0 <UART_SetConfig+0x2f0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d12a      	bne.n	8005d50 <UART_SetConfig+0x150>
 8005cfa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005cfe:	f7ff fe91 	bl	8005a24 <LL_RCC_GetLPUARTClockSource>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d08:	d01a      	beq.n	8005d40 <UART_SetConfig+0x140>
 8005d0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d0e:	d81b      	bhi.n	8005d48 <UART_SetConfig+0x148>
 8005d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d14:	d00c      	beq.n	8005d30 <UART_SetConfig+0x130>
 8005d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1a:	d815      	bhi.n	8005d48 <UART_SetConfig+0x148>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d003      	beq.n	8005d28 <UART_SetConfig+0x128>
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d24:	d008      	beq.n	8005d38 <UART_SetConfig+0x138>
 8005d26:	e00f      	b.n	8005d48 <UART_SetConfig+0x148>
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d2e:	e012      	b.n	8005d56 <UART_SetConfig+0x156>
 8005d30:	2302      	movs	r3, #2
 8005d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d36:	e00e      	b.n	8005d56 <UART_SetConfig+0x156>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d3e:	e00a      	b.n	8005d56 <UART_SetConfig+0x156>
 8005d40:	2308      	movs	r3, #8
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d46:	e006      	b.n	8005d56 <UART_SetConfig+0x156>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4e:	e002      	b.n	8005d56 <UART_SetConfig+0x156>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a65      	ldr	r2, [pc, #404]	; (8005ef0 <UART_SetConfig+0x2f0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	f040 8097 	bne.w	8005e90 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d823      	bhi.n	8005db2 <UART_SetConfig+0x1b2>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0x170>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005db3 	.word	0x08005db3
 8005d78:	08005d9d 	.word	0x08005d9d
 8005d7c:	08005db3 	.word	0x08005db3
 8005d80:	08005da3 	.word	0x08005da3
 8005d84:	08005db3 	.word	0x08005db3
 8005d88:	08005db3 	.word	0x08005db3
 8005d8c:	08005db3 	.word	0x08005db3
 8005d90:	08005dab 	.word	0x08005dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d94:	f7fe fc3c 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d9a:	e010      	b.n	8005dbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d9c:	4b56      	ldr	r3, [pc, #344]	; (8005ef8 <UART_SetConfig+0x2f8>)
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005da0:	e00d      	b.n	8005dbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da2:	f7fe fbb5 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8005da6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005da8:	e009      	b.n	8005dbe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005db0:	e005      	b.n	8005dbe <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 812b 	beq.w	800601c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	4a4c      	ldr	r2, [pc, #304]	; (8005efc <UART_SetConfig+0x2fc>)
 8005dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	4413      	add	r3, r2
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d305      	bcc.n	8005df6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d903      	bls.n	8005dfe <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dfc:	e10e      	b.n	800601c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	2200      	movs	r2, #0
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	60fa      	str	r2, [r7, #12]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <UART_SetConfig+0x2fc>)
 8005e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2200      	movs	r2, #0
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e20:	f7fa fe9a 	bl	8000b58 <__aeabi_uldivmod>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4610      	mov	r0, r2
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	020b      	lsls	r3, r1, #8
 8005e36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e3a:	0202      	lsls	r2, r0, #8
 8005e3c:	6979      	ldr	r1, [r7, #20]
 8005e3e:	6849      	ldr	r1, [r1, #4]
 8005e40:	0849      	lsrs	r1, r1, #1
 8005e42:	2000      	movs	r0, #0
 8005e44:	460c      	mov	r4, r1
 8005e46:	4605      	mov	r5, r0
 8005e48:	eb12 0804 	adds.w	r8, r2, r4
 8005e4c:	eb43 0905 	adc.w	r9, r3, r5
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	469a      	mov	sl, r3
 8005e58:	4693      	mov	fp, r2
 8005e5a:	4652      	mov	r2, sl
 8005e5c:	465b      	mov	r3, fp
 8005e5e:	4640      	mov	r0, r8
 8005e60:	4649      	mov	r1, r9
 8005e62:	f7fa fe79 	bl	8000b58 <__aeabi_uldivmod>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e74:	d308      	bcc.n	8005e88 <UART_SetConfig+0x288>
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7c:	d204      	bcs.n	8005e88 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a3a      	ldr	r2, [r7, #32]
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	e0c9      	b.n	800601c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e8e:	e0c5      	b.n	800601c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e98:	d16d      	bne.n	8005f76 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	2b07      	cmp	r3, #7
 8005ea2:	d82d      	bhi.n	8005f00 <UART_SetConfig+0x300>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x2ac>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ecd 	.word	0x08005ecd
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005f01 	.word	0x08005f01
 8005eb8:	08005edb 	.word	0x08005edb
 8005ebc:	08005f01 	.word	0x08005f01
 8005ec0:	08005f01 	.word	0x08005f01
 8005ec4:	08005f01 	.word	0x08005f01
 8005ec8:	08005ee3 	.word	0x08005ee3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ecc:	f7fe fbb6 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8005ed0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ed2:	e01b      	b.n	8005f0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed4:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <UART_SetConfig+0x2f8>)
 8005ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ed8:	e018      	b.n	8005f0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eda:	f7fe fb19 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8005ede:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ee0:	e014      	b.n	8005f0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ee8:	e010      	b.n	8005f0c <UART_SetConfig+0x30c>
 8005eea:	bf00      	nop
 8005eec:	cfff69f3 	.word	0xcfff69f3
 8005ef0:	40008000 	.word	0x40008000
 8005ef4:	40013800 	.word	0x40013800
 8005ef8:	00f42400 	.word	0x00f42400
 8005efc:	0800956c 	.word	0x0800956c
      default:
        pclk = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8084 	beq.w	800601c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	4a4b      	ldr	r2, [pc, #300]	; (8006048 <UART_SetConfig+0x448>)
 8005f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f26:	005a      	lsls	r2, r3, #1
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	441a      	add	r2, r3
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f38:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	2b0f      	cmp	r3, #15
 8005f3e:	d916      	bls.n	8005f6e <UART_SetConfig+0x36e>
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f46:	d212      	bcs.n	8005f6e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f023 030f 	bic.w	r3, r3, #15
 8005f50:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	8bfb      	ldrh	r3, [r7, #30]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	8bfa      	ldrh	r2, [r7, #30]
 8005f6a:	60da      	str	r2, [r3, #12]
 8005f6c:	e056      	b.n	800601c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f74:	e052      	b.n	800601c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	2b07      	cmp	r3, #7
 8005f7e:	d822      	bhi.n	8005fc6 <UART_SetConfig+0x3c6>
 8005f80:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0x388>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005fa9 	.word	0x08005fa9
 8005f8c:	08005fb1 	.word	0x08005fb1
 8005f90:	08005fc7 	.word	0x08005fc7
 8005f94:	08005fb7 	.word	0x08005fb7
 8005f98:	08005fc7 	.word	0x08005fc7
 8005f9c:	08005fc7 	.word	0x08005fc7
 8005fa0:	08005fc7 	.word	0x08005fc7
 8005fa4:	08005fbf 	.word	0x08005fbf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa8:	f7fe fb48 	bl	800463c <HAL_RCC_GetPCLK2Freq>
 8005fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fae:	e010      	b.n	8005fd2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb0:	4b26      	ldr	r3, [pc, #152]	; (800604c <UART_SetConfig+0x44c>)
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fb4:	e00d      	b.n	8005fd2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb6:	f7fe faab 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8005fba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fbc:	e009      	b.n	8005fd2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fc4:	e005      	b.n	8005fd2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d021      	beq.n	800601c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	; (8006048 <UART_SetConfig+0x448>)
 8005fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	085b      	lsrs	r3, r3, #1
 8005ff0:	441a      	add	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	d909      	bls.n	8006016 <UART_SetConfig+0x416>
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006008:	d205      	bcs.n	8006016 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	b29a      	uxth	r2, r3
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60da      	str	r2, [r3, #12]
 8006014:	e002      	b.n	800601c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2201      	movs	r2, #1
 8006020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2201      	movs	r2, #1
 8006028:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006038:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800603c:	4618      	mov	r0, r3
 800603e:	3730      	adds	r7, #48	; 0x30
 8006040:	46bd      	mov	sp, r7
 8006042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006046:	bf00      	nop
 8006048:	0800956c 	.word	0x0800956c
 800604c:	00f42400 	.word	0x00f42400

08006050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01a      	beq.n	8006166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800614e:	d10a      	bne.n	8006166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	605a      	str	r2, [r3, #4]
  }
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b098      	sub	sp, #96	; 0x60
 8006198:	af02      	add	r7, sp, #8
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061a4:	f7fb ffa0 	bl	80020e8 <HAL_GetTick>
 80061a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d12f      	bne.n	8006218 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c0:	2200      	movs	r2, #0
 80061c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f88e 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d022      	beq.n	8006218 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e6:	653b      	str	r3, [r7, #80]	; 0x50
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f0:	647b      	str	r3, [r7, #68]	; 0x44
 80061f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e6      	bne.n	80061d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e063      	b.n	80062e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b04      	cmp	r3, #4
 8006224:	d149      	bne.n	80062ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800622a:	9300      	str	r3, [sp, #0]
 800622c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622e:	2200      	movs	r2, #0
 8006230:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f857 	bl	80062e8 <UART_WaitOnFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03c      	beq.n	80062ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	623b      	str	r3, [r7, #32]
   return(result);
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625e:	633b      	str	r3, [r7, #48]	; 0x30
 8006260:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e6      	bne.n	8006240 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	60fb      	str	r3, [r7, #12]
   return(result);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	64bb      	str	r3, [r7, #72]	; 0x48
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3308      	adds	r3, #8
 8006290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006292:	61fa      	str	r2, [r7, #28]
 8006294:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	69b9      	ldr	r1, [r7, #24]
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	617b      	str	r3, [r7, #20]
   return(result);
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e5      	bne.n	8006272 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e012      	b.n	80062e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3758      	adds	r7, #88	; 0x58
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	4613      	mov	r3, r2
 80062f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f8:	e049      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006300:	d045      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006302:	f7fb fef1 	bl	80020e8 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	429a      	cmp	r2, r3
 8006310:	d302      	bcc.n	8006318 <UART_WaitOnFlagUntilTimeout+0x30>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e048      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d031      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b08      	cmp	r3, #8
 8006336:	d110      	bne.n	800635a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2208      	movs	r2, #8
 800633e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f838 	bl	80063b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2208      	movs	r2, #8
 800634a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e029      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006368:	d111      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f81e 	bl	80063b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e00f      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	bf0c      	ite	eq
 800639e:	2301      	moveq	r3, #1
 80063a0:	2300      	movne	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d0a6      	beq.n	80062fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b095      	sub	sp, #84	; 0x54
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063dc:	643b      	str	r3, [r7, #64]	; 0x40
 80063de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3308      	adds	r3, #8
 80063f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	64bb      	str	r3, [r7, #72]	; 0x48
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800641a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e3      	bne.n	80063f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d118      	bne.n	8006462 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	60bb      	str	r3, [r7, #8]
   return(result);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f023 0310 	bic.w	r3, r3, #16
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6979      	ldr	r1, [r7, #20]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	613b      	str	r3, [r7, #16]
   return(result);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e6      	bne.n	8006430 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006476:	bf00      	nop
 8006478:	3754      	adds	r7, #84	; 0x54
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_UARTEx_DisableFifoMode+0x16>
 8006494:	2302      	movs	r3, #2
 8006496:	e027      	b.n	80064e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	; 0x24
 80064a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006508:	2302      	movs	r3, #2
 800650a:	e02d      	b.n	8006568 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2224      	movs	r2, #36	; 0x24
 8006518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f84f 	bl	80065ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006584:	2302      	movs	r3, #2
 8006586:	e02d      	b.n	80065e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2224      	movs	r2, #36	; 0x24
 8006594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f811 	bl	80065ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d108      	bne.n	800660e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800660c:	e031      	b.n	8006672 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800660e:	2308      	movs	r3, #8
 8006610:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006612:	2308      	movs	r3, #8
 8006614:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	0e5b      	lsrs	r3, r3, #25
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	0f5b      	lsrs	r3, r3, #29
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	7b3a      	ldrb	r2, [r7, #12]
 800663a:	4911      	ldr	r1, [pc, #68]	; (8006680 <UARTEx_SetNbDataToProcess+0x94>)
 800663c:	5c8a      	ldrb	r2, [r1, r2]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006642:	7b3a      	ldrb	r2, [r7, #12]
 8006644:	490f      	ldr	r1, [pc, #60]	; (8006684 <UARTEx_SetNbDataToProcess+0x98>)
 8006646:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006648:	fb93 f3f2 	sdiv	r3, r3, r2
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	7b7a      	ldrb	r2, [r7, #13]
 8006658:	4909      	ldr	r1, [pc, #36]	; (8006680 <UARTEx_SetNbDataToProcess+0x94>)
 800665a:	5c8a      	ldrb	r2, [r1, r2]
 800665c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006660:	7b7a      	ldrb	r2, [r7, #13]
 8006662:	4908      	ldr	r1, [pc, #32]	; (8006684 <UARTEx_SetNbDataToProcess+0x98>)
 8006664:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006666:	fb93 f3f2 	sdiv	r3, r3, r2
 800666a:	b29a      	uxth	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	08009584 	.word	0x08009584
 8006684:	0800958c 	.word	0x0800958c

08006688 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006690:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006694:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	43db      	mvns	r3, r3
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	4013      	ands	r3, r2
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80066be:	b084      	sub	sp, #16
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	f107 0014 	add.w	r0, r7, #20
 80066cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	b004      	add	sp, #16
 80066fe:	4770      	bx	lr

08006700 <exit>:
 8006700:	b508      	push	{r3, lr}
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <exit+0x1c>)
 8006704:	4604      	mov	r4, r0
 8006706:	b113      	cbz	r3, 800670e <exit+0xe>
 8006708:	2100      	movs	r1, #0
 800670a:	f3af 8000 	nop.w
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <exit+0x20>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	b103      	cbz	r3, 8006716 <exit+0x16>
 8006714:	4798      	blx	r3
 8006716:	4620      	mov	r0, r4
 8006718:	f7fb fb3e 	bl	8001d98 <_exit>
 800671c:	00000000 	.word	0x00000000
 8006720:	20000890 	.word	0x20000890

08006724 <__cvt>:
 8006724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006728:	ec55 4b10 	vmov	r4, r5, d0
 800672c:	2d00      	cmp	r5, #0
 800672e:	460e      	mov	r6, r1
 8006730:	4619      	mov	r1, r3
 8006732:	462b      	mov	r3, r5
 8006734:	bfbb      	ittet	lt
 8006736:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800673a:	461d      	movlt	r5, r3
 800673c:	2300      	movge	r3, #0
 800673e:	232d      	movlt	r3, #45	; 0x2d
 8006740:	700b      	strb	r3, [r1, #0]
 8006742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006744:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006748:	4691      	mov	r9, r2
 800674a:	f023 0820 	bic.w	r8, r3, #32
 800674e:	bfbc      	itt	lt
 8006750:	4622      	movlt	r2, r4
 8006752:	4614      	movlt	r4, r2
 8006754:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006758:	d005      	beq.n	8006766 <__cvt+0x42>
 800675a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800675e:	d100      	bne.n	8006762 <__cvt+0x3e>
 8006760:	3601      	adds	r6, #1
 8006762:	2102      	movs	r1, #2
 8006764:	e000      	b.n	8006768 <__cvt+0x44>
 8006766:	2103      	movs	r1, #3
 8006768:	ab03      	add	r3, sp, #12
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	ab02      	add	r3, sp, #8
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	ec45 4b10 	vmov	d0, r4, r5
 8006774:	4653      	mov	r3, sl
 8006776:	4632      	mov	r2, r6
 8006778:	f000 fe02 	bl	8007380 <_dtoa_r>
 800677c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006780:	4607      	mov	r7, r0
 8006782:	d102      	bne.n	800678a <__cvt+0x66>
 8006784:	f019 0f01 	tst.w	r9, #1
 8006788:	d022      	beq.n	80067d0 <__cvt+0xac>
 800678a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800678e:	eb07 0906 	add.w	r9, r7, r6
 8006792:	d110      	bne.n	80067b6 <__cvt+0x92>
 8006794:	783b      	ldrb	r3, [r7, #0]
 8006796:	2b30      	cmp	r3, #48	; 0x30
 8006798:	d10a      	bne.n	80067b0 <__cvt+0x8c>
 800679a:	2200      	movs	r2, #0
 800679c:	2300      	movs	r3, #0
 800679e:	4620      	mov	r0, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7fa f969 	bl	8000a78 <__aeabi_dcmpeq>
 80067a6:	b918      	cbnz	r0, 80067b0 <__cvt+0x8c>
 80067a8:	f1c6 0601 	rsb	r6, r6, #1
 80067ac:	f8ca 6000 	str.w	r6, [sl]
 80067b0:	f8da 3000 	ldr.w	r3, [sl]
 80067b4:	4499      	add	r9, r3
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	4620      	mov	r0, r4
 80067bc:	4629      	mov	r1, r5
 80067be:	f7fa f95b 	bl	8000a78 <__aeabi_dcmpeq>
 80067c2:	b108      	cbz	r0, 80067c8 <__cvt+0xa4>
 80067c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80067c8:	2230      	movs	r2, #48	; 0x30
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	454b      	cmp	r3, r9
 80067ce:	d307      	bcc.n	80067e0 <__cvt+0xbc>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d4:	1bdb      	subs	r3, r3, r7
 80067d6:	4638      	mov	r0, r7
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	b004      	add	sp, #16
 80067dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	9103      	str	r1, [sp, #12]
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	e7f0      	b.n	80067ca <__cvt+0xa6>

080067e8 <__exponent>:
 80067e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ea:	4603      	mov	r3, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	bfb8      	it	lt
 80067f0:	4249      	neglt	r1, r1
 80067f2:	f803 2b02 	strb.w	r2, [r3], #2
 80067f6:	bfb4      	ite	lt
 80067f8:	222d      	movlt	r2, #45	; 0x2d
 80067fa:	222b      	movge	r2, #43	; 0x2b
 80067fc:	2909      	cmp	r1, #9
 80067fe:	7042      	strb	r2, [r0, #1]
 8006800:	dd2a      	ble.n	8006858 <__exponent+0x70>
 8006802:	f10d 0207 	add.w	r2, sp, #7
 8006806:	4617      	mov	r7, r2
 8006808:	260a      	movs	r6, #10
 800680a:	4694      	mov	ip, r2
 800680c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006810:	fb06 1415 	mls	r4, r6, r5, r1
 8006814:	3430      	adds	r4, #48	; 0x30
 8006816:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800681a:	460c      	mov	r4, r1
 800681c:	2c63      	cmp	r4, #99	; 0x63
 800681e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006822:	4629      	mov	r1, r5
 8006824:	dcf1      	bgt.n	800680a <__exponent+0x22>
 8006826:	3130      	adds	r1, #48	; 0x30
 8006828:	f1ac 0402 	sub.w	r4, ip, #2
 800682c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006830:	1c41      	adds	r1, r0, #1
 8006832:	4622      	mov	r2, r4
 8006834:	42ba      	cmp	r2, r7
 8006836:	d30a      	bcc.n	800684e <__exponent+0x66>
 8006838:	f10d 0209 	add.w	r2, sp, #9
 800683c:	eba2 020c 	sub.w	r2, r2, ip
 8006840:	42bc      	cmp	r4, r7
 8006842:	bf88      	it	hi
 8006844:	2200      	movhi	r2, #0
 8006846:	4413      	add	r3, r2
 8006848:	1a18      	subs	r0, r3, r0
 800684a:	b003      	add	sp, #12
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006852:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006856:	e7ed      	b.n	8006834 <__exponent+0x4c>
 8006858:	2330      	movs	r3, #48	; 0x30
 800685a:	3130      	adds	r1, #48	; 0x30
 800685c:	7083      	strb	r3, [r0, #2]
 800685e:	70c1      	strb	r1, [r0, #3]
 8006860:	1d03      	adds	r3, r0, #4
 8006862:	e7f1      	b.n	8006848 <__exponent+0x60>

08006864 <_printf_float>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	ed2d 8b02 	vpush	{d8}
 800686c:	b08d      	sub	sp, #52	; 0x34
 800686e:	460c      	mov	r4, r1
 8006870:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006874:	4616      	mov	r6, r2
 8006876:	461f      	mov	r7, r3
 8006878:	4605      	mov	r5, r0
 800687a:	f000 fcb7 	bl	80071ec <_localeconv_r>
 800687e:	f8d0 a000 	ldr.w	sl, [r0]
 8006882:	4650      	mov	r0, sl
 8006884:	f7f9 fccc 	bl	8000220 <strlen>
 8006888:	2300      	movs	r3, #0
 800688a:	930a      	str	r3, [sp, #40]	; 0x28
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	f8d8 3000 	ldr.w	r3, [r8]
 8006894:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006898:	3307      	adds	r3, #7
 800689a:	f023 0307 	bic.w	r3, r3, #7
 800689e:	f103 0208 	add.w	r2, r3, #8
 80068a2:	f8c8 2000 	str.w	r2, [r8]
 80068a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ae:	9307      	str	r3, [sp, #28]
 80068b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80068b4:	ee08 0a10 	vmov	s16, r0
 80068b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80068bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068c0:	4b9e      	ldr	r3, [pc, #632]	; (8006b3c <_printf_float+0x2d8>)
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068c6:	f7fa f909 	bl	8000adc <__aeabi_dcmpun>
 80068ca:	bb88      	cbnz	r0, 8006930 <_printf_float+0xcc>
 80068cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068d0:	4b9a      	ldr	r3, [pc, #616]	; (8006b3c <_printf_float+0x2d8>)
 80068d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068d6:	f7fa f8e3 	bl	8000aa0 <__aeabi_dcmple>
 80068da:	bb48      	cbnz	r0, 8006930 <_printf_float+0xcc>
 80068dc:	2200      	movs	r2, #0
 80068de:	2300      	movs	r3, #0
 80068e0:	4640      	mov	r0, r8
 80068e2:	4649      	mov	r1, r9
 80068e4:	f7fa f8d2 	bl	8000a8c <__aeabi_dcmplt>
 80068e8:	b110      	cbz	r0, 80068f0 <_printf_float+0x8c>
 80068ea:	232d      	movs	r3, #45	; 0x2d
 80068ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f0:	4a93      	ldr	r2, [pc, #588]	; (8006b40 <_printf_float+0x2dc>)
 80068f2:	4b94      	ldr	r3, [pc, #592]	; (8006b44 <_printf_float+0x2e0>)
 80068f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80068f8:	bf94      	ite	ls
 80068fa:	4690      	movls	r8, r2
 80068fc:	4698      	movhi	r8, r3
 80068fe:	2303      	movs	r3, #3
 8006900:	6123      	str	r3, [r4, #16]
 8006902:	9b05      	ldr	r3, [sp, #20]
 8006904:	f023 0304 	bic.w	r3, r3, #4
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	9700      	str	r7, [sp, #0]
 8006910:	4633      	mov	r3, r6
 8006912:	aa0b      	add	r2, sp, #44	; 0x2c
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f9da 	bl	8006cd0 <_printf_common>
 800691c:	3001      	adds	r0, #1
 800691e:	f040 8090 	bne.w	8006a42 <_printf_float+0x1de>
 8006922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006926:	b00d      	add	sp, #52	; 0x34
 8006928:	ecbd 8b02 	vpop	{d8}
 800692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	4640      	mov	r0, r8
 8006936:	4649      	mov	r1, r9
 8006938:	f7fa f8d0 	bl	8000adc <__aeabi_dcmpun>
 800693c:	b140      	cbz	r0, 8006950 <_printf_float+0xec>
 800693e:	464b      	mov	r3, r9
 8006940:	2b00      	cmp	r3, #0
 8006942:	bfbc      	itt	lt
 8006944:	232d      	movlt	r3, #45	; 0x2d
 8006946:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800694a:	4a7f      	ldr	r2, [pc, #508]	; (8006b48 <_printf_float+0x2e4>)
 800694c:	4b7f      	ldr	r3, [pc, #508]	; (8006b4c <_printf_float+0x2e8>)
 800694e:	e7d1      	b.n	80068f4 <_printf_float+0x90>
 8006950:	6863      	ldr	r3, [r4, #4]
 8006952:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006956:	9206      	str	r2, [sp, #24]
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	d13f      	bne.n	80069dc <_printf_float+0x178>
 800695c:	2306      	movs	r3, #6
 800695e:	6063      	str	r3, [r4, #4]
 8006960:	9b05      	ldr	r3, [sp, #20]
 8006962:	6861      	ldr	r1, [r4, #4]
 8006964:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006968:	2300      	movs	r3, #0
 800696a:	9303      	str	r3, [sp, #12]
 800696c:	ab0a      	add	r3, sp, #40	; 0x28
 800696e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006972:	ab09      	add	r3, sp, #36	; 0x24
 8006974:	ec49 8b10 	vmov	d0, r8, r9
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6022      	str	r2, [r4, #0]
 800697c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006980:	4628      	mov	r0, r5
 8006982:	f7ff fecf 	bl	8006724 <__cvt>
 8006986:	9b06      	ldr	r3, [sp, #24]
 8006988:	9909      	ldr	r1, [sp, #36]	; 0x24
 800698a:	2b47      	cmp	r3, #71	; 0x47
 800698c:	4680      	mov	r8, r0
 800698e:	d108      	bne.n	80069a2 <_printf_float+0x13e>
 8006990:	1cc8      	adds	r0, r1, #3
 8006992:	db02      	blt.n	800699a <_printf_float+0x136>
 8006994:	6863      	ldr	r3, [r4, #4]
 8006996:	4299      	cmp	r1, r3
 8006998:	dd41      	ble.n	8006a1e <_printf_float+0x1ba>
 800699a:	f1ab 0302 	sub.w	r3, fp, #2
 800699e:	fa5f fb83 	uxtb.w	fp, r3
 80069a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069a6:	d820      	bhi.n	80069ea <_printf_float+0x186>
 80069a8:	3901      	subs	r1, #1
 80069aa:	465a      	mov	r2, fp
 80069ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069b0:	9109      	str	r1, [sp, #36]	; 0x24
 80069b2:	f7ff ff19 	bl	80067e8 <__exponent>
 80069b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b8:	1813      	adds	r3, r2, r0
 80069ba:	2a01      	cmp	r2, #1
 80069bc:	4681      	mov	r9, r0
 80069be:	6123      	str	r3, [r4, #16]
 80069c0:	dc02      	bgt.n	80069c8 <_printf_float+0x164>
 80069c2:	6822      	ldr	r2, [r4, #0]
 80069c4:	07d2      	lsls	r2, r2, #31
 80069c6:	d501      	bpl.n	80069cc <_printf_float+0x168>
 80069c8:	3301      	adds	r3, #1
 80069ca:	6123      	str	r3, [r4, #16]
 80069cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d09c      	beq.n	800690e <_printf_float+0xaa>
 80069d4:	232d      	movs	r3, #45	; 0x2d
 80069d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069da:	e798      	b.n	800690e <_printf_float+0xaa>
 80069dc:	9a06      	ldr	r2, [sp, #24]
 80069de:	2a47      	cmp	r2, #71	; 0x47
 80069e0:	d1be      	bne.n	8006960 <_printf_float+0xfc>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1bc      	bne.n	8006960 <_printf_float+0xfc>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e7b9      	b.n	800695e <_printf_float+0xfa>
 80069ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069ee:	d118      	bne.n	8006a22 <_printf_float+0x1be>
 80069f0:	2900      	cmp	r1, #0
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	dd0b      	ble.n	8006a0e <_printf_float+0x1aa>
 80069f6:	6121      	str	r1, [r4, #16]
 80069f8:	b913      	cbnz	r3, 8006a00 <_printf_float+0x19c>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	07d0      	lsls	r0, r2, #31
 80069fe:	d502      	bpl.n	8006a06 <_printf_float+0x1a2>
 8006a00:	3301      	adds	r3, #1
 8006a02:	440b      	add	r3, r1
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a08:	f04f 0900 	mov.w	r9, #0
 8006a0c:	e7de      	b.n	80069cc <_printf_float+0x168>
 8006a0e:	b913      	cbnz	r3, 8006a16 <_printf_float+0x1b2>
 8006a10:	6822      	ldr	r2, [r4, #0]
 8006a12:	07d2      	lsls	r2, r2, #31
 8006a14:	d501      	bpl.n	8006a1a <_printf_float+0x1b6>
 8006a16:	3302      	adds	r3, #2
 8006a18:	e7f4      	b.n	8006a04 <_printf_float+0x1a0>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e7f2      	b.n	8006a04 <_printf_float+0x1a0>
 8006a1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a24:	4299      	cmp	r1, r3
 8006a26:	db05      	blt.n	8006a34 <_printf_float+0x1d0>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	6121      	str	r1, [r4, #16]
 8006a2c:	07d8      	lsls	r0, r3, #31
 8006a2e:	d5ea      	bpl.n	8006a06 <_printf_float+0x1a2>
 8006a30:	1c4b      	adds	r3, r1, #1
 8006a32:	e7e7      	b.n	8006a04 <_printf_float+0x1a0>
 8006a34:	2900      	cmp	r1, #0
 8006a36:	bfd4      	ite	le
 8006a38:	f1c1 0202 	rsble	r2, r1, #2
 8006a3c:	2201      	movgt	r2, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	e7e0      	b.n	8006a04 <_printf_float+0x1a0>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	055a      	lsls	r2, r3, #21
 8006a46:	d407      	bmi.n	8006a58 <_printf_float+0x1f4>
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	4642      	mov	r2, r8
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b8      	blx	r7
 8006a52:	3001      	adds	r0, #1
 8006a54:	d12c      	bne.n	8006ab0 <_printf_float+0x24c>
 8006a56:	e764      	b.n	8006922 <_printf_float+0xbe>
 8006a58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a5c:	f240 80e0 	bls.w	8006c20 <_printf_float+0x3bc>
 8006a60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a64:	2200      	movs	r2, #0
 8006a66:	2300      	movs	r3, #0
 8006a68:	f7fa f806 	bl	8000a78 <__aeabi_dcmpeq>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d034      	beq.n	8006ada <_printf_float+0x276>
 8006a70:	4a37      	ldr	r2, [pc, #220]	; (8006b50 <_printf_float+0x2ec>)
 8006a72:	2301      	movs	r3, #1
 8006a74:	4631      	mov	r1, r6
 8006a76:	4628      	mov	r0, r5
 8006a78:	47b8      	blx	r7
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	f43f af51 	beq.w	8006922 <_printf_float+0xbe>
 8006a80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a84:	429a      	cmp	r2, r3
 8006a86:	db02      	blt.n	8006a8e <_printf_float+0x22a>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	07d8      	lsls	r0, r3, #31
 8006a8c:	d510      	bpl.n	8006ab0 <_printf_float+0x24c>
 8006a8e:	ee18 3a10 	vmov	r3, s16
 8006a92:	4652      	mov	r2, sl
 8006a94:	4631      	mov	r1, r6
 8006a96:	4628      	mov	r0, r5
 8006a98:	47b8      	blx	r7
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	f43f af41 	beq.w	8006922 <_printf_float+0xbe>
 8006aa0:	f04f 0800 	mov.w	r8, #0
 8006aa4:	f104 091a 	add.w	r9, r4, #26
 8006aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	4543      	cmp	r3, r8
 8006aae:	dc09      	bgt.n	8006ac4 <_printf_float+0x260>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	079b      	lsls	r3, r3, #30
 8006ab4:	f100 8107 	bmi.w	8006cc6 <_printf_float+0x462>
 8006ab8:	68e0      	ldr	r0, [r4, #12]
 8006aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006abc:	4298      	cmp	r0, r3
 8006abe:	bfb8      	it	lt
 8006ac0:	4618      	movlt	r0, r3
 8006ac2:	e730      	b.n	8006926 <_printf_float+0xc2>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	464a      	mov	r2, r9
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f af27 	beq.w	8006922 <_printf_float+0xbe>
 8006ad4:	f108 0801 	add.w	r8, r8, #1
 8006ad8:	e7e6      	b.n	8006aa8 <_printf_float+0x244>
 8006ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dc39      	bgt.n	8006b54 <_printf_float+0x2f0>
 8006ae0:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <_printf_float+0x2ec>)
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	47b8      	blx	r7
 8006aea:	3001      	adds	r0, #1
 8006aec:	f43f af19 	beq.w	8006922 <_printf_float+0xbe>
 8006af0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006af4:	4313      	orrs	r3, r2
 8006af6:	d102      	bne.n	8006afe <_printf_float+0x29a>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	07d9      	lsls	r1, r3, #31
 8006afc:	d5d8      	bpl.n	8006ab0 <_printf_float+0x24c>
 8006afe:	ee18 3a10 	vmov	r3, s16
 8006b02:	4652      	mov	r2, sl
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f af09 	beq.w	8006922 <_printf_float+0xbe>
 8006b10:	f04f 0900 	mov.w	r9, #0
 8006b14:	f104 0a1a 	add.w	sl, r4, #26
 8006b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1a:	425b      	negs	r3, r3
 8006b1c:	454b      	cmp	r3, r9
 8006b1e:	dc01      	bgt.n	8006b24 <_printf_float+0x2c0>
 8006b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b22:	e792      	b.n	8006a4a <_printf_float+0x1e6>
 8006b24:	2301      	movs	r3, #1
 8006b26:	4652      	mov	r2, sl
 8006b28:	4631      	mov	r1, r6
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	47b8      	blx	r7
 8006b2e:	3001      	adds	r0, #1
 8006b30:	f43f aef7 	beq.w	8006922 <_printf_float+0xbe>
 8006b34:	f109 0901 	add.w	r9, r9, #1
 8006b38:	e7ee      	b.n	8006b18 <_printf_float+0x2b4>
 8006b3a:	bf00      	nop
 8006b3c:	7fefffff 	.word	0x7fefffff
 8006b40:	08009594 	.word	0x08009594
 8006b44:	08009598 	.word	0x08009598
 8006b48:	0800959c 	.word	0x0800959c
 8006b4c:	080095a0 	.word	0x080095a0
 8006b50:	080095a4 	.word	0x080095a4
 8006b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	bfa8      	it	ge
 8006b5c:	461a      	movge	r2, r3
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	4691      	mov	r9, r2
 8006b62:	dc37      	bgt.n	8006bd4 <_printf_float+0x370>
 8006b64:	f04f 0b00 	mov.w	fp, #0
 8006b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b6c:	f104 021a 	add.w	r2, r4, #26
 8006b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b72:	9305      	str	r3, [sp, #20]
 8006b74:	eba3 0309 	sub.w	r3, r3, r9
 8006b78:	455b      	cmp	r3, fp
 8006b7a:	dc33      	bgt.n	8006be4 <_printf_float+0x380>
 8006b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b80:	429a      	cmp	r2, r3
 8006b82:	db3b      	blt.n	8006bfc <_printf_float+0x398>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	07da      	lsls	r2, r3, #31
 8006b88:	d438      	bmi.n	8006bfc <_printf_float+0x398>
 8006b8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b8e:	eba2 0903 	sub.w	r9, r2, r3
 8006b92:	9b05      	ldr	r3, [sp, #20]
 8006b94:	1ad2      	subs	r2, r2, r3
 8006b96:	4591      	cmp	r9, r2
 8006b98:	bfa8      	it	ge
 8006b9a:	4691      	movge	r9, r2
 8006b9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ba0:	dc35      	bgt.n	8006c0e <_printf_float+0x3aa>
 8006ba2:	f04f 0800 	mov.w	r8, #0
 8006ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006baa:	f104 0a1a 	add.w	sl, r4, #26
 8006bae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	eba3 0309 	sub.w	r3, r3, r9
 8006bb8:	4543      	cmp	r3, r8
 8006bba:	f77f af79 	ble.w	8006ab0 <_printf_float+0x24c>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b8      	blx	r7
 8006bc8:	3001      	adds	r0, #1
 8006bca:	f43f aeaa 	beq.w	8006922 <_printf_float+0xbe>
 8006bce:	f108 0801 	add.w	r8, r8, #1
 8006bd2:	e7ec      	b.n	8006bae <_printf_float+0x34a>
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4642      	mov	r2, r8
 8006bda:	4628      	mov	r0, r5
 8006bdc:	47b8      	blx	r7
 8006bde:	3001      	adds	r0, #1
 8006be0:	d1c0      	bne.n	8006b64 <_printf_float+0x300>
 8006be2:	e69e      	b.n	8006922 <_printf_float+0xbe>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4631      	mov	r1, r6
 8006be8:	4628      	mov	r0, r5
 8006bea:	9205      	str	r2, [sp, #20]
 8006bec:	47b8      	blx	r7
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f43f ae97 	beq.w	8006922 <_printf_float+0xbe>
 8006bf4:	9a05      	ldr	r2, [sp, #20]
 8006bf6:	f10b 0b01 	add.w	fp, fp, #1
 8006bfa:	e7b9      	b.n	8006b70 <_printf_float+0x30c>
 8006bfc:	ee18 3a10 	vmov	r3, s16
 8006c00:	4652      	mov	r2, sl
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d1be      	bne.n	8006b8a <_printf_float+0x326>
 8006c0c:	e689      	b.n	8006922 <_printf_float+0xbe>
 8006c0e:	9a05      	ldr	r2, [sp, #20]
 8006c10:	464b      	mov	r3, r9
 8006c12:	4442      	add	r2, r8
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d1c1      	bne.n	8006ba2 <_printf_float+0x33e>
 8006c1e:	e680      	b.n	8006922 <_printf_float+0xbe>
 8006c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c22:	2a01      	cmp	r2, #1
 8006c24:	dc01      	bgt.n	8006c2a <_printf_float+0x3c6>
 8006c26:	07db      	lsls	r3, r3, #31
 8006c28:	d53a      	bpl.n	8006ca0 <_printf_float+0x43c>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	f43f ae74 	beq.w	8006922 <_printf_float+0xbe>
 8006c3a:	ee18 3a10 	vmov	r3, s16
 8006c3e:	4652      	mov	r2, sl
 8006c40:	4631      	mov	r1, r6
 8006c42:	4628      	mov	r0, r5
 8006c44:	47b8      	blx	r7
 8006c46:	3001      	adds	r0, #1
 8006c48:	f43f ae6b 	beq.w	8006922 <_printf_float+0xbe>
 8006c4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c50:	2200      	movs	r2, #0
 8006c52:	2300      	movs	r3, #0
 8006c54:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006c58:	f7f9 ff0e 	bl	8000a78 <__aeabi_dcmpeq>
 8006c5c:	b9d8      	cbnz	r0, 8006c96 <_printf_float+0x432>
 8006c5e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006c62:	f108 0201 	add.w	r2, r8, #1
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d10e      	bne.n	8006c8e <_printf_float+0x42a>
 8006c70:	e657      	b.n	8006922 <_printf_float+0xbe>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4652      	mov	r2, sl
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f ae50 	beq.w	8006922 <_printf_float+0xbe>
 8006c82:	f108 0801 	add.w	r8, r8, #1
 8006c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	4543      	cmp	r3, r8
 8006c8c:	dcf1      	bgt.n	8006c72 <_printf_float+0x40e>
 8006c8e:	464b      	mov	r3, r9
 8006c90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c94:	e6da      	b.n	8006a4c <_printf_float+0x1e8>
 8006c96:	f04f 0800 	mov.w	r8, #0
 8006c9a:	f104 0a1a 	add.w	sl, r4, #26
 8006c9e:	e7f2      	b.n	8006c86 <_printf_float+0x422>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	4642      	mov	r2, r8
 8006ca4:	e7df      	b.n	8006c66 <_printf_float+0x402>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	464a      	mov	r2, r9
 8006caa:	4631      	mov	r1, r6
 8006cac:	4628      	mov	r0, r5
 8006cae:	47b8      	blx	r7
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	f43f ae36 	beq.w	8006922 <_printf_float+0xbe>
 8006cb6:	f108 0801 	add.w	r8, r8, #1
 8006cba:	68e3      	ldr	r3, [r4, #12]
 8006cbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cbe:	1a5b      	subs	r3, r3, r1
 8006cc0:	4543      	cmp	r3, r8
 8006cc2:	dcf0      	bgt.n	8006ca6 <_printf_float+0x442>
 8006cc4:	e6f8      	b.n	8006ab8 <_printf_float+0x254>
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	f104 0919 	add.w	r9, r4, #25
 8006cce:	e7f4      	b.n	8006cba <_printf_float+0x456>

08006cd0 <_printf_common>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	4699      	mov	r9, r3
 8006cd8:	688a      	ldr	r2, [r1, #8]
 8006cda:	690b      	ldr	r3, [r1, #16]
 8006cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	bfb8      	it	lt
 8006ce4:	4613      	movlt	r3, r2
 8006ce6:	6033      	str	r3, [r6, #0]
 8006ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cec:	4607      	mov	r7, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b10a      	cbz	r2, 8006cf6 <_printf_common+0x26>
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	0699      	lsls	r1, r3, #26
 8006cfa:	bf42      	ittt	mi
 8006cfc:	6833      	ldrmi	r3, [r6, #0]
 8006cfe:	3302      	addmi	r3, #2
 8006d00:	6033      	strmi	r3, [r6, #0]
 8006d02:	6825      	ldr	r5, [r4, #0]
 8006d04:	f015 0506 	ands.w	r5, r5, #6
 8006d08:	d106      	bne.n	8006d18 <_printf_common+0x48>
 8006d0a:	f104 0a19 	add.w	sl, r4, #25
 8006d0e:	68e3      	ldr	r3, [r4, #12]
 8006d10:	6832      	ldr	r2, [r6, #0]
 8006d12:	1a9b      	subs	r3, r3, r2
 8006d14:	42ab      	cmp	r3, r5
 8006d16:	dc26      	bgt.n	8006d66 <_printf_common+0x96>
 8006d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d1c:	1e13      	subs	r3, r2, #0
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	bf18      	it	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	0692      	lsls	r2, r2, #26
 8006d26:	d42b      	bmi.n	8006d80 <_printf_common+0xb0>
 8006d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4638      	mov	r0, r7
 8006d30:	47c0      	blx	r8
 8006d32:	3001      	adds	r0, #1
 8006d34:	d01e      	beq.n	8006d74 <_printf_common+0xa4>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	6922      	ldr	r2, [r4, #16]
 8006d3a:	f003 0306 	and.w	r3, r3, #6
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	bf02      	ittt	eq
 8006d42:	68e5      	ldreq	r5, [r4, #12]
 8006d44:	6833      	ldreq	r3, [r6, #0]
 8006d46:	1aed      	subeq	r5, r5, r3
 8006d48:	68a3      	ldr	r3, [r4, #8]
 8006d4a:	bf0c      	ite	eq
 8006d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d50:	2500      	movne	r5, #0
 8006d52:	4293      	cmp	r3, r2
 8006d54:	bfc4      	itt	gt
 8006d56:	1a9b      	subgt	r3, r3, r2
 8006d58:	18ed      	addgt	r5, r5, r3
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	341a      	adds	r4, #26
 8006d5e:	42b5      	cmp	r5, r6
 8006d60:	d11a      	bne.n	8006d98 <_printf_common+0xc8>
 8006d62:	2000      	movs	r0, #0
 8006d64:	e008      	b.n	8006d78 <_printf_common+0xa8>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4652      	mov	r2, sl
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	47c0      	blx	r8
 8006d70:	3001      	adds	r0, #1
 8006d72:	d103      	bne.n	8006d7c <_printf_common+0xac>
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	e7c6      	b.n	8006d0e <_printf_common+0x3e>
 8006d80:	18e1      	adds	r1, r4, r3
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	2030      	movs	r0, #48	; 0x30
 8006d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d8a:	4422      	add	r2, r4
 8006d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d94:	3302      	adds	r3, #2
 8006d96:	e7c7      	b.n	8006d28 <_printf_common+0x58>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4638      	mov	r0, r7
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d0e6      	beq.n	8006d74 <_printf_common+0xa4>
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7d9      	b.n	8006d5e <_printf_common+0x8e>
	...

08006dac <_printf_i>:
 8006dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db0:	7e0f      	ldrb	r7, [r1, #24]
 8006db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006db4:	2f78      	cmp	r7, #120	; 0x78
 8006db6:	4691      	mov	r9, r2
 8006db8:	4680      	mov	r8, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	469a      	mov	sl, r3
 8006dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dc2:	d807      	bhi.n	8006dd4 <_printf_i+0x28>
 8006dc4:	2f62      	cmp	r7, #98	; 0x62
 8006dc6:	d80a      	bhi.n	8006dde <_printf_i+0x32>
 8006dc8:	2f00      	cmp	r7, #0
 8006dca:	f000 80d4 	beq.w	8006f76 <_printf_i+0x1ca>
 8006dce:	2f58      	cmp	r7, #88	; 0x58
 8006dd0:	f000 80c0 	beq.w	8006f54 <_printf_i+0x1a8>
 8006dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ddc:	e03a      	b.n	8006e54 <_printf_i+0xa8>
 8006dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006de2:	2b15      	cmp	r3, #21
 8006de4:	d8f6      	bhi.n	8006dd4 <_printf_i+0x28>
 8006de6:	a101      	add	r1, pc, #4	; (adr r1, 8006dec <_printf_i+0x40>)
 8006de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dec:	08006e45 	.word	0x08006e45
 8006df0:	08006e59 	.word	0x08006e59
 8006df4:	08006dd5 	.word	0x08006dd5
 8006df8:	08006dd5 	.word	0x08006dd5
 8006dfc:	08006dd5 	.word	0x08006dd5
 8006e00:	08006dd5 	.word	0x08006dd5
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006dd5 	.word	0x08006dd5
 8006e0c:	08006dd5 	.word	0x08006dd5
 8006e10:	08006dd5 	.word	0x08006dd5
 8006e14:	08006dd5 	.word	0x08006dd5
 8006e18:	08006f5d 	.word	0x08006f5d
 8006e1c:	08006e85 	.word	0x08006e85
 8006e20:	08006f17 	.word	0x08006f17
 8006e24:	08006dd5 	.word	0x08006dd5
 8006e28:	08006dd5 	.word	0x08006dd5
 8006e2c:	08006f7f 	.word	0x08006f7f
 8006e30:	08006dd5 	.word	0x08006dd5
 8006e34:	08006e85 	.word	0x08006e85
 8006e38:	08006dd5 	.word	0x08006dd5
 8006e3c:	08006dd5 	.word	0x08006dd5
 8006e40:	08006f1f 	.word	0x08006f1f
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	602a      	str	r2, [r5, #0]
 8006e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e54:	2301      	movs	r3, #1
 8006e56:	e09f      	b.n	8006f98 <_printf_i+0x1ec>
 8006e58:	6820      	ldr	r0, [r4, #0]
 8006e5a:	682b      	ldr	r3, [r5, #0]
 8006e5c:	0607      	lsls	r7, r0, #24
 8006e5e:	f103 0104 	add.w	r1, r3, #4
 8006e62:	6029      	str	r1, [r5, #0]
 8006e64:	d501      	bpl.n	8006e6a <_printf_i+0xbe>
 8006e66:	681e      	ldr	r6, [r3, #0]
 8006e68:	e003      	b.n	8006e72 <_printf_i+0xc6>
 8006e6a:	0646      	lsls	r6, r0, #25
 8006e6c:	d5fb      	bpl.n	8006e66 <_printf_i+0xba>
 8006e6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	da03      	bge.n	8006e7e <_printf_i+0xd2>
 8006e76:	232d      	movs	r3, #45	; 0x2d
 8006e78:	4276      	negs	r6, r6
 8006e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7e:	485a      	ldr	r0, [pc, #360]	; (8006fe8 <_printf_i+0x23c>)
 8006e80:	230a      	movs	r3, #10
 8006e82:	e012      	b.n	8006eaa <_printf_i+0xfe>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	6820      	ldr	r0, [r4, #0]
 8006e88:	1d19      	adds	r1, r3, #4
 8006e8a:	6029      	str	r1, [r5, #0]
 8006e8c:	0605      	lsls	r5, r0, #24
 8006e8e:	d501      	bpl.n	8006e94 <_printf_i+0xe8>
 8006e90:	681e      	ldr	r6, [r3, #0]
 8006e92:	e002      	b.n	8006e9a <_printf_i+0xee>
 8006e94:	0641      	lsls	r1, r0, #25
 8006e96:	d5fb      	bpl.n	8006e90 <_printf_i+0xe4>
 8006e98:	881e      	ldrh	r6, [r3, #0]
 8006e9a:	4853      	ldr	r0, [pc, #332]	; (8006fe8 <_printf_i+0x23c>)
 8006e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e9e:	bf0c      	ite	eq
 8006ea0:	2308      	moveq	r3, #8
 8006ea2:	230a      	movne	r3, #10
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eaa:	6865      	ldr	r5, [r4, #4]
 8006eac:	60a5      	str	r5, [r4, #8]
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	bfa2      	ittt	ge
 8006eb2:	6821      	ldrge	r1, [r4, #0]
 8006eb4:	f021 0104 	bicge.w	r1, r1, #4
 8006eb8:	6021      	strge	r1, [r4, #0]
 8006eba:	b90e      	cbnz	r6, 8006ec0 <_printf_i+0x114>
 8006ebc:	2d00      	cmp	r5, #0
 8006ebe:	d04b      	beq.n	8006f58 <_printf_i+0x1ac>
 8006ec0:	4615      	mov	r5, r2
 8006ec2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ec6:	fb03 6711 	mls	r7, r3, r1, r6
 8006eca:	5dc7      	ldrb	r7, [r0, r7]
 8006ecc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ed0:	4637      	mov	r7, r6
 8006ed2:	42bb      	cmp	r3, r7
 8006ed4:	460e      	mov	r6, r1
 8006ed6:	d9f4      	bls.n	8006ec2 <_printf_i+0x116>
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d10b      	bne.n	8006ef4 <_printf_i+0x148>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	07de      	lsls	r6, r3, #31
 8006ee0:	d508      	bpl.n	8006ef4 <_printf_i+0x148>
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	6861      	ldr	r1, [r4, #4]
 8006ee6:	4299      	cmp	r1, r3
 8006ee8:	bfde      	ittt	le
 8006eea:	2330      	movle	r3, #48	; 0x30
 8006eec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ef0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ef4:	1b52      	subs	r2, r2, r5
 8006ef6:	6122      	str	r2, [r4, #16]
 8006ef8:	f8cd a000 	str.w	sl, [sp]
 8006efc:	464b      	mov	r3, r9
 8006efe:	aa03      	add	r2, sp, #12
 8006f00:	4621      	mov	r1, r4
 8006f02:	4640      	mov	r0, r8
 8006f04:	f7ff fee4 	bl	8006cd0 <_printf_common>
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d14a      	bne.n	8006fa2 <_printf_i+0x1f6>
 8006f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f10:	b004      	add	sp, #16
 8006f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	f043 0320 	orr.w	r3, r3, #32
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	4833      	ldr	r0, [pc, #204]	; (8006fec <_printf_i+0x240>)
 8006f20:	2778      	movs	r7, #120	; 0x78
 8006f22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	6829      	ldr	r1, [r5, #0]
 8006f2a:	061f      	lsls	r7, r3, #24
 8006f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f30:	d402      	bmi.n	8006f38 <_printf_i+0x18c>
 8006f32:	065f      	lsls	r7, r3, #25
 8006f34:	bf48      	it	mi
 8006f36:	b2b6      	uxthmi	r6, r6
 8006f38:	07df      	lsls	r7, r3, #31
 8006f3a:	bf48      	it	mi
 8006f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f40:	6029      	str	r1, [r5, #0]
 8006f42:	bf48      	it	mi
 8006f44:	6023      	strmi	r3, [r4, #0]
 8006f46:	b91e      	cbnz	r6, 8006f50 <_printf_i+0x1a4>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	f023 0320 	bic.w	r3, r3, #32
 8006f4e:	6023      	str	r3, [r4, #0]
 8006f50:	2310      	movs	r3, #16
 8006f52:	e7a7      	b.n	8006ea4 <_printf_i+0xf8>
 8006f54:	4824      	ldr	r0, [pc, #144]	; (8006fe8 <_printf_i+0x23c>)
 8006f56:	e7e4      	b.n	8006f22 <_printf_i+0x176>
 8006f58:	4615      	mov	r5, r2
 8006f5a:	e7bd      	b.n	8006ed8 <_printf_i+0x12c>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	6826      	ldr	r6, [r4, #0]
 8006f60:	6961      	ldr	r1, [r4, #20]
 8006f62:	1d18      	adds	r0, r3, #4
 8006f64:	6028      	str	r0, [r5, #0]
 8006f66:	0635      	lsls	r5, r6, #24
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	d501      	bpl.n	8006f70 <_printf_i+0x1c4>
 8006f6c:	6019      	str	r1, [r3, #0]
 8006f6e:	e002      	b.n	8006f76 <_printf_i+0x1ca>
 8006f70:	0670      	lsls	r0, r6, #25
 8006f72:	d5fb      	bpl.n	8006f6c <_printf_i+0x1c0>
 8006f74:	8019      	strh	r1, [r3, #0]
 8006f76:	2300      	movs	r3, #0
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	4615      	mov	r5, r2
 8006f7c:	e7bc      	b.n	8006ef8 <_printf_i+0x14c>
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	1d1a      	adds	r2, r3, #4
 8006f82:	602a      	str	r2, [r5, #0]
 8006f84:	681d      	ldr	r5, [r3, #0]
 8006f86:	6862      	ldr	r2, [r4, #4]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7f9 f8f8 	bl	8000180 <memchr>
 8006f90:	b108      	cbz	r0, 8006f96 <_printf_i+0x1ea>
 8006f92:	1b40      	subs	r0, r0, r5
 8006f94:	6060      	str	r0, [r4, #4]
 8006f96:	6863      	ldr	r3, [r4, #4]
 8006f98:	6123      	str	r3, [r4, #16]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fa0:	e7aa      	b.n	8006ef8 <_printf_i+0x14c>
 8006fa2:	6923      	ldr	r3, [r4, #16]
 8006fa4:	462a      	mov	r2, r5
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	4640      	mov	r0, r8
 8006faa:	47d0      	blx	sl
 8006fac:	3001      	adds	r0, #1
 8006fae:	d0ad      	beq.n	8006f0c <_printf_i+0x160>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	079b      	lsls	r3, r3, #30
 8006fb4:	d413      	bmi.n	8006fde <_printf_i+0x232>
 8006fb6:	68e0      	ldr	r0, [r4, #12]
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	4298      	cmp	r0, r3
 8006fbc:	bfb8      	it	lt
 8006fbe:	4618      	movlt	r0, r3
 8006fc0:	e7a6      	b.n	8006f10 <_printf_i+0x164>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	4640      	mov	r0, r8
 8006fca:	47d0      	blx	sl
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d09d      	beq.n	8006f0c <_printf_i+0x160>
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	68e3      	ldr	r3, [r4, #12]
 8006fd4:	9903      	ldr	r1, [sp, #12]
 8006fd6:	1a5b      	subs	r3, r3, r1
 8006fd8:	42ab      	cmp	r3, r5
 8006fda:	dcf2      	bgt.n	8006fc2 <_printf_i+0x216>
 8006fdc:	e7eb      	b.n	8006fb6 <_printf_i+0x20a>
 8006fde:	2500      	movs	r5, #0
 8006fe0:	f104 0619 	add.w	r6, r4, #25
 8006fe4:	e7f5      	b.n	8006fd2 <_printf_i+0x226>
 8006fe6:	bf00      	nop
 8006fe8:	080095a6 	.word	0x080095a6
 8006fec:	080095b7 	.word	0x080095b7

08006ff0 <sniprintf>:
 8006ff0:	b40c      	push	{r2, r3}
 8006ff2:	b530      	push	{r4, r5, lr}
 8006ff4:	4b17      	ldr	r3, [pc, #92]	; (8007054 <sniprintf+0x64>)
 8006ff6:	1e0c      	subs	r4, r1, #0
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	b09d      	sub	sp, #116	; 0x74
 8006ffc:	da08      	bge.n	8007010 <sniprintf+0x20>
 8006ffe:	238b      	movs	r3, #139	; 0x8b
 8007000:	602b      	str	r3, [r5, #0]
 8007002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007006:	b01d      	add	sp, #116	; 0x74
 8007008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800700c:	b002      	add	sp, #8
 800700e:	4770      	bx	lr
 8007010:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007014:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007018:	bf14      	ite	ne
 800701a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800701e:	4623      	moveq	r3, r4
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007028:	9002      	str	r0, [sp, #8]
 800702a:	9006      	str	r0, [sp, #24]
 800702c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007030:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007032:	ab21      	add	r3, sp, #132	; 0x84
 8007034:	a902      	add	r1, sp, #8
 8007036:	4628      	mov	r0, r5
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	f000 ffed 	bl	8008018 <_svfiprintf_r>
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	bfbc      	itt	lt
 8007042:	238b      	movlt	r3, #139	; 0x8b
 8007044:	602b      	strlt	r3, [r5, #0]
 8007046:	2c00      	cmp	r4, #0
 8007048:	d0dd      	beq.n	8007006 <sniprintf+0x16>
 800704a:	9b02      	ldr	r3, [sp, #8]
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e7d9      	b.n	8007006 <sniprintf+0x16>
 8007052:	bf00      	nop
 8007054:	2000006c 	.word	0x2000006c

08007058 <std>:
 8007058:	2300      	movs	r3, #0
 800705a:	b510      	push	{r4, lr}
 800705c:	4604      	mov	r4, r0
 800705e:	e9c0 3300 	strd	r3, r3, [r0]
 8007062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007066:	6083      	str	r3, [r0, #8]
 8007068:	8181      	strh	r1, [r0, #12]
 800706a:	6643      	str	r3, [r0, #100]	; 0x64
 800706c:	81c2      	strh	r2, [r0, #14]
 800706e:	6183      	str	r3, [r0, #24]
 8007070:	4619      	mov	r1, r3
 8007072:	2208      	movs	r2, #8
 8007074:	305c      	adds	r0, #92	; 0x5c
 8007076:	f000 f8b1 	bl	80071dc <memset>
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <std+0x58>)
 800707c:	6263      	str	r3, [r4, #36]	; 0x24
 800707e:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <std+0x5c>)
 8007080:	62a3      	str	r3, [r4, #40]	; 0x28
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <std+0x60>)
 8007084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007086:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <std+0x64>)
 8007088:	6323      	str	r3, [r4, #48]	; 0x30
 800708a:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <std+0x68>)
 800708c:	6224      	str	r4, [r4, #32]
 800708e:	429c      	cmp	r4, r3
 8007090:	d006      	beq.n	80070a0 <std+0x48>
 8007092:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007096:	4294      	cmp	r4, r2
 8007098:	d002      	beq.n	80070a0 <std+0x48>
 800709a:	33d0      	adds	r3, #208	; 0xd0
 800709c:	429c      	cmp	r4, r3
 800709e:	d105      	bne.n	80070ac <std+0x54>
 80070a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a8:	f000 b8ce 	b.w	8007248 <__retarget_lock_init_recursive>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	bf00      	nop
 80070b0:	08008bd1 	.word	0x08008bd1
 80070b4:	08008bf3 	.word	0x08008bf3
 80070b8:	08008c2b 	.word	0x08008c2b
 80070bc:	08008c4f 	.word	0x08008c4f
 80070c0:	20000758 	.word	0x20000758

080070c4 <stdio_exit_handler>:
 80070c4:	4a02      	ldr	r2, [pc, #8]	; (80070d0 <stdio_exit_handler+0xc>)
 80070c6:	4903      	ldr	r1, [pc, #12]	; (80070d4 <stdio_exit_handler+0x10>)
 80070c8:	4803      	ldr	r0, [pc, #12]	; (80070d8 <stdio_exit_handler+0x14>)
 80070ca:	f000 b869 	b.w	80071a0 <_fwalk_sglue>
 80070ce:	bf00      	nop
 80070d0:	20000014 	.word	0x20000014
 80070d4:	08008471 	.word	0x08008471
 80070d8:	20000020 	.word	0x20000020

080070dc <cleanup_stdio>:
 80070dc:	6841      	ldr	r1, [r0, #4]
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <cleanup_stdio+0x34>)
 80070e0:	4299      	cmp	r1, r3
 80070e2:	b510      	push	{r4, lr}
 80070e4:	4604      	mov	r4, r0
 80070e6:	d001      	beq.n	80070ec <cleanup_stdio+0x10>
 80070e8:	f001 f9c2 	bl	8008470 <_fflush_r>
 80070ec:	68a1      	ldr	r1, [r4, #8]
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <cleanup_stdio+0x38>)
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <cleanup_stdio+0x1e>
 80070f4:	4620      	mov	r0, r4
 80070f6:	f001 f9bb 	bl	8008470 <_fflush_r>
 80070fa:	68e1      	ldr	r1, [r4, #12]
 80070fc:	4b06      	ldr	r3, [pc, #24]	; (8007118 <cleanup_stdio+0x3c>)
 80070fe:	4299      	cmp	r1, r3
 8007100:	d004      	beq.n	800710c <cleanup_stdio+0x30>
 8007102:	4620      	mov	r0, r4
 8007104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007108:	f001 b9b2 	b.w	8008470 <_fflush_r>
 800710c:	bd10      	pop	{r4, pc}
 800710e:	bf00      	nop
 8007110:	20000758 	.word	0x20000758
 8007114:	200007c0 	.word	0x200007c0
 8007118:	20000828 	.word	0x20000828

0800711c <global_stdio_init.part.0>:
 800711c:	b510      	push	{r4, lr}
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <global_stdio_init.part.0+0x30>)
 8007120:	4c0b      	ldr	r4, [pc, #44]	; (8007150 <global_stdio_init.part.0+0x34>)
 8007122:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <global_stdio_init.part.0+0x38>)
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	4620      	mov	r0, r4
 8007128:	2200      	movs	r2, #0
 800712a:	2104      	movs	r1, #4
 800712c:	f7ff ff94 	bl	8007058 <std>
 8007130:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007134:	2201      	movs	r2, #1
 8007136:	2109      	movs	r1, #9
 8007138:	f7ff ff8e 	bl	8007058 <std>
 800713c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007140:	2202      	movs	r2, #2
 8007142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007146:	2112      	movs	r1, #18
 8007148:	f7ff bf86 	b.w	8007058 <std>
 800714c:	20000890 	.word	0x20000890
 8007150:	20000758 	.word	0x20000758
 8007154:	080070c5 	.word	0x080070c5

08007158 <__sfp_lock_acquire>:
 8007158:	4801      	ldr	r0, [pc, #4]	; (8007160 <__sfp_lock_acquire+0x8>)
 800715a:	f000 b876 	b.w	800724a <__retarget_lock_acquire_recursive>
 800715e:	bf00      	nop
 8007160:	20000895 	.word	0x20000895

08007164 <__sfp_lock_release>:
 8007164:	4801      	ldr	r0, [pc, #4]	; (800716c <__sfp_lock_release+0x8>)
 8007166:	f000 b871 	b.w	800724c <__retarget_lock_release_recursive>
 800716a:	bf00      	nop
 800716c:	20000895 	.word	0x20000895

08007170 <__sinit>:
 8007170:	b510      	push	{r4, lr}
 8007172:	4604      	mov	r4, r0
 8007174:	f7ff fff0 	bl	8007158 <__sfp_lock_acquire>
 8007178:	6a23      	ldr	r3, [r4, #32]
 800717a:	b11b      	cbz	r3, 8007184 <__sinit+0x14>
 800717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007180:	f7ff bff0 	b.w	8007164 <__sfp_lock_release>
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <__sinit+0x28>)
 8007186:	6223      	str	r3, [r4, #32]
 8007188:	4b04      	ldr	r3, [pc, #16]	; (800719c <__sinit+0x2c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f5      	bne.n	800717c <__sinit+0xc>
 8007190:	f7ff ffc4 	bl	800711c <global_stdio_init.part.0>
 8007194:	e7f2      	b.n	800717c <__sinit+0xc>
 8007196:	bf00      	nop
 8007198:	080070dd 	.word	0x080070dd
 800719c:	20000890 	.word	0x20000890

080071a0 <_fwalk_sglue>:
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a4:	4607      	mov	r7, r0
 80071a6:	4688      	mov	r8, r1
 80071a8:	4614      	mov	r4, r2
 80071aa:	2600      	movs	r6, #0
 80071ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071b0:	f1b9 0901 	subs.w	r9, r9, #1
 80071b4:	d505      	bpl.n	80071c2 <_fwalk_sglue+0x22>
 80071b6:	6824      	ldr	r4, [r4, #0]
 80071b8:	2c00      	cmp	r4, #0
 80071ba:	d1f7      	bne.n	80071ac <_fwalk_sglue+0xc>
 80071bc:	4630      	mov	r0, r6
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d907      	bls.n	80071d8 <_fwalk_sglue+0x38>
 80071c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071cc:	3301      	adds	r3, #1
 80071ce:	d003      	beq.n	80071d8 <_fwalk_sglue+0x38>
 80071d0:	4629      	mov	r1, r5
 80071d2:	4638      	mov	r0, r7
 80071d4:	47c0      	blx	r8
 80071d6:	4306      	orrs	r6, r0
 80071d8:	3568      	adds	r5, #104	; 0x68
 80071da:	e7e9      	b.n	80071b0 <_fwalk_sglue+0x10>

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <_localeconv_r>:
 80071ec:	4800      	ldr	r0, [pc, #0]	; (80071f0 <_localeconv_r+0x4>)
 80071ee:	4770      	bx	lr
 80071f0:	20000160 	.word	0x20000160

080071f4 <__errno>:
 80071f4:	4b01      	ldr	r3, [pc, #4]	; (80071fc <__errno+0x8>)
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	2000006c 	.word	0x2000006c

08007200 <__libc_init_array>:
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	4d0d      	ldr	r5, [pc, #52]	; (8007238 <__libc_init_array+0x38>)
 8007204:	4c0d      	ldr	r4, [pc, #52]	; (800723c <__libc_init_array+0x3c>)
 8007206:	1b64      	subs	r4, r4, r5
 8007208:	10a4      	asrs	r4, r4, #2
 800720a:	2600      	movs	r6, #0
 800720c:	42a6      	cmp	r6, r4
 800720e:	d109      	bne.n	8007224 <__libc_init_array+0x24>
 8007210:	4d0b      	ldr	r5, [pc, #44]	; (8007240 <__libc_init_array+0x40>)
 8007212:	4c0c      	ldr	r4, [pc, #48]	; (8007244 <__libc_init_array+0x44>)
 8007214:	f002 f920 	bl	8009458 <_init>
 8007218:	1b64      	subs	r4, r4, r5
 800721a:	10a4      	asrs	r4, r4, #2
 800721c:	2600      	movs	r6, #0
 800721e:	42a6      	cmp	r6, r4
 8007220:	d105      	bne.n	800722e <__libc_init_array+0x2e>
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	f855 3b04 	ldr.w	r3, [r5], #4
 8007228:	4798      	blx	r3
 800722a:	3601      	adds	r6, #1
 800722c:	e7ee      	b.n	800720c <__libc_init_array+0xc>
 800722e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007232:	4798      	blx	r3
 8007234:	3601      	adds	r6, #1
 8007236:	e7f2      	b.n	800721e <__libc_init_array+0x1e>
 8007238:	0800990c 	.word	0x0800990c
 800723c:	0800990c 	.word	0x0800990c
 8007240:	0800990c 	.word	0x0800990c
 8007244:	08009910 	.word	0x08009910

08007248 <__retarget_lock_init_recursive>:
 8007248:	4770      	bx	lr

0800724a <__retarget_lock_acquire_recursive>:
 800724a:	4770      	bx	lr

0800724c <__retarget_lock_release_recursive>:
 800724c:	4770      	bx	lr

0800724e <memcpy>:
 800724e:	440a      	add	r2, r1
 8007250:	4291      	cmp	r1, r2
 8007252:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007256:	d100      	bne.n	800725a <memcpy+0xc>
 8007258:	4770      	bx	lr
 800725a:	b510      	push	{r4, lr}
 800725c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007260:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007264:	4291      	cmp	r1, r2
 8007266:	d1f9      	bne.n	800725c <memcpy+0xe>
 8007268:	bd10      	pop	{r4, pc}

0800726a <quorem>:
 800726a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726e:	6903      	ldr	r3, [r0, #16]
 8007270:	690c      	ldr	r4, [r1, #16]
 8007272:	42a3      	cmp	r3, r4
 8007274:	4607      	mov	r7, r0
 8007276:	db7e      	blt.n	8007376 <quorem+0x10c>
 8007278:	3c01      	subs	r4, #1
 800727a:	f101 0814 	add.w	r8, r1, #20
 800727e:	f100 0514 	add.w	r5, r0, #20
 8007282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007286:	9301      	str	r3, [sp, #4]
 8007288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800728c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007290:	3301      	adds	r3, #1
 8007292:	429a      	cmp	r2, r3
 8007294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800729c:	fbb2 f6f3 	udiv	r6, r2, r3
 80072a0:	d331      	bcc.n	8007306 <quorem+0x9c>
 80072a2:	f04f 0e00 	mov.w	lr, #0
 80072a6:	4640      	mov	r0, r8
 80072a8:	46ac      	mov	ip, r5
 80072aa:	46f2      	mov	sl, lr
 80072ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80072b0:	b293      	uxth	r3, r2
 80072b2:	fb06 e303 	mla	r3, r6, r3, lr
 80072b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072ba:	0c1a      	lsrs	r2, r3, #16
 80072bc:	b29b      	uxth	r3, r3
 80072be:	ebaa 0303 	sub.w	r3, sl, r3
 80072c2:	f8dc a000 	ldr.w	sl, [ip]
 80072c6:	fa13 f38a 	uxtah	r3, r3, sl
 80072ca:	fb06 220e 	mla	r2, r6, lr, r2
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	9b00      	ldr	r3, [sp, #0]
 80072d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072d6:	b292      	uxth	r2, r2
 80072d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80072dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80072e4:	4581      	cmp	r9, r0
 80072e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ea:	f84c 3b04 	str.w	r3, [ip], #4
 80072ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072f2:	d2db      	bcs.n	80072ac <quorem+0x42>
 80072f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80072f8:	b92b      	cbnz	r3, 8007306 <quorem+0x9c>
 80072fa:	9b01      	ldr	r3, [sp, #4]
 80072fc:	3b04      	subs	r3, #4
 80072fe:	429d      	cmp	r5, r3
 8007300:	461a      	mov	r2, r3
 8007302:	d32c      	bcc.n	800735e <quorem+0xf4>
 8007304:	613c      	str	r4, [r7, #16]
 8007306:	4638      	mov	r0, r7
 8007308:	f001 fb62 	bl	80089d0 <__mcmp>
 800730c:	2800      	cmp	r0, #0
 800730e:	db22      	blt.n	8007356 <quorem+0xec>
 8007310:	3601      	adds	r6, #1
 8007312:	4629      	mov	r1, r5
 8007314:	2000      	movs	r0, #0
 8007316:	f858 2b04 	ldr.w	r2, [r8], #4
 800731a:	f8d1 c000 	ldr.w	ip, [r1]
 800731e:	b293      	uxth	r3, r2
 8007320:	1ac3      	subs	r3, r0, r3
 8007322:	0c12      	lsrs	r2, r2, #16
 8007324:	fa13 f38c 	uxtah	r3, r3, ip
 8007328:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800732c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007330:	b29b      	uxth	r3, r3
 8007332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007336:	45c1      	cmp	r9, r8
 8007338:	f841 3b04 	str.w	r3, [r1], #4
 800733c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007340:	d2e9      	bcs.n	8007316 <quorem+0xac>
 8007342:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800734a:	b922      	cbnz	r2, 8007356 <quorem+0xec>
 800734c:	3b04      	subs	r3, #4
 800734e:	429d      	cmp	r5, r3
 8007350:	461a      	mov	r2, r3
 8007352:	d30a      	bcc.n	800736a <quorem+0x100>
 8007354:	613c      	str	r4, [r7, #16]
 8007356:	4630      	mov	r0, r6
 8007358:	b003      	add	sp, #12
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	6812      	ldr	r2, [r2, #0]
 8007360:	3b04      	subs	r3, #4
 8007362:	2a00      	cmp	r2, #0
 8007364:	d1ce      	bne.n	8007304 <quorem+0x9a>
 8007366:	3c01      	subs	r4, #1
 8007368:	e7c9      	b.n	80072fe <quorem+0x94>
 800736a:	6812      	ldr	r2, [r2, #0]
 800736c:	3b04      	subs	r3, #4
 800736e:	2a00      	cmp	r2, #0
 8007370:	d1f0      	bne.n	8007354 <quorem+0xea>
 8007372:	3c01      	subs	r4, #1
 8007374:	e7eb      	b.n	800734e <quorem+0xe4>
 8007376:	2000      	movs	r0, #0
 8007378:	e7ee      	b.n	8007358 <quorem+0xee>
 800737a:	0000      	movs	r0, r0
 800737c:	0000      	movs	r0, r0
	...

08007380 <_dtoa_r>:
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	ed2d 8b04 	vpush	{d8-d9}
 8007388:	69c5      	ldr	r5, [r0, #28]
 800738a:	b093      	sub	sp, #76	; 0x4c
 800738c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007390:	ec57 6b10 	vmov	r6, r7, d0
 8007394:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007398:	9107      	str	r1, [sp, #28]
 800739a:	4604      	mov	r4, r0
 800739c:	920a      	str	r2, [sp, #40]	; 0x28
 800739e:	930d      	str	r3, [sp, #52]	; 0x34
 80073a0:	b975      	cbnz	r5, 80073c0 <_dtoa_r+0x40>
 80073a2:	2010      	movs	r0, #16
 80073a4:	f000 ff36 	bl	8008214 <malloc>
 80073a8:	4602      	mov	r2, r0
 80073aa:	61e0      	str	r0, [r4, #28]
 80073ac:	b920      	cbnz	r0, 80073b8 <_dtoa_r+0x38>
 80073ae:	4bae      	ldr	r3, [pc, #696]	; (8007668 <_dtoa_r+0x2e8>)
 80073b0:	21ef      	movs	r1, #239	; 0xef
 80073b2:	48ae      	ldr	r0, [pc, #696]	; (800766c <_dtoa_r+0x2ec>)
 80073b4:	f001 fcee 	bl	8008d94 <__assert_func>
 80073b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073bc:	6005      	str	r5, [r0, #0]
 80073be:	60c5      	str	r5, [r0, #12]
 80073c0:	69e3      	ldr	r3, [r4, #28]
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	b151      	cbz	r1, 80073dc <_dtoa_r+0x5c>
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	604a      	str	r2, [r1, #4]
 80073ca:	2301      	movs	r3, #1
 80073cc:	4093      	lsls	r3, r2
 80073ce:	608b      	str	r3, [r1, #8]
 80073d0:	4620      	mov	r0, r4
 80073d2:	f001 f8c1 	bl	8008558 <_Bfree>
 80073d6:	69e3      	ldr	r3, [r4, #28]
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	1e3b      	subs	r3, r7, #0
 80073de:	bfbb      	ittet	lt
 80073e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073e4:	9303      	strlt	r3, [sp, #12]
 80073e6:	2300      	movge	r3, #0
 80073e8:	2201      	movlt	r2, #1
 80073ea:	bfac      	ite	ge
 80073ec:	f8c8 3000 	strge.w	r3, [r8]
 80073f0:	f8c8 2000 	strlt.w	r2, [r8]
 80073f4:	4b9e      	ldr	r3, [pc, #632]	; (8007670 <_dtoa_r+0x2f0>)
 80073f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073fa:	ea33 0308 	bics.w	r3, r3, r8
 80073fe:	d11b      	bne.n	8007438 <_dtoa_r+0xb8>
 8007400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007402:	f242 730f 	movw	r3, #9999	; 0x270f
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800740c:	4333      	orrs	r3, r6
 800740e:	f000 8593 	beq.w	8007f38 <_dtoa_r+0xbb8>
 8007412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007414:	b963      	cbnz	r3, 8007430 <_dtoa_r+0xb0>
 8007416:	4b97      	ldr	r3, [pc, #604]	; (8007674 <_dtoa_r+0x2f4>)
 8007418:	e027      	b.n	800746a <_dtoa_r+0xea>
 800741a:	4b97      	ldr	r3, [pc, #604]	; (8007678 <_dtoa_r+0x2f8>)
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	3308      	adds	r3, #8
 8007420:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	9800      	ldr	r0, [sp, #0]
 8007426:	b013      	add	sp, #76	; 0x4c
 8007428:	ecbd 8b04 	vpop	{d8-d9}
 800742c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007430:	4b90      	ldr	r3, [pc, #576]	; (8007674 <_dtoa_r+0x2f4>)
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	3303      	adds	r3, #3
 8007436:	e7f3      	b.n	8007420 <_dtoa_r+0xa0>
 8007438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800743c:	2200      	movs	r2, #0
 800743e:	ec51 0b17 	vmov	r0, r1, d7
 8007442:	eeb0 8a47 	vmov.f32	s16, s14
 8007446:	eef0 8a67 	vmov.f32	s17, s15
 800744a:	2300      	movs	r3, #0
 800744c:	f7f9 fb14 	bl	8000a78 <__aeabi_dcmpeq>
 8007450:	4681      	mov	r9, r0
 8007452:	b160      	cbz	r0, 800746e <_dtoa_r+0xee>
 8007454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007456:	2301      	movs	r3, #1
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8568 	beq.w	8007f32 <_dtoa_r+0xbb2>
 8007462:	4b86      	ldr	r3, [pc, #536]	; (800767c <_dtoa_r+0x2fc>)
 8007464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	3b01      	subs	r3, #1
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	e7da      	b.n	8007424 <_dtoa_r+0xa4>
 800746e:	aa10      	add	r2, sp, #64	; 0x40
 8007470:	a911      	add	r1, sp, #68	; 0x44
 8007472:	4620      	mov	r0, r4
 8007474:	eeb0 0a48 	vmov.f32	s0, s16
 8007478:	eef0 0a68 	vmov.f32	s1, s17
 800747c:	f001 fb4e 	bl	8008b1c <__d2b>
 8007480:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007484:	4682      	mov	sl, r0
 8007486:	2d00      	cmp	r5, #0
 8007488:	d07f      	beq.n	800758a <_dtoa_r+0x20a>
 800748a:	ee18 3a90 	vmov	r3, s17
 800748e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007492:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007496:	ec51 0b18 	vmov	r0, r1, d8
 800749a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800749e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80074a6:	4619      	mov	r1, r3
 80074a8:	2200      	movs	r2, #0
 80074aa:	4b75      	ldr	r3, [pc, #468]	; (8007680 <_dtoa_r+0x300>)
 80074ac:	f7f8 fec4 	bl	8000238 <__aeabi_dsub>
 80074b0:	a367      	add	r3, pc, #412	; (adr r3, 8007650 <_dtoa_r+0x2d0>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f7f9 f877 	bl	80005a8 <__aeabi_dmul>
 80074ba:	a367      	add	r3, pc, #412	; (adr r3, 8007658 <_dtoa_r+0x2d8>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f8 febc 	bl	800023c <__adddf3>
 80074c4:	4606      	mov	r6, r0
 80074c6:	4628      	mov	r0, r5
 80074c8:	460f      	mov	r7, r1
 80074ca:	f7f9 f803 	bl	80004d4 <__aeabi_i2d>
 80074ce:	a364      	add	r3, pc, #400	; (adr r3, 8007660 <_dtoa_r+0x2e0>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f7f9 f868 	bl	80005a8 <__aeabi_dmul>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f8 feac 	bl	800023c <__adddf3>
 80074e4:	4606      	mov	r6, r0
 80074e6:	460f      	mov	r7, r1
 80074e8:	f7f9 fb0e 	bl	8000b08 <__aeabi_d2iz>
 80074ec:	2200      	movs	r2, #0
 80074ee:	4683      	mov	fp, r0
 80074f0:	2300      	movs	r3, #0
 80074f2:	4630      	mov	r0, r6
 80074f4:	4639      	mov	r1, r7
 80074f6:	f7f9 fac9 	bl	8000a8c <__aeabi_dcmplt>
 80074fa:	b148      	cbz	r0, 8007510 <_dtoa_r+0x190>
 80074fc:	4658      	mov	r0, fp
 80074fe:	f7f8 ffe9 	bl	80004d4 <__aeabi_i2d>
 8007502:	4632      	mov	r2, r6
 8007504:	463b      	mov	r3, r7
 8007506:	f7f9 fab7 	bl	8000a78 <__aeabi_dcmpeq>
 800750a:	b908      	cbnz	r0, 8007510 <_dtoa_r+0x190>
 800750c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007510:	f1bb 0f16 	cmp.w	fp, #22
 8007514:	d857      	bhi.n	80075c6 <_dtoa_r+0x246>
 8007516:	4b5b      	ldr	r3, [pc, #364]	; (8007684 <_dtoa_r+0x304>)
 8007518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	ec51 0b18 	vmov	r0, r1, d8
 8007524:	f7f9 fab2 	bl	8000a8c <__aeabi_dcmplt>
 8007528:	2800      	cmp	r0, #0
 800752a:	d04e      	beq.n	80075ca <_dtoa_r+0x24a>
 800752c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007530:	2300      	movs	r3, #0
 8007532:	930c      	str	r3, [sp, #48]	; 0x30
 8007534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007536:	1b5b      	subs	r3, r3, r5
 8007538:	1e5a      	subs	r2, r3, #1
 800753a:	bf45      	ittet	mi
 800753c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007540:	9305      	strmi	r3, [sp, #20]
 8007542:	2300      	movpl	r3, #0
 8007544:	2300      	movmi	r3, #0
 8007546:	9206      	str	r2, [sp, #24]
 8007548:	bf54      	ite	pl
 800754a:	9305      	strpl	r3, [sp, #20]
 800754c:	9306      	strmi	r3, [sp, #24]
 800754e:	f1bb 0f00 	cmp.w	fp, #0
 8007552:	db3c      	blt.n	80075ce <_dtoa_r+0x24e>
 8007554:	9b06      	ldr	r3, [sp, #24]
 8007556:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800755a:	445b      	add	r3, fp
 800755c:	9306      	str	r3, [sp, #24]
 800755e:	2300      	movs	r3, #0
 8007560:	9308      	str	r3, [sp, #32]
 8007562:	9b07      	ldr	r3, [sp, #28]
 8007564:	2b09      	cmp	r3, #9
 8007566:	d868      	bhi.n	800763a <_dtoa_r+0x2ba>
 8007568:	2b05      	cmp	r3, #5
 800756a:	bfc4      	itt	gt
 800756c:	3b04      	subgt	r3, #4
 800756e:	9307      	strgt	r3, [sp, #28]
 8007570:	9b07      	ldr	r3, [sp, #28]
 8007572:	f1a3 0302 	sub.w	r3, r3, #2
 8007576:	bfcc      	ite	gt
 8007578:	2500      	movgt	r5, #0
 800757a:	2501      	movle	r5, #1
 800757c:	2b03      	cmp	r3, #3
 800757e:	f200 8085 	bhi.w	800768c <_dtoa_r+0x30c>
 8007582:	e8df f003 	tbb	[pc, r3]
 8007586:	3b2e      	.short	0x3b2e
 8007588:	5839      	.short	0x5839
 800758a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800758e:	441d      	add	r5, r3
 8007590:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007594:	2b20      	cmp	r3, #32
 8007596:	bfc1      	itttt	gt
 8007598:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800759c:	fa08 f803 	lslgt.w	r8, r8, r3
 80075a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80075a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80075a8:	bfd6      	itet	le
 80075aa:	f1c3 0320 	rsble	r3, r3, #32
 80075ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80075b2:	fa06 f003 	lslle.w	r0, r6, r3
 80075b6:	f7f8 ff7d 	bl	80004b4 <__aeabi_ui2d>
 80075ba:	2201      	movs	r2, #1
 80075bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80075c0:	3d01      	subs	r5, #1
 80075c2:	920e      	str	r2, [sp, #56]	; 0x38
 80075c4:	e76f      	b.n	80074a6 <_dtoa_r+0x126>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e7b3      	b.n	8007532 <_dtoa_r+0x1b2>
 80075ca:	900c      	str	r0, [sp, #48]	; 0x30
 80075cc:	e7b2      	b.n	8007534 <_dtoa_r+0x1b4>
 80075ce:	9b05      	ldr	r3, [sp, #20]
 80075d0:	eba3 030b 	sub.w	r3, r3, fp
 80075d4:	9305      	str	r3, [sp, #20]
 80075d6:	f1cb 0300 	rsb	r3, fp, #0
 80075da:	9308      	str	r3, [sp, #32]
 80075dc:	2300      	movs	r3, #0
 80075de:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e0:	e7bf      	b.n	8007562 <_dtoa_r+0x1e2>
 80075e2:	2300      	movs	r3, #0
 80075e4:	9309      	str	r3, [sp, #36]	; 0x24
 80075e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dc52      	bgt.n	8007692 <_dtoa_r+0x312>
 80075ec:	2301      	movs	r3, #1
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	461a      	mov	r2, r3
 80075f4:	920a      	str	r2, [sp, #40]	; 0x28
 80075f6:	e00b      	b.n	8007610 <_dtoa_r+0x290>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e7f3      	b.n	80075e4 <_dtoa_r+0x264>
 80075fc:	2300      	movs	r3, #0
 80075fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007602:	445b      	add	r3, fp
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	3301      	adds	r3, #1
 8007608:	2b01      	cmp	r3, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	bfb8      	it	lt
 800760e:	2301      	movlt	r3, #1
 8007610:	69e0      	ldr	r0, [r4, #28]
 8007612:	2100      	movs	r1, #0
 8007614:	2204      	movs	r2, #4
 8007616:	f102 0614 	add.w	r6, r2, #20
 800761a:	429e      	cmp	r6, r3
 800761c:	d93d      	bls.n	800769a <_dtoa_r+0x31a>
 800761e:	6041      	str	r1, [r0, #4]
 8007620:	4620      	mov	r0, r4
 8007622:	f000 ff59 	bl	80084d8 <_Balloc>
 8007626:	9000      	str	r0, [sp, #0]
 8007628:	2800      	cmp	r0, #0
 800762a:	d139      	bne.n	80076a0 <_dtoa_r+0x320>
 800762c:	4b16      	ldr	r3, [pc, #88]	; (8007688 <_dtoa_r+0x308>)
 800762e:	4602      	mov	r2, r0
 8007630:	f240 11af 	movw	r1, #431	; 0x1af
 8007634:	e6bd      	b.n	80073b2 <_dtoa_r+0x32>
 8007636:	2301      	movs	r3, #1
 8007638:	e7e1      	b.n	80075fe <_dtoa_r+0x27e>
 800763a:	2501      	movs	r5, #1
 800763c:	2300      	movs	r3, #0
 800763e:	9307      	str	r3, [sp, #28]
 8007640:	9509      	str	r5, [sp, #36]	; 0x24
 8007642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007646:	9301      	str	r3, [sp, #4]
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	2200      	movs	r2, #0
 800764c:	2312      	movs	r3, #18
 800764e:	e7d1      	b.n	80075f4 <_dtoa_r+0x274>
 8007650:	636f4361 	.word	0x636f4361
 8007654:	3fd287a7 	.word	0x3fd287a7
 8007658:	8b60c8b3 	.word	0x8b60c8b3
 800765c:	3fc68a28 	.word	0x3fc68a28
 8007660:	509f79fb 	.word	0x509f79fb
 8007664:	3fd34413 	.word	0x3fd34413
 8007668:	080095d5 	.word	0x080095d5
 800766c:	080095ec 	.word	0x080095ec
 8007670:	7ff00000 	.word	0x7ff00000
 8007674:	080095d1 	.word	0x080095d1
 8007678:	080095c8 	.word	0x080095c8
 800767c:	080095a5 	.word	0x080095a5
 8007680:	3ff80000 	.word	0x3ff80000
 8007684:	080096e8 	.word	0x080096e8
 8007688:	08009644 	.word	0x08009644
 800768c:	2301      	movs	r3, #1
 800768e:	9309      	str	r3, [sp, #36]	; 0x24
 8007690:	e7d7      	b.n	8007642 <_dtoa_r+0x2c2>
 8007692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007694:	9301      	str	r3, [sp, #4]
 8007696:	9304      	str	r3, [sp, #16]
 8007698:	e7ba      	b.n	8007610 <_dtoa_r+0x290>
 800769a:	3101      	adds	r1, #1
 800769c:	0052      	lsls	r2, r2, #1
 800769e:	e7ba      	b.n	8007616 <_dtoa_r+0x296>
 80076a0:	69e3      	ldr	r3, [r4, #28]
 80076a2:	9a00      	ldr	r2, [sp, #0]
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	9b04      	ldr	r3, [sp, #16]
 80076a8:	2b0e      	cmp	r3, #14
 80076aa:	f200 80a8 	bhi.w	80077fe <_dtoa_r+0x47e>
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	f000 80a5 	beq.w	80077fe <_dtoa_r+0x47e>
 80076b4:	f1bb 0f00 	cmp.w	fp, #0
 80076b8:	dd38      	ble.n	800772c <_dtoa_r+0x3ac>
 80076ba:	4bc0      	ldr	r3, [pc, #768]	; (80079bc <_dtoa_r+0x63c>)
 80076bc:	f00b 020f 	and.w	r2, fp, #15
 80076c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80076c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80076cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80076d0:	d019      	beq.n	8007706 <_dtoa_r+0x386>
 80076d2:	4bbb      	ldr	r3, [pc, #748]	; (80079c0 <_dtoa_r+0x640>)
 80076d4:	ec51 0b18 	vmov	r0, r1, d8
 80076d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076dc:	f7f9 f88e 	bl	80007fc <__aeabi_ddiv>
 80076e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076e4:	f008 080f 	and.w	r8, r8, #15
 80076e8:	2503      	movs	r5, #3
 80076ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80079c0 <_dtoa_r+0x640>
 80076ee:	f1b8 0f00 	cmp.w	r8, #0
 80076f2:	d10a      	bne.n	800770a <_dtoa_r+0x38a>
 80076f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f8:	4632      	mov	r2, r6
 80076fa:	463b      	mov	r3, r7
 80076fc:	f7f9 f87e 	bl	80007fc <__aeabi_ddiv>
 8007700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007704:	e02b      	b.n	800775e <_dtoa_r+0x3de>
 8007706:	2502      	movs	r5, #2
 8007708:	e7ef      	b.n	80076ea <_dtoa_r+0x36a>
 800770a:	f018 0f01 	tst.w	r8, #1
 800770e:	d008      	beq.n	8007722 <_dtoa_r+0x3a2>
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007718:	f7f8 ff46 	bl	80005a8 <__aeabi_dmul>
 800771c:	3501      	adds	r5, #1
 800771e:	4606      	mov	r6, r0
 8007720:	460f      	mov	r7, r1
 8007722:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007726:	f109 0908 	add.w	r9, r9, #8
 800772a:	e7e0      	b.n	80076ee <_dtoa_r+0x36e>
 800772c:	f000 809f 	beq.w	800786e <_dtoa_r+0x4ee>
 8007730:	f1cb 0600 	rsb	r6, fp, #0
 8007734:	4ba1      	ldr	r3, [pc, #644]	; (80079bc <_dtoa_r+0x63c>)
 8007736:	4fa2      	ldr	r7, [pc, #648]	; (80079c0 <_dtoa_r+0x640>)
 8007738:	f006 020f 	and.w	r2, r6, #15
 800773c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	ec51 0b18 	vmov	r0, r1, d8
 8007748:	f7f8 ff2e 	bl	80005a8 <__aeabi_dmul>
 800774c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007750:	1136      	asrs	r6, r6, #4
 8007752:	2300      	movs	r3, #0
 8007754:	2502      	movs	r5, #2
 8007756:	2e00      	cmp	r6, #0
 8007758:	d17e      	bne.n	8007858 <_dtoa_r+0x4d8>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1d0      	bne.n	8007700 <_dtoa_r+0x380>
 800775e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007760:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 8084 	beq.w	8007872 <_dtoa_r+0x4f2>
 800776a:	4b96      	ldr	r3, [pc, #600]	; (80079c4 <_dtoa_r+0x644>)
 800776c:	2200      	movs	r2, #0
 800776e:	4640      	mov	r0, r8
 8007770:	4649      	mov	r1, r9
 8007772:	f7f9 f98b 	bl	8000a8c <__aeabi_dcmplt>
 8007776:	2800      	cmp	r0, #0
 8007778:	d07b      	beq.n	8007872 <_dtoa_r+0x4f2>
 800777a:	9b04      	ldr	r3, [sp, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d078      	beq.n	8007872 <_dtoa_r+0x4f2>
 8007780:	9b01      	ldr	r3, [sp, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	dd39      	ble.n	80077fa <_dtoa_r+0x47a>
 8007786:	4b90      	ldr	r3, [pc, #576]	; (80079c8 <_dtoa_r+0x648>)
 8007788:	2200      	movs	r2, #0
 800778a:	4640      	mov	r0, r8
 800778c:	4649      	mov	r1, r9
 800778e:	f7f8 ff0b 	bl	80005a8 <__aeabi_dmul>
 8007792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007796:	9e01      	ldr	r6, [sp, #4]
 8007798:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800779c:	3501      	adds	r5, #1
 800779e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80077a2:	4628      	mov	r0, r5
 80077a4:	f7f8 fe96 	bl	80004d4 <__aeabi_i2d>
 80077a8:	4642      	mov	r2, r8
 80077aa:	464b      	mov	r3, r9
 80077ac:	f7f8 fefc 	bl	80005a8 <__aeabi_dmul>
 80077b0:	4b86      	ldr	r3, [pc, #536]	; (80079cc <_dtoa_r+0x64c>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	f7f8 fd42 	bl	800023c <__adddf3>
 80077b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80077bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	2e00      	cmp	r6, #0
 80077c4:	d158      	bne.n	8007878 <_dtoa_r+0x4f8>
 80077c6:	4b82      	ldr	r3, [pc, #520]	; (80079d0 <_dtoa_r+0x650>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	4640      	mov	r0, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	f7f8 fd33 	bl	8000238 <__aeabi_dsub>
 80077d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077d6:	4680      	mov	r8, r0
 80077d8:	4689      	mov	r9, r1
 80077da:	f7f9 f975 	bl	8000ac8 <__aeabi_dcmpgt>
 80077de:	2800      	cmp	r0, #0
 80077e0:	f040 8296 	bne.w	8007d10 <_dtoa_r+0x990>
 80077e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80077e8:	4640      	mov	r0, r8
 80077ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f9 f94c 	bl	8000a8c <__aeabi_dcmplt>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f040 8289 	bne.w	8007d0c <_dtoa_r+0x98c>
 80077fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80077fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007800:	2b00      	cmp	r3, #0
 8007802:	f2c0 814e 	blt.w	8007aa2 <_dtoa_r+0x722>
 8007806:	f1bb 0f0e 	cmp.w	fp, #14
 800780a:	f300 814a 	bgt.w	8007aa2 <_dtoa_r+0x722>
 800780e:	4b6b      	ldr	r3, [pc, #428]	; (80079bc <_dtoa_r+0x63c>)
 8007810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781a:	2b00      	cmp	r3, #0
 800781c:	f280 80dc 	bge.w	80079d8 <_dtoa_r+0x658>
 8007820:	9b04      	ldr	r3, [sp, #16]
 8007822:	2b00      	cmp	r3, #0
 8007824:	f300 80d8 	bgt.w	80079d8 <_dtoa_r+0x658>
 8007828:	f040 826f 	bne.w	8007d0a <_dtoa_r+0x98a>
 800782c:	4b68      	ldr	r3, [pc, #416]	; (80079d0 <_dtoa_r+0x650>)
 800782e:	2200      	movs	r2, #0
 8007830:	4640      	mov	r0, r8
 8007832:	4649      	mov	r1, r9
 8007834:	f7f8 feb8 	bl	80005a8 <__aeabi_dmul>
 8007838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800783c:	f7f9 f93a 	bl	8000ab4 <__aeabi_dcmpge>
 8007840:	9e04      	ldr	r6, [sp, #16]
 8007842:	4637      	mov	r7, r6
 8007844:	2800      	cmp	r0, #0
 8007846:	f040 8245 	bne.w	8007cd4 <_dtoa_r+0x954>
 800784a:	9d00      	ldr	r5, [sp, #0]
 800784c:	2331      	movs	r3, #49	; 0x31
 800784e:	f805 3b01 	strb.w	r3, [r5], #1
 8007852:	f10b 0b01 	add.w	fp, fp, #1
 8007856:	e241      	b.n	8007cdc <_dtoa_r+0x95c>
 8007858:	07f2      	lsls	r2, r6, #31
 800785a:	d505      	bpl.n	8007868 <_dtoa_r+0x4e8>
 800785c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007860:	f7f8 fea2 	bl	80005a8 <__aeabi_dmul>
 8007864:	3501      	adds	r5, #1
 8007866:	2301      	movs	r3, #1
 8007868:	1076      	asrs	r6, r6, #1
 800786a:	3708      	adds	r7, #8
 800786c:	e773      	b.n	8007756 <_dtoa_r+0x3d6>
 800786e:	2502      	movs	r5, #2
 8007870:	e775      	b.n	800775e <_dtoa_r+0x3de>
 8007872:	9e04      	ldr	r6, [sp, #16]
 8007874:	465f      	mov	r7, fp
 8007876:	e792      	b.n	800779e <_dtoa_r+0x41e>
 8007878:	9900      	ldr	r1, [sp, #0]
 800787a:	4b50      	ldr	r3, [pc, #320]	; (80079bc <_dtoa_r+0x63c>)
 800787c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007880:	4431      	add	r1, r6
 8007882:	9102      	str	r1, [sp, #8]
 8007884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007886:	eeb0 9a47 	vmov.f32	s18, s14
 800788a:	eef0 9a67 	vmov.f32	s19, s15
 800788e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007896:	2900      	cmp	r1, #0
 8007898:	d044      	beq.n	8007924 <_dtoa_r+0x5a4>
 800789a:	494e      	ldr	r1, [pc, #312]	; (80079d4 <_dtoa_r+0x654>)
 800789c:	2000      	movs	r0, #0
 800789e:	f7f8 ffad 	bl	80007fc <__aeabi_ddiv>
 80078a2:	ec53 2b19 	vmov	r2, r3, d9
 80078a6:	f7f8 fcc7 	bl	8000238 <__aeabi_dsub>
 80078aa:	9d00      	ldr	r5, [sp, #0]
 80078ac:	ec41 0b19 	vmov	d9, r0, r1
 80078b0:	4649      	mov	r1, r9
 80078b2:	4640      	mov	r0, r8
 80078b4:	f7f9 f928 	bl	8000b08 <__aeabi_d2iz>
 80078b8:	4606      	mov	r6, r0
 80078ba:	f7f8 fe0b 	bl	80004d4 <__aeabi_i2d>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f7f8 fcb7 	bl	8000238 <__aeabi_dsub>
 80078ca:	3630      	adds	r6, #48	; 0x30
 80078cc:	f805 6b01 	strb.w	r6, [r5], #1
 80078d0:	ec53 2b19 	vmov	r2, r3, d9
 80078d4:	4680      	mov	r8, r0
 80078d6:	4689      	mov	r9, r1
 80078d8:	f7f9 f8d8 	bl	8000a8c <__aeabi_dcmplt>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d164      	bne.n	80079aa <_dtoa_r+0x62a>
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	4937      	ldr	r1, [pc, #220]	; (80079c4 <_dtoa_r+0x644>)
 80078e6:	2000      	movs	r0, #0
 80078e8:	f7f8 fca6 	bl	8000238 <__aeabi_dsub>
 80078ec:	ec53 2b19 	vmov	r2, r3, d9
 80078f0:	f7f9 f8cc 	bl	8000a8c <__aeabi_dcmplt>
 80078f4:	2800      	cmp	r0, #0
 80078f6:	f040 80b6 	bne.w	8007a66 <_dtoa_r+0x6e6>
 80078fa:	9b02      	ldr	r3, [sp, #8]
 80078fc:	429d      	cmp	r5, r3
 80078fe:	f43f af7c 	beq.w	80077fa <_dtoa_r+0x47a>
 8007902:	4b31      	ldr	r3, [pc, #196]	; (80079c8 <_dtoa_r+0x648>)
 8007904:	ec51 0b19 	vmov	r0, r1, d9
 8007908:	2200      	movs	r2, #0
 800790a:	f7f8 fe4d 	bl	80005a8 <__aeabi_dmul>
 800790e:	4b2e      	ldr	r3, [pc, #184]	; (80079c8 <_dtoa_r+0x648>)
 8007910:	ec41 0b19 	vmov	d9, r0, r1
 8007914:	2200      	movs	r2, #0
 8007916:	4640      	mov	r0, r8
 8007918:	4649      	mov	r1, r9
 800791a:	f7f8 fe45 	bl	80005a8 <__aeabi_dmul>
 800791e:	4680      	mov	r8, r0
 8007920:	4689      	mov	r9, r1
 8007922:	e7c5      	b.n	80078b0 <_dtoa_r+0x530>
 8007924:	ec51 0b17 	vmov	r0, r1, d7
 8007928:	f7f8 fe3e 	bl	80005a8 <__aeabi_dmul>
 800792c:	9b02      	ldr	r3, [sp, #8]
 800792e:	9d00      	ldr	r5, [sp, #0]
 8007930:	930f      	str	r3, [sp, #60]	; 0x3c
 8007932:	ec41 0b19 	vmov	d9, r0, r1
 8007936:	4649      	mov	r1, r9
 8007938:	4640      	mov	r0, r8
 800793a:	f7f9 f8e5 	bl	8000b08 <__aeabi_d2iz>
 800793e:	4606      	mov	r6, r0
 8007940:	f7f8 fdc8 	bl	80004d4 <__aeabi_i2d>
 8007944:	3630      	adds	r6, #48	; 0x30
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4640      	mov	r0, r8
 800794c:	4649      	mov	r1, r9
 800794e:	f7f8 fc73 	bl	8000238 <__aeabi_dsub>
 8007952:	f805 6b01 	strb.w	r6, [r5], #1
 8007956:	9b02      	ldr	r3, [sp, #8]
 8007958:	429d      	cmp	r5, r3
 800795a:	4680      	mov	r8, r0
 800795c:	4689      	mov	r9, r1
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	d124      	bne.n	80079ae <_dtoa_r+0x62e>
 8007964:	4b1b      	ldr	r3, [pc, #108]	; (80079d4 <_dtoa_r+0x654>)
 8007966:	ec51 0b19 	vmov	r0, r1, d9
 800796a:	f7f8 fc67 	bl	800023c <__adddf3>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	f7f9 f8a7 	bl	8000ac8 <__aeabi_dcmpgt>
 800797a:	2800      	cmp	r0, #0
 800797c:	d173      	bne.n	8007a66 <_dtoa_r+0x6e6>
 800797e:	ec53 2b19 	vmov	r2, r3, d9
 8007982:	4914      	ldr	r1, [pc, #80]	; (80079d4 <_dtoa_r+0x654>)
 8007984:	2000      	movs	r0, #0
 8007986:	f7f8 fc57 	bl	8000238 <__aeabi_dsub>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4640      	mov	r0, r8
 8007990:	4649      	mov	r1, r9
 8007992:	f7f9 f87b 	bl	8000a8c <__aeabi_dcmplt>
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f af2f 	beq.w	80077fa <_dtoa_r+0x47a>
 800799c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800799e:	1e6b      	subs	r3, r5, #1
 80079a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079a6:	2b30      	cmp	r3, #48	; 0x30
 80079a8:	d0f8      	beq.n	800799c <_dtoa_r+0x61c>
 80079aa:	46bb      	mov	fp, r7
 80079ac:	e04a      	b.n	8007a44 <_dtoa_r+0x6c4>
 80079ae:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <_dtoa_r+0x648>)
 80079b0:	f7f8 fdfa 	bl	80005a8 <__aeabi_dmul>
 80079b4:	4680      	mov	r8, r0
 80079b6:	4689      	mov	r9, r1
 80079b8:	e7bd      	b.n	8007936 <_dtoa_r+0x5b6>
 80079ba:	bf00      	nop
 80079bc:	080096e8 	.word	0x080096e8
 80079c0:	080096c0 	.word	0x080096c0
 80079c4:	3ff00000 	.word	0x3ff00000
 80079c8:	40240000 	.word	0x40240000
 80079cc:	401c0000 	.word	0x401c0000
 80079d0:	40140000 	.word	0x40140000
 80079d4:	3fe00000 	.word	0x3fe00000
 80079d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079dc:	9d00      	ldr	r5, [sp, #0]
 80079de:	4642      	mov	r2, r8
 80079e0:	464b      	mov	r3, r9
 80079e2:	4630      	mov	r0, r6
 80079e4:	4639      	mov	r1, r7
 80079e6:	f7f8 ff09 	bl	80007fc <__aeabi_ddiv>
 80079ea:	f7f9 f88d 	bl	8000b08 <__aeabi_d2iz>
 80079ee:	9001      	str	r0, [sp, #4]
 80079f0:	f7f8 fd70 	bl	80004d4 <__aeabi_i2d>
 80079f4:	4642      	mov	r2, r8
 80079f6:	464b      	mov	r3, r9
 80079f8:	f7f8 fdd6 	bl	80005a8 <__aeabi_dmul>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4630      	mov	r0, r6
 8007a02:	4639      	mov	r1, r7
 8007a04:	f7f8 fc18 	bl	8000238 <__aeabi_dsub>
 8007a08:	9e01      	ldr	r6, [sp, #4]
 8007a0a:	9f04      	ldr	r7, [sp, #16]
 8007a0c:	3630      	adds	r6, #48	; 0x30
 8007a0e:	f805 6b01 	strb.w	r6, [r5], #1
 8007a12:	9e00      	ldr	r6, [sp, #0]
 8007a14:	1bae      	subs	r6, r5, r6
 8007a16:	42b7      	cmp	r7, r6
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	d134      	bne.n	8007a88 <_dtoa_r+0x708>
 8007a1e:	f7f8 fc0d 	bl	800023c <__adddf3>
 8007a22:	4642      	mov	r2, r8
 8007a24:	464b      	mov	r3, r9
 8007a26:	4606      	mov	r6, r0
 8007a28:	460f      	mov	r7, r1
 8007a2a:	f7f9 f84d 	bl	8000ac8 <__aeabi_dcmpgt>
 8007a2e:	b9c8      	cbnz	r0, 8007a64 <_dtoa_r+0x6e4>
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	4630      	mov	r0, r6
 8007a36:	4639      	mov	r1, r7
 8007a38:	f7f9 f81e 	bl	8000a78 <__aeabi_dcmpeq>
 8007a3c:	b110      	cbz	r0, 8007a44 <_dtoa_r+0x6c4>
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	07db      	lsls	r3, r3, #31
 8007a42:	d40f      	bmi.n	8007a64 <_dtoa_r+0x6e4>
 8007a44:	4651      	mov	r1, sl
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 fd86 	bl	8008558 <_Bfree>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a50:	702b      	strb	r3, [r5, #0]
 8007a52:	f10b 0301 	add.w	r3, fp, #1
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f43f ace2 	beq.w	8007424 <_dtoa_r+0xa4>
 8007a60:	601d      	str	r5, [r3, #0]
 8007a62:	e4df      	b.n	8007424 <_dtoa_r+0xa4>
 8007a64:	465f      	mov	r7, fp
 8007a66:	462b      	mov	r3, r5
 8007a68:	461d      	mov	r5, r3
 8007a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a6e:	2a39      	cmp	r2, #57	; 0x39
 8007a70:	d106      	bne.n	8007a80 <_dtoa_r+0x700>
 8007a72:	9a00      	ldr	r2, [sp, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d1f7      	bne.n	8007a68 <_dtoa_r+0x6e8>
 8007a78:	9900      	ldr	r1, [sp, #0]
 8007a7a:	2230      	movs	r2, #48	; 0x30
 8007a7c:	3701      	adds	r7, #1
 8007a7e:	700a      	strb	r2, [r1, #0]
 8007a80:	781a      	ldrb	r2, [r3, #0]
 8007a82:	3201      	adds	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	e790      	b.n	80079aa <_dtoa_r+0x62a>
 8007a88:	4ba3      	ldr	r3, [pc, #652]	; (8007d18 <_dtoa_r+0x998>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f7f8 fd8c 	bl	80005a8 <__aeabi_dmul>
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4606      	mov	r6, r0
 8007a96:	460f      	mov	r7, r1
 8007a98:	f7f8 ffee 	bl	8000a78 <__aeabi_dcmpeq>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d09e      	beq.n	80079de <_dtoa_r+0x65e>
 8007aa0:	e7d0      	b.n	8007a44 <_dtoa_r+0x6c4>
 8007aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	f000 80ca 	beq.w	8007c3e <_dtoa_r+0x8be>
 8007aaa:	9a07      	ldr	r2, [sp, #28]
 8007aac:	2a01      	cmp	r2, #1
 8007aae:	f300 80ad 	bgt.w	8007c0c <_dtoa_r+0x88c>
 8007ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ab4:	2a00      	cmp	r2, #0
 8007ab6:	f000 80a5 	beq.w	8007c04 <_dtoa_r+0x884>
 8007aba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007abe:	9e08      	ldr	r6, [sp, #32]
 8007ac0:	9d05      	ldr	r5, [sp, #20]
 8007ac2:	9a05      	ldr	r2, [sp, #20]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	9205      	str	r2, [sp, #20]
 8007ac8:	9a06      	ldr	r2, [sp, #24]
 8007aca:	2101      	movs	r1, #1
 8007acc:	441a      	add	r2, r3
 8007ace:	4620      	mov	r0, r4
 8007ad0:	9206      	str	r2, [sp, #24]
 8007ad2:	f000 fdf7 	bl	80086c4 <__i2b>
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	b165      	cbz	r5, 8007af4 <_dtoa_r+0x774>
 8007ada:	9b06      	ldr	r3, [sp, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dd09      	ble.n	8007af4 <_dtoa_r+0x774>
 8007ae0:	42ab      	cmp	r3, r5
 8007ae2:	9a05      	ldr	r2, [sp, #20]
 8007ae4:	bfa8      	it	ge
 8007ae6:	462b      	movge	r3, r5
 8007ae8:	1ad2      	subs	r2, r2, r3
 8007aea:	9205      	str	r2, [sp, #20]
 8007aec:	9a06      	ldr	r2, [sp, #24]
 8007aee:	1aed      	subs	r5, r5, r3
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	9306      	str	r3, [sp, #24]
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	b1f3      	cbz	r3, 8007b36 <_dtoa_r+0x7b6>
 8007af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 80a3 	beq.w	8007c46 <_dtoa_r+0x8c6>
 8007b00:	2e00      	cmp	r6, #0
 8007b02:	dd10      	ble.n	8007b26 <_dtoa_r+0x7a6>
 8007b04:	4639      	mov	r1, r7
 8007b06:	4632      	mov	r2, r6
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fe9b 	bl	8008844 <__pow5mult>
 8007b0e:	4652      	mov	r2, sl
 8007b10:	4601      	mov	r1, r0
 8007b12:	4607      	mov	r7, r0
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 fdeb 	bl	80086f0 <__multiply>
 8007b1a:	4651      	mov	r1, sl
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 fd1a 	bl	8008558 <_Bfree>
 8007b24:	46c2      	mov	sl, r8
 8007b26:	9b08      	ldr	r3, [sp, #32]
 8007b28:	1b9a      	subs	r2, r3, r6
 8007b2a:	d004      	beq.n	8007b36 <_dtoa_r+0x7b6>
 8007b2c:	4651      	mov	r1, sl
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 fe88 	bl	8008844 <__pow5mult>
 8007b34:	4682      	mov	sl, r0
 8007b36:	2101      	movs	r1, #1
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fdc3 	bl	80086c4 <__i2b>
 8007b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	4606      	mov	r6, r0
 8007b44:	f340 8081 	ble.w	8007c4a <_dtoa_r+0x8ca>
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f000 fe79 	bl	8008844 <__pow5mult>
 8007b52:	9b07      	ldr	r3, [sp, #28]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	4606      	mov	r6, r0
 8007b58:	dd7a      	ble.n	8007c50 <_dtoa_r+0x8d0>
 8007b5a:	f04f 0800 	mov.w	r8, #0
 8007b5e:	6933      	ldr	r3, [r6, #16]
 8007b60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b64:	6918      	ldr	r0, [r3, #16]
 8007b66:	f000 fd5f 	bl	8008628 <__hi0bits>
 8007b6a:	f1c0 0020 	rsb	r0, r0, #32
 8007b6e:	9b06      	ldr	r3, [sp, #24]
 8007b70:	4418      	add	r0, r3
 8007b72:	f010 001f 	ands.w	r0, r0, #31
 8007b76:	f000 8094 	beq.w	8007ca2 <_dtoa_r+0x922>
 8007b7a:	f1c0 0320 	rsb	r3, r0, #32
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	f340 8085 	ble.w	8007c8e <_dtoa_r+0x90e>
 8007b84:	9b05      	ldr	r3, [sp, #20]
 8007b86:	f1c0 001c 	rsb	r0, r0, #28
 8007b8a:	4403      	add	r3, r0
 8007b8c:	9305      	str	r3, [sp, #20]
 8007b8e:	9b06      	ldr	r3, [sp, #24]
 8007b90:	4403      	add	r3, r0
 8007b92:	4405      	add	r5, r0
 8007b94:	9306      	str	r3, [sp, #24]
 8007b96:	9b05      	ldr	r3, [sp, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dd05      	ble.n	8007ba8 <_dtoa_r+0x828>
 8007b9c:	4651      	mov	r1, sl
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 fea9 	bl	80088f8 <__lshift>
 8007ba6:	4682      	mov	sl, r0
 8007ba8:	9b06      	ldr	r3, [sp, #24]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dd05      	ble.n	8007bba <_dtoa_r+0x83a>
 8007bae:	4631      	mov	r1, r6
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 fea0 	bl	80088f8 <__lshift>
 8007bb8:	4606      	mov	r6, r0
 8007bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d072      	beq.n	8007ca6 <_dtoa_r+0x926>
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	f000 ff04 	bl	80089d0 <__mcmp>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	da6c      	bge.n	8007ca6 <_dtoa_r+0x926>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4651      	mov	r1, sl
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fce2 	bl	800859c <__multadd>
 8007bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007bde:	4682      	mov	sl, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 81b0 	beq.w	8007f46 <_dtoa_r+0xbc6>
 8007be6:	2300      	movs	r3, #0
 8007be8:	4639      	mov	r1, r7
 8007bea:	220a      	movs	r2, #10
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 fcd5 	bl	800859c <__multadd>
 8007bf2:	9b01      	ldr	r3, [sp, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	4607      	mov	r7, r0
 8007bf8:	f300 8096 	bgt.w	8007d28 <_dtoa_r+0x9a8>
 8007bfc:	9b07      	ldr	r3, [sp, #28]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	dc59      	bgt.n	8007cb6 <_dtoa_r+0x936>
 8007c02:	e091      	b.n	8007d28 <_dtoa_r+0x9a8>
 8007c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c0a:	e758      	b.n	8007abe <_dtoa_r+0x73e>
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	1e5e      	subs	r6, r3, #1
 8007c10:	9b08      	ldr	r3, [sp, #32]
 8007c12:	42b3      	cmp	r3, r6
 8007c14:	bfbf      	itttt	lt
 8007c16:	9b08      	ldrlt	r3, [sp, #32]
 8007c18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007c1a:	9608      	strlt	r6, [sp, #32]
 8007c1c:	1af3      	sublt	r3, r6, r3
 8007c1e:	bfb4      	ite	lt
 8007c20:	18d2      	addlt	r2, r2, r3
 8007c22:	1b9e      	subge	r6, r3, r6
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	bfbc      	itt	lt
 8007c28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007c2a:	2600      	movlt	r6, #0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	bfb7      	itett	lt
 8007c30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007c34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007c38:	1a9d      	sublt	r5, r3, r2
 8007c3a:	2300      	movlt	r3, #0
 8007c3c:	e741      	b.n	8007ac2 <_dtoa_r+0x742>
 8007c3e:	9e08      	ldr	r6, [sp, #32]
 8007c40:	9d05      	ldr	r5, [sp, #20]
 8007c42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c44:	e748      	b.n	8007ad8 <_dtoa_r+0x758>
 8007c46:	9a08      	ldr	r2, [sp, #32]
 8007c48:	e770      	b.n	8007b2c <_dtoa_r+0x7ac>
 8007c4a:	9b07      	ldr	r3, [sp, #28]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	dc19      	bgt.n	8007c84 <_dtoa_r+0x904>
 8007c50:	9b02      	ldr	r3, [sp, #8]
 8007c52:	b9bb      	cbnz	r3, 8007c84 <_dtoa_r+0x904>
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c5a:	b99b      	cbnz	r3, 8007c84 <_dtoa_r+0x904>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c62:	0d1b      	lsrs	r3, r3, #20
 8007c64:	051b      	lsls	r3, r3, #20
 8007c66:	b183      	cbz	r3, 8007c8a <_dtoa_r+0x90a>
 8007c68:	9b05      	ldr	r3, [sp, #20]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	9b06      	ldr	r3, [sp, #24]
 8007c70:	3301      	adds	r3, #1
 8007c72:	9306      	str	r3, [sp, #24]
 8007c74:	f04f 0801 	mov.w	r8, #1
 8007c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f47f af6f 	bne.w	8007b5e <_dtoa_r+0x7de>
 8007c80:	2001      	movs	r0, #1
 8007c82:	e774      	b.n	8007b6e <_dtoa_r+0x7ee>
 8007c84:	f04f 0800 	mov.w	r8, #0
 8007c88:	e7f6      	b.n	8007c78 <_dtoa_r+0x8f8>
 8007c8a:	4698      	mov	r8, r3
 8007c8c:	e7f4      	b.n	8007c78 <_dtoa_r+0x8f8>
 8007c8e:	d082      	beq.n	8007b96 <_dtoa_r+0x816>
 8007c90:	9a05      	ldr	r2, [sp, #20]
 8007c92:	331c      	adds	r3, #28
 8007c94:	441a      	add	r2, r3
 8007c96:	9205      	str	r2, [sp, #20]
 8007c98:	9a06      	ldr	r2, [sp, #24]
 8007c9a:	441a      	add	r2, r3
 8007c9c:	441d      	add	r5, r3
 8007c9e:	9206      	str	r2, [sp, #24]
 8007ca0:	e779      	b.n	8007b96 <_dtoa_r+0x816>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	e7f4      	b.n	8007c90 <_dtoa_r+0x910>
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dc37      	bgt.n	8007d1c <_dtoa_r+0x99c>
 8007cac:	9b07      	ldr	r3, [sp, #28]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	dd34      	ble.n	8007d1c <_dtoa_r+0x99c>
 8007cb2:	9b04      	ldr	r3, [sp, #16]
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	9b01      	ldr	r3, [sp, #4]
 8007cb8:	b963      	cbnz	r3, 8007cd4 <_dtoa_r+0x954>
 8007cba:	4631      	mov	r1, r6
 8007cbc:	2205      	movs	r2, #5
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fc6c 	bl	800859c <__multadd>
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	4650      	mov	r0, sl
 8007cca:	f000 fe81 	bl	80089d0 <__mcmp>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f73f adbb 	bgt.w	800784a <_dtoa_r+0x4ca>
 8007cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cd6:	9d00      	ldr	r5, [sp, #0]
 8007cd8:	ea6f 0b03 	mvn.w	fp, r3
 8007cdc:	f04f 0800 	mov.w	r8, #0
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 fc38 	bl	8008558 <_Bfree>
 8007ce8:	2f00      	cmp	r7, #0
 8007cea:	f43f aeab 	beq.w	8007a44 <_dtoa_r+0x6c4>
 8007cee:	f1b8 0f00 	cmp.w	r8, #0
 8007cf2:	d005      	beq.n	8007d00 <_dtoa_r+0x980>
 8007cf4:	45b8      	cmp	r8, r7
 8007cf6:	d003      	beq.n	8007d00 <_dtoa_r+0x980>
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 fc2c 	bl	8008558 <_Bfree>
 8007d00:	4639      	mov	r1, r7
 8007d02:	4620      	mov	r0, r4
 8007d04:	f000 fc28 	bl	8008558 <_Bfree>
 8007d08:	e69c      	b.n	8007a44 <_dtoa_r+0x6c4>
 8007d0a:	2600      	movs	r6, #0
 8007d0c:	4637      	mov	r7, r6
 8007d0e:	e7e1      	b.n	8007cd4 <_dtoa_r+0x954>
 8007d10:	46bb      	mov	fp, r7
 8007d12:	4637      	mov	r7, r6
 8007d14:	e599      	b.n	800784a <_dtoa_r+0x4ca>
 8007d16:	bf00      	nop
 8007d18:	40240000 	.word	0x40240000
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80c8 	beq.w	8007eb4 <_dtoa_r+0xb34>
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	dd05      	ble.n	8007d38 <_dtoa_r+0x9b8>
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	462a      	mov	r2, r5
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fde1 	bl	80088f8 <__lshift>
 8007d36:	4607      	mov	r7, r0
 8007d38:	f1b8 0f00 	cmp.w	r8, #0
 8007d3c:	d05b      	beq.n	8007df6 <_dtoa_r+0xa76>
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fbc9 	bl	80084d8 <_Balloc>
 8007d46:	4605      	mov	r5, r0
 8007d48:	b928      	cbnz	r0, 8007d56 <_dtoa_r+0x9d6>
 8007d4a:	4b83      	ldr	r3, [pc, #524]	; (8007f58 <_dtoa_r+0xbd8>)
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007d52:	f7ff bb2e 	b.w	80073b2 <_dtoa_r+0x32>
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	3202      	adds	r2, #2
 8007d5a:	0092      	lsls	r2, r2, #2
 8007d5c:	f107 010c 	add.w	r1, r7, #12
 8007d60:	300c      	adds	r0, #12
 8007d62:	f7ff fa74 	bl	800724e <memcpy>
 8007d66:	2201      	movs	r2, #1
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fdc4 	bl	80088f8 <__lshift>
 8007d70:	9b00      	ldr	r3, [sp, #0]
 8007d72:	3301      	adds	r3, #1
 8007d74:	9304      	str	r3, [sp, #16]
 8007d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	9308      	str	r3, [sp, #32]
 8007d7e:	9b02      	ldr	r3, [sp, #8]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	46b8      	mov	r8, r7
 8007d86:	9306      	str	r3, [sp, #24]
 8007d88:	4607      	mov	r7, r0
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	4650      	mov	r0, sl
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	f7ff fa69 	bl	800726a <quorem>
 8007d98:	4641      	mov	r1, r8
 8007d9a:	9002      	str	r0, [sp, #8]
 8007d9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007da0:	4650      	mov	r0, sl
 8007da2:	f000 fe15 	bl	80089d0 <__mcmp>
 8007da6:	463a      	mov	r2, r7
 8007da8:	9005      	str	r0, [sp, #20]
 8007daa:	4631      	mov	r1, r6
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 fe2b 	bl	8008a08 <__mdiff>
 8007db2:	68c2      	ldr	r2, [r0, #12]
 8007db4:	4605      	mov	r5, r0
 8007db6:	bb02      	cbnz	r2, 8007dfa <_dtoa_r+0xa7a>
 8007db8:	4601      	mov	r1, r0
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f000 fe08 	bl	80089d0 <__mcmp>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8007dc8:	f000 fbc6 	bl	8008558 <_Bfree>
 8007dcc:	9b07      	ldr	r3, [sp, #28]
 8007dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd0:	9d04      	ldr	r5, [sp, #16]
 8007dd2:	ea43 0102 	orr.w	r1, r3, r2
 8007dd6:	9b06      	ldr	r3, [sp, #24]
 8007dd8:	4319      	orrs	r1, r3
 8007dda:	d110      	bne.n	8007dfe <_dtoa_r+0xa7e>
 8007ddc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007de0:	d029      	beq.n	8007e36 <_dtoa_r+0xab6>
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	dd02      	ble.n	8007dee <_dtoa_r+0xa6e>
 8007de8:	9b02      	ldr	r3, [sp, #8]
 8007dea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	f883 9000 	strb.w	r9, [r3]
 8007df4:	e774      	b.n	8007ce0 <_dtoa_r+0x960>
 8007df6:	4638      	mov	r0, r7
 8007df8:	e7ba      	b.n	8007d70 <_dtoa_r+0x9f0>
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	e7e1      	b.n	8007dc2 <_dtoa_r+0xa42>
 8007dfe:	9b05      	ldr	r3, [sp, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	db04      	blt.n	8007e0e <_dtoa_r+0xa8e>
 8007e04:	9907      	ldr	r1, [sp, #28]
 8007e06:	430b      	orrs	r3, r1
 8007e08:	9906      	ldr	r1, [sp, #24]
 8007e0a:	430b      	orrs	r3, r1
 8007e0c:	d120      	bne.n	8007e50 <_dtoa_r+0xad0>
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	dded      	ble.n	8007dee <_dtoa_r+0xa6e>
 8007e12:	4651      	mov	r1, sl
 8007e14:	2201      	movs	r2, #1
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 fd6e 	bl	80088f8 <__lshift>
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4682      	mov	sl, r0
 8007e20:	f000 fdd6 	bl	80089d0 <__mcmp>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	dc03      	bgt.n	8007e30 <_dtoa_r+0xab0>
 8007e28:	d1e1      	bne.n	8007dee <_dtoa_r+0xa6e>
 8007e2a:	f019 0f01 	tst.w	r9, #1
 8007e2e:	d0de      	beq.n	8007dee <_dtoa_r+0xa6e>
 8007e30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e34:	d1d8      	bne.n	8007de8 <_dtoa_r+0xa68>
 8007e36:	9a01      	ldr	r2, [sp, #4]
 8007e38:	2339      	movs	r3, #57	; 0x39
 8007e3a:	7013      	strb	r3, [r2, #0]
 8007e3c:	462b      	mov	r3, r5
 8007e3e:	461d      	mov	r5, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e46:	2a39      	cmp	r2, #57	; 0x39
 8007e48:	d06c      	beq.n	8007f24 <_dtoa_r+0xba4>
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e747      	b.n	8007ce0 <_dtoa_r+0x960>
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	dd07      	ble.n	8007e64 <_dtoa_r+0xae4>
 8007e54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007e58:	d0ed      	beq.n	8007e36 <_dtoa_r+0xab6>
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	f109 0301 	add.w	r3, r9, #1
 8007e60:	7013      	strb	r3, [r2, #0]
 8007e62:	e73d      	b.n	8007ce0 <_dtoa_r+0x960>
 8007e64:	9b04      	ldr	r3, [sp, #16]
 8007e66:	9a08      	ldr	r2, [sp, #32]
 8007e68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d043      	beq.n	8007ef8 <_dtoa_r+0xb78>
 8007e70:	4651      	mov	r1, sl
 8007e72:	2300      	movs	r3, #0
 8007e74:	220a      	movs	r2, #10
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 fb90 	bl	800859c <__multadd>
 8007e7c:	45b8      	cmp	r8, r7
 8007e7e:	4682      	mov	sl, r0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	f04f 020a 	mov.w	r2, #10
 8007e88:	4641      	mov	r1, r8
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	d107      	bne.n	8007e9e <_dtoa_r+0xb1e>
 8007e8e:	f000 fb85 	bl	800859c <__multadd>
 8007e92:	4680      	mov	r8, r0
 8007e94:	4607      	mov	r7, r0
 8007e96:	9b04      	ldr	r3, [sp, #16]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	e775      	b.n	8007d8a <_dtoa_r+0xa0a>
 8007e9e:	f000 fb7d 	bl	800859c <__multadd>
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	220a      	movs	r2, #10
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fb76 	bl	800859c <__multadd>
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	e7f0      	b.n	8007e96 <_dtoa_r+0xb16>
 8007eb4:	9b04      	ldr	r3, [sp, #16]
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	9d00      	ldr	r5, [sp, #0]
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4650      	mov	r0, sl
 8007ebe:	f7ff f9d4 	bl	800726a <quorem>
 8007ec2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ec6:	9b00      	ldr	r3, [sp, #0]
 8007ec8:	f805 9b01 	strb.w	r9, [r5], #1
 8007ecc:	1aea      	subs	r2, r5, r3
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	dd07      	ble.n	8007ee4 <_dtoa_r+0xb64>
 8007ed4:	4651      	mov	r1, sl
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	220a      	movs	r2, #10
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fb5e 	bl	800859c <__multadd>
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	e7ea      	b.n	8007eba <_dtoa_r+0xb3a>
 8007ee4:	9b01      	ldr	r3, [sp, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfc8      	it	gt
 8007eea:	461d      	movgt	r5, r3
 8007eec:	9b00      	ldr	r3, [sp, #0]
 8007eee:	bfd8      	it	le
 8007ef0:	2501      	movle	r5, #1
 8007ef2:	441d      	add	r5, r3
 8007ef4:	f04f 0800 	mov.w	r8, #0
 8007ef8:	4651      	mov	r1, sl
 8007efa:	2201      	movs	r2, #1
 8007efc:	4620      	mov	r0, r4
 8007efe:	f000 fcfb 	bl	80088f8 <__lshift>
 8007f02:	4631      	mov	r1, r6
 8007f04:	4682      	mov	sl, r0
 8007f06:	f000 fd63 	bl	80089d0 <__mcmp>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	dc96      	bgt.n	8007e3c <_dtoa_r+0xabc>
 8007f0e:	d102      	bne.n	8007f16 <_dtoa_r+0xb96>
 8007f10:	f019 0f01 	tst.w	r9, #1
 8007f14:	d192      	bne.n	8007e3c <_dtoa_r+0xabc>
 8007f16:	462b      	mov	r3, r5
 8007f18:	461d      	mov	r5, r3
 8007f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f1e:	2a30      	cmp	r2, #48	; 0x30
 8007f20:	d0fa      	beq.n	8007f18 <_dtoa_r+0xb98>
 8007f22:	e6dd      	b.n	8007ce0 <_dtoa_r+0x960>
 8007f24:	9a00      	ldr	r2, [sp, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d189      	bne.n	8007e3e <_dtoa_r+0xabe>
 8007f2a:	f10b 0b01 	add.w	fp, fp, #1
 8007f2e:	2331      	movs	r3, #49	; 0x31
 8007f30:	e796      	b.n	8007e60 <_dtoa_r+0xae0>
 8007f32:	4b0a      	ldr	r3, [pc, #40]	; (8007f5c <_dtoa_r+0xbdc>)
 8007f34:	f7ff ba99 	b.w	800746a <_dtoa_r+0xea>
 8007f38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f47f aa6d 	bne.w	800741a <_dtoa_r+0x9a>
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <_dtoa_r+0xbe0>)
 8007f42:	f7ff ba92 	b.w	800746a <_dtoa_r+0xea>
 8007f46:	9b01      	ldr	r3, [sp, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dcb5      	bgt.n	8007eb8 <_dtoa_r+0xb38>
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	f73f aeb1 	bgt.w	8007cb6 <_dtoa_r+0x936>
 8007f54:	e7b0      	b.n	8007eb8 <_dtoa_r+0xb38>
 8007f56:	bf00      	nop
 8007f58:	08009644 	.word	0x08009644
 8007f5c:	080095a4 	.word	0x080095a4
 8007f60:	080095c8 	.word	0x080095c8

08007f64 <__ssputs_r>:
 8007f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f68:	688e      	ldr	r6, [r1, #8]
 8007f6a:	461f      	mov	r7, r3
 8007f6c:	42be      	cmp	r6, r7
 8007f6e:	680b      	ldr	r3, [r1, #0]
 8007f70:	4682      	mov	sl, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4690      	mov	r8, r2
 8007f76:	d82c      	bhi.n	8007fd2 <__ssputs_r+0x6e>
 8007f78:	898a      	ldrh	r2, [r1, #12]
 8007f7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f7e:	d026      	beq.n	8007fce <__ssputs_r+0x6a>
 8007f80:	6965      	ldr	r5, [r4, #20]
 8007f82:	6909      	ldr	r1, [r1, #16]
 8007f84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f88:	eba3 0901 	sub.w	r9, r3, r1
 8007f8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f90:	1c7b      	adds	r3, r7, #1
 8007f92:	444b      	add	r3, r9
 8007f94:	106d      	asrs	r5, r5, #1
 8007f96:	429d      	cmp	r5, r3
 8007f98:	bf38      	it	cc
 8007f9a:	461d      	movcc	r5, r3
 8007f9c:	0553      	lsls	r3, r2, #21
 8007f9e:	d527      	bpl.n	8007ff0 <__ssputs_r+0x8c>
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f000 f95f 	bl	8008264 <_malloc_r>
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	b360      	cbz	r0, 8008004 <__ssputs_r+0xa0>
 8007faa:	6921      	ldr	r1, [r4, #16]
 8007fac:	464a      	mov	r2, r9
 8007fae:	f7ff f94e 	bl	800724e <memcpy>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	6126      	str	r6, [r4, #16]
 8007fc0:	6165      	str	r5, [r4, #20]
 8007fc2:	444e      	add	r6, r9
 8007fc4:	eba5 0509 	sub.w	r5, r5, r9
 8007fc8:	6026      	str	r6, [r4, #0]
 8007fca:	60a5      	str	r5, [r4, #8]
 8007fcc:	463e      	mov	r6, r7
 8007fce:	42be      	cmp	r6, r7
 8007fd0:	d900      	bls.n	8007fd4 <__ssputs_r+0x70>
 8007fd2:	463e      	mov	r6, r7
 8007fd4:	6820      	ldr	r0, [r4, #0]
 8007fd6:	4632      	mov	r2, r6
 8007fd8:	4641      	mov	r1, r8
 8007fda:	f000 fe6b 	bl	8008cb4 <memmove>
 8007fde:	68a3      	ldr	r3, [r4, #8]
 8007fe0:	1b9b      	subs	r3, r3, r6
 8007fe2:	60a3      	str	r3, [r4, #8]
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	4433      	add	r3, r6
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	2000      	movs	r0, #0
 8007fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff0:	462a      	mov	r2, r5
 8007ff2:	f000 fe30 	bl	8008c56 <_realloc_r>
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d1e0      	bne.n	8007fbe <__ssputs_r+0x5a>
 8007ffc:	6921      	ldr	r1, [r4, #16]
 8007ffe:	4650      	mov	r0, sl
 8008000:	f000 fefc 	bl	8008dfc <_free_r>
 8008004:	230c      	movs	r3, #12
 8008006:	f8ca 3000 	str.w	r3, [sl]
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008016:	e7e9      	b.n	8007fec <__ssputs_r+0x88>

08008018 <_svfiprintf_r>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	4698      	mov	r8, r3
 800801e:	898b      	ldrh	r3, [r1, #12]
 8008020:	061b      	lsls	r3, r3, #24
 8008022:	b09d      	sub	sp, #116	; 0x74
 8008024:	4607      	mov	r7, r0
 8008026:	460d      	mov	r5, r1
 8008028:	4614      	mov	r4, r2
 800802a:	d50e      	bpl.n	800804a <_svfiprintf_r+0x32>
 800802c:	690b      	ldr	r3, [r1, #16]
 800802e:	b963      	cbnz	r3, 800804a <_svfiprintf_r+0x32>
 8008030:	2140      	movs	r1, #64	; 0x40
 8008032:	f000 f917 	bl	8008264 <_malloc_r>
 8008036:	6028      	str	r0, [r5, #0]
 8008038:	6128      	str	r0, [r5, #16]
 800803a:	b920      	cbnz	r0, 8008046 <_svfiprintf_r+0x2e>
 800803c:	230c      	movs	r3, #12
 800803e:	603b      	str	r3, [r7, #0]
 8008040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008044:	e0d0      	b.n	80081e8 <_svfiprintf_r+0x1d0>
 8008046:	2340      	movs	r3, #64	; 0x40
 8008048:	616b      	str	r3, [r5, #20]
 800804a:	2300      	movs	r3, #0
 800804c:	9309      	str	r3, [sp, #36]	; 0x24
 800804e:	2320      	movs	r3, #32
 8008050:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008054:	f8cd 800c 	str.w	r8, [sp, #12]
 8008058:	2330      	movs	r3, #48	; 0x30
 800805a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008200 <_svfiprintf_r+0x1e8>
 800805e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008062:	f04f 0901 	mov.w	r9, #1
 8008066:	4623      	mov	r3, r4
 8008068:	469a      	mov	sl, r3
 800806a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800806e:	b10a      	cbz	r2, 8008074 <_svfiprintf_r+0x5c>
 8008070:	2a25      	cmp	r2, #37	; 0x25
 8008072:	d1f9      	bne.n	8008068 <_svfiprintf_r+0x50>
 8008074:	ebba 0b04 	subs.w	fp, sl, r4
 8008078:	d00b      	beq.n	8008092 <_svfiprintf_r+0x7a>
 800807a:	465b      	mov	r3, fp
 800807c:	4622      	mov	r2, r4
 800807e:	4629      	mov	r1, r5
 8008080:	4638      	mov	r0, r7
 8008082:	f7ff ff6f 	bl	8007f64 <__ssputs_r>
 8008086:	3001      	adds	r0, #1
 8008088:	f000 80a9 	beq.w	80081de <_svfiprintf_r+0x1c6>
 800808c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800808e:	445a      	add	r2, fp
 8008090:	9209      	str	r2, [sp, #36]	; 0x24
 8008092:	f89a 3000 	ldrb.w	r3, [sl]
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 80a1 	beq.w	80081de <_svfiprintf_r+0x1c6>
 800809c:	2300      	movs	r3, #0
 800809e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a6:	f10a 0a01 	add.w	sl, sl, #1
 80080aa:	9304      	str	r3, [sp, #16]
 80080ac:	9307      	str	r3, [sp, #28]
 80080ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080b2:	931a      	str	r3, [sp, #104]	; 0x68
 80080b4:	4654      	mov	r4, sl
 80080b6:	2205      	movs	r2, #5
 80080b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080bc:	4850      	ldr	r0, [pc, #320]	; (8008200 <_svfiprintf_r+0x1e8>)
 80080be:	f7f8 f85f 	bl	8000180 <memchr>
 80080c2:	9a04      	ldr	r2, [sp, #16]
 80080c4:	b9d8      	cbnz	r0, 80080fe <_svfiprintf_r+0xe6>
 80080c6:	06d0      	lsls	r0, r2, #27
 80080c8:	bf44      	itt	mi
 80080ca:	2320      	movmi	r3, #32
 80080cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080d0:	0711      	lsls	r1, r2, #28
 80080d2:	bf44      	itt	mi
 80080d4:	232b      	movmi	r3, #43	; 0x2b
 80080d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080da:	f89a 3000 	ldrb.w	r3, [sl]
 80080de:	2b2a      	cmp	r3, #42	; 0x2a
 80080e0:	d015      	beq.n	800810e <_svfiprintf_r+0xf6>
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	4654      	mov	r4, sl
 80080e6:	2000      	movs	r0, #0
 80080e8:	f04f 0c0a 	mov.w	ip, #10
 80080ec:	4621      	mov	r1, r4
 80080ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080f2:	3b30      	subs	r3, #48	; 0x30
 80080f4:	2b09      	cmp	r3, #9
 80080f6:	d94d      	bls.n	8008194 <_svfiprintf_r+0x17c>
 80080f8:	b1b0      	cbz	r0, 8008128 <_svfiprintf_r+0x110>
 80080fa:	9207      	str	r2, [sp, #28]
 80080fc:	e014      	b.n	8008128 <_svfiprintf_r+0x110>
 80080fe:	eba0 0308 	sub.w	r3, r0, r8
 8008102:	fa09 f303 	lsl.w	r3, r9, r3
 8008106:	4313      	orrs	r3, r2
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	46a2      	mov	sl, r4
 800810c:	e7d2      	b.n	80080b4 <_svfiprintf_r+0x9c>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	1d19      	adds	r1, r3, #4
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	9103      	str	r1, [sp, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	bfbb      	ittet	lt
 800811a:	425b      	neglt	r3, r3
 800811c:	f042 0202 	orrlt.w	r2, r2, #2
 8008120:	9307      	strge	r3, [sp, #28]
 8008122:	9307      	strlt	r3, [sp, #28]
 8008124:	bfb8      	it	lt
 8008126:	9204      	strlt	r2, [sp, #16]
 8008128:	7823      	ldrb	r3, [r4, #0]
 800812a:	2b2e      	cmp	r3, #46	; 0x2e
 800812c:	d10c      	bne.n	8008148 <_svfiprintf_r+0x130>
 800812e:	7863      	ldrb	r3, [r4, #1]
 8008130:	2b2a      	cmp	r3, #42	; 0x2a
 8008132:	d134      	bne.n	800819e <_svfiprintf_r+0x186>
 8008134:	9b03      	ldr	r3, [sp, #12]
 8008136:	1d1a      	adds	r2, r3, #4
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	9203      	str	r2, [sp, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	bfb8      	it	lt
 8008140:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008144:	3402      	adds	r4, #2
 8008146:	9305      	str	r3, [sp, #20]
 8008148:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008210 <_svfiprintf_r+0x1f8>
 800814c:	7821      	ldrb	r1, [r4, #0]
 800814e:	2203      	movs	r2, #3
 8008150:	4650      	mov	r0, sl
 8008152:	f7f8 f815 	bl	8000180 <memchr>
 8008156:	b138      	cbz	r0, 8008168 <_svfiprintf_r+0x150>
 8008158:	9b04      	ldr	r3, [sp, #16]
 800815a:	eba0 000a 	sub.w	r0, r0, sl
 800815e:	2240      	movs	r2, #64	; 0x40
 8008160:	4082      	lsls	r2, r0
 8008162:	4313      	orrs	r3, r2
 8008164:	3401      	adds	r4, #1
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800816c:	4825      	ldr	r0, [pc, #148]	; (8008204 <_svfiprintf_r+0x1ec>)
 800816e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008172:	2206      	movs	r2, #6
 8008174:	f7f8 f804 	bl	8000180 <memchr>
 8008178:	2800      	cmp	r0, #0
 800817a:	d038      	beq.n	80081ee <_svfiprintf_r+0x1d6>
 800817c:	4b22      	ldr	r3, [pc, #136]	; (8008208 <_svfiprintf_r+0x1f0>)
 800817e:	bb1b      	cbnz	r3, 80081c8 <_svfiprintf_r+0x1b0>
 8008180:	9b03      	ldr	r3, [sp, #12]
 8008182:	3307      	adds	r3, #7
 8008184:	f023 0307 	bic.w	r3, r3, #7
 8008188:	3308      	adds	r3, #8
 800818a:	9303      	str	r3, [sp, #12]
 800818c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818e:	4433      	add	r3, r6
 8008190:	9309      	str	r3, [sp, #36]	; 0x24
 8008192:	e768      	b.n	8008066 <_svfiprintf_r+0x4e>
 8008194:	fb0c 3202 	mla	r2, ip, r2, r3
 8008198:	460c      	mov	r4, r1
 800819a:	2001      	movs	r0, #1
 800819c:	e7a6      	b.n	80080ec <_svfiprintf_r+0xd4>
 800819e:	2300      	movs	r3, #0
 80081a0:	3401      	adds	r4, #1
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	4619      	mov	r1, r3
 80081a6:	f04f 0c0a 	mov.w	ip, #10
 80081aa:	4620      	mov	r0, r4
 80081ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b0:	3a30      	subs	r2, #48	; 0x30
 80081b2:	2a09      	cmp	r2, #9
 80081b4:	d903      	bls.n	80081be <_svfiprintf_r+0x1a6>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0c6      	beq.n	8008148 <_svfiprintf_r+0x130>
 80081ba:	9105      	str	r1, [sp, #20]
 80081bc:	e7c4      	b.n	8008148 <_svfiprintf_r+0x130>
 80081be:	fb0c 2101 	mla	r1, ip, r1, r2
 80081c2:	4604      	mov	r4, r0
 80081c4:	2301      	movs	r3, #1
 80081c6:	e7f0      	b.n	80081aa <_svfiprintf_r+0x192>
 80081c8:	ab03      	add	r3, sp, #12
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	462a      	mov	r2, r5
 80081ce:	4b0f      	ldr	r3, [pc, #60]	; (800820c <_svfiprintf_r+0x1f4>)
 80081d0:	a904      	add	r1, sp, #16
 80081d2:	4638      	mov	r0, r7
 80081d4:	f7fe fb46 	bl	8006864 <_printf_float>
 80081d8:	1c42      	adds	r2, r0, #1
 80081da:	4606      	mov	r6, r0
 80081dc:	d1d6      	bne.n	800818c <_svfiprintf_r+0x174>
 80081de:	89ab      	ldrh	r3, [r5, #12]
 80081e0:	065b      	lsls	r3, r3, #25
 80081e2:	f53f af2d 	bmi.w	8008040 <_svfiprintf_r+0x28>
 80081e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081e8:	b01d      	add	sp, #116	; 0x74
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	462a      	mov	r2, r5
 80081f4:	4b05      	ldr	r3, [pc, #20]	; (800820c <_svfiprintf_r+0x1f4>)
 80081f6:	a904      	add	r1, sp, #16
 80081f8:	4638      	mov	r0, r7
 80081fa:	f7fe fdd7 	bl	8006dac <_printf_i>
 80081fe:	e7eb      	b.n	80081d8 <_svfiprintf_r+0x1c0>
 8008200:	08009655 	.word	0x08009655
 8008204:	0800965f 	.word	0x0800965f
 8008208:	08006865 	.word	0x08006865
 800820c:	08007f65 	.word	0x08007f65
 8008210:	0800965b 	.word	0x0800965b

08008214 <malloc>:
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <malloc+0xc>)
 8008216:	4601      	mov	r1, r0
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f000 b823 	b.w	8008264 <_malloc_r>
 800821e:	bf00      	nop
 8008220:	2000006c 	.word	0x2000006c

08008224 <sbrk_aligned>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	4e0e      	ldr	r6, [pc, #56]	; (8008260 <sbrk_aligned+0x3c>)
 8008228:	460c      	mov	r4, r1
 800822a:	6831      	ldr	r1, [r6, #0]
 800822c:	4605      	mov	r5, r0
 800822e:	b911      	cbnz	r1, 8008236 <sbrk_aligned+0x12>
 8008230:	f000 fd8e 	bl	8008d50 <_sbrk_r>
 8008234:	6030      	str	r0, [r6, #0]
 8008236:	4621      	mov	r1, r4
 8008238:	4628      	mov	r0, r5
 800823a:	f000 fd89 	bl	8008d50 <_sbrk_r>
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	d00a      	beq.n	8008258 <sbrk_aligned+0x34>
 8008242:	1cc4      	adds	r4, r0, #3
 8008244:	f024 0403 	bic.w	r4, r4, #3
 8008248:	42a0      	cmp	r0, r4
 800824a:	d007      	beq.n	800825c <sbrk_aligned+0x38>
 800824c:	1a21      	subs	r1, r4, r0
 800824e:	4628      	mov	r0, r5
 8008250:	f000 fd7e 	bl	8008d50 <_sbrk_r>
 8008254:	3001      	adds	r0, #1
 8008256:	d101      	bne.n	800825c <sbrk_aligned+0x38>
 8008258:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800825c:	4620      	mov	r0, r4
 800825e:	bd70      	pop	{r4, r5, r6, pc}
 8008260:	2000089c 	.word	0x2000089c

08008264 <_malloc_r>:
 8008264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008268:	1ccd      	adds	r5, r1, #3
 800826a:	f025 0503 	bic.w	r5, r5, #3
 800826e:	3508      	adds	r5, #8
 8008270:	2d0c      	cmp	r5, #12
 8008272:	bf38      	it	cc
 8008274:	250c      	movcc	r5, #12
 8008276:	2d00      	cmp	r5, #0
 8008278:	4607      	mov	r7, r0
 800827a:	db01      	blt.n	8008280 <_malloc_r+0x1c>
 800827c:	42a9      	cmp	r1, r5
 800827e:	d905      	bls.n	800828c <_malloc_r+0x28>
 8008280:	230c      	movs	r3, #12
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	2600      	movs	r6, #0
 8008286:	4630      	mov	r0, r6
 8008288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008360 <_malloc_r+0xfc>
 8008290:	f000 f916 	bl	80084c0 <__malloc_lock>
 8008294:	f8d8 3000 	ldr.w	r3, [r8]
 8008298:	461c      	mov	r4, r3
 800829a:	bb5c      	cbnz	r4, 80082f4 <_malloc_r+0x90>
 800829c:	4629      	mov	r1, r5
 800829e:	4638      	mov	r0, r7
 80082a0:	f7ff ffc0 	bl	8008224 <sbrk_aligned>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	4604      	mov	r4, r0
 80082a8:	d155      	bne.n	8008356 <_malloc_r+0xf2>
 80082aa:	f8d8 4000 	ldr.w	r4, [r8]
 80082ae:	4626      	mov	r6, r4
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	d145      	bne.n	8008340 <_malloc_r+0xdc>
 80082b4:	2c00      	cmp	r4, #0
 80082b6:	d048      	beq.n	800834a <_malloc_r+0xe6>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	4631      	mov	r1, r6
 80082bc:	4638      	mov	r0, r7
 80082be:	eb04 0903 	add.w	r9, r4, r3
 80082c2:	f000 fd45 	bl	8008d50 <_sbrk_r>
 80082c6:	4581      	cmp	r9, r0
 80082c8:	d13f      	bne.n	800834a <_malloc_r+0xe6>
 80082ca:	6821      	ldr	r1, [r4, #0]
 80082cc:	1a6d      	subs	r5, r5, r1
 80082ce:	4629      	mov	r1, r5
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7ff ffa7 	bl	8008224 <sbrk_aligned>
 80082d6:	3001      	adds	r0, #1
 80082d8:	d037      	beq.n	800834a <_malloc_r+0xe6>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	442b      	add	r3, r5
 80082de:	6023      	str	r3, [r4, #0]
 80082e0:	f8d8 3000 	ldr.w	r3, [r8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d038      	beq.n	800835a <_malloc_r+0xf6>
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	42a2      	cmp	r2, r4
 80082ec:	d12b      	bne.n	8008346 <_malloc_r+0xe2>
 80082ee:	2200      	movs	r2, #0
 80082f0:	605a      	str	r2, [r3, #4]
 80082f2:	e00f      	b.n	8008314 <_malloc_r+0xb0>
 80082f4:	6822      	ldr	r2, [r4, #0]
 80082f6:	1b52      	subs	r2, r2, r5
 80082f8:	d41f      	bmi.n	800833a <_malloc_r+0xd6>
 80082fa:	2a0b      	cmp	r2, #11
 80082fc:	d917      	bls.n	800832e <_malloc_r+0xca>
 80082fe:	1961      	adds	r1, r4, r5
 8008300:	42a3      	cmp	r3, r4
 8008302:	6025      	str	r5, [r4, #0]
 8008304:	bf18      	it	ne
 8008306:	6059      	strne	r1, [r3, #4]
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	bf08      	it	eq
 800830c:	f8c8 1000 	streq.w	r1, [r8]
 8008310:	5162      	str	r2, [r4, r5]
 8008312:	604b      	str	r3, [r1, #4]
 8008314:	4638      	mov	r0, r7
 8008316:	f104 060b 	add.w	r6, r4, #11
 800831a:	f000 f8d7 	bl	80084cc <__malloc_unlock>
 800831e:	f026 0607 	bic.w	r6, r6, #7
 8008322:	1d23      	adds	r3, r4, #4
 8008324:	1af2      	subs	r2, r6, r3
 8008326:	d0ae      	beq.n	8008286 <_malloc_r+0x22>
 8008328:	1b9b      	subs	r3, r3, r6
 800832a:	50a3      	str	r3, [r4, r2]
 800832c:	e7ab      	b.n	8008286 <_malloc_r+0x22>
 800832e:	42a3      	cmp	r3, r4
 8008330:	6862      	ldr	r2, [r4, #4]
 8008332:	d1dd      	bne.n	80082f0 <_malloc_r+0x8c>
 8008334:	f8c8 2000 	str.w	r2, [r8]
 8008338:	e7ec      	b.n	8008314 <_malloc_r+0xb0>
 800833a:	4623      	mov	r3, r4
 800833c:	6864      	ldr	r4, [r4, #4]
 800833e:	e7ac      	b.n	800829a <_malloc_r+0x36>
 8008340:	4634      	mov	r4, r6
 8008342:	6876      	ldr	r6, [r6, #4]
 8008344:	e7b4      	b.n	80082b0 <_malloc_r+0x4c>
 8008346:	4613      	mov	r3, r2
 8008348:	e7cc      	b.n	80082e4 <_malloc_r+0x80>
 800834a:	230c      	movs	r3, #12
 800834c:	603b      	str	r3, [r7, #0]
 800834e:	4638      	mov	r0, r7
 8008350:	f000 f8bc 	bl	80084cc <__malloc_unlock>
 8008354:	e797      	b.n	8008286 <_malloc_r+0x22>
 8008356:	6025      	str	r5, [r4, #0]
 8008358:	e7dc      	b.n	8008314 <_malloc_r+0xb0>
 800835a:	605b      	str	r3, [r3, #4]
 800835c:	deff      	udf	#255	; 0xff
 800835e:	bf00      	nop
 8008360:	20000898 	.word	0x20000898

08008364 <__sflush_r>:
 8008364:	898a      	ldrh	r2, [r1, #12]
 8008366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836a:	4605      	mov	r5, r0
 800836c:	0710      	lsls	r0, r2, #28
 800836e:	460c      	mov	r4, r1
 8008370:	d458      	bmi.n	8008424 <__sflush_r+0xc0>
 8008372:	684b      	ldr	r3, [r1, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	dc05      	bgt.n	8008384 <__sflush_r+0x20>
 8008378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc02      	bgt.n	8008384 <__sflush_r+0x20>
 800837e:	2000      	movs	r0, #0
 8008380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008386:	2e00      	cmp	r6, #0
 8008388:	d0f9      	beq.n	800837e <__sflush_r+0x1a>
 800838a:	2300      	movs	r3, #0
 800838c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008390:	682f      	ldr	r7, [r5, #0]
 8008392:	6a21      	ldr	r1, [r4, #32]
 8008394:	602b      	str	r3, [r5, #0]
 8008396:	d032      	beq.n	80083fe <__sflush_r+0x9a>
 8008398:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	075a      	lsls	r2, r3, #29
 800839e:	d505      	bpl.n	80083ac <__sflush_r+0x48>
 80083a0:	6863      	ldr	r3, [r4, #4]
 80083a2:	1ac0      	subs	r0, r0, r3
 80083a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083a6:	b10b      	cbz	r3, 80083ac <__sflush_r+0x48>
 80083a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083aa:	1ac0      	subs	r0, r0, r3
 80083ac:	2300      	movs	r3, #0
 80083ae:	4602      	mov	r2, r0
 80083b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083b2:	6a21      	ldr	r1, [r4, #32]
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b0      	blx	r6
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	d106      	bne.n	80083cc <__sflush_r+0x68>
 80083be:	6829      	ldr	r1, [r5, #0]
 80083c0:	291d      	cmp	r1, #29
 80083c2:	d82b      	bhi.n	800841c <__sflush_r+0xb8>
 80083c4:	4a29      	ldr	r2, [pc, #164]	; (800846c <__sflush_r+0x108>)
 80083c6:	410a      	asrs	r2, r1
 80083c8:	07d6      	lsls	r6, r2, #31
 80083ca:	d427      	bmi.n	800841c <__sflush_r+0xb8>
 80083cc:	2200      	movs	r2, #0
 80083ce:	6062      	str	r2, [r4, #4]
 80083d0:	04d9      	lsls	r1, r3, #19
 80083d2:	6922      	ldr	r2, [r4, #16]
 80083d4:	6022      	str	r2, [r4, #0]
 80083d6:	d504      	bpl.n	80083e2 <__sflush_r+0x7e>
 80083d8:	1c42      	adds	r2, r0, #1
 80083da:	d101      	bne.n	80083e0 <__sflush_r+0x7c>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b903      	cbnz	r3, 80083e2 <__sflush_r+0x7e>
 80083e0:	6560      	str	r0, [r4, #84]	; 0x54
 80083e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083e4:	602f      	str	r7, [r5, #0]
 80083e6:	2900      	cmp	r1, #0
 80083e8:	d0c9      	beq.n	800837e <__sflush_r+0x1a>
 80083ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083ee:	4299      	cmp	r1, r3
 80083f0:	d002      	beq.n	80083f8 <__sflush_r+0x94>
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 fd02 	bl	8008dfc <_free_r>
 80083f8:	2000      	movs	r0, #0
 80083fa:	6360      	str	r0, [r4, #52]	; 0x34
 80083fc:	e7c0      	b.n	8008380 <__sflush_r+0x1c>
 80083fe:	2301      	movs	r3, #1
 8008400:	4628      	mov	r0, r5
 8008402:	47b0      	blx	r6
 8008404:	1c41      	adds	r1, r0, #1
 8008406:	d1c8      	bne.n	800839a <__sflush_r+0x36>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0c5      	beq.n	800839a <__sflush_r+0x36>
 800840e:	2b1d      	cmp	r3, #29
 8008410:	d001      	beq.n	8008416 <__sflush_r+0xb2>
 8008412:	2b16      	cmp	r3, #22
 8008414:	d101      	bne.n	800841a <__sflush_r+0xb6>
 8008416:	602f      	str	r7, [r5, #0]
 8008418:	e7b1      	b.n	800837e <__sflush_r+0x1a>
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008420:	81a3      	strh	r3, [r4, #12]
 8008422:	e7ad      	b.n	8008380 <__sflush_r+0x1c>
 8008424:	690f      	ldr	r7, [r1, #16]
 8008426:	2f00      	cmp	r7, #0
 8008428:	d0a9      	beq.n	800837e <__sflush_r+0x1a>
 800842a:	0793      	lsls	r3, r2, #30
 800842c:	680e      	ldr	r6, [r1, #0]
 800842e:	bf08      	it	eq
 8008430:	694b      	ldreq	r3, [r1, #20]
 8008432:	600f      	str	r7, [r1, #0]
 8008434:	bf18      	it	ne
 8008436:	2300      	movne	r3, #0
 8008438:	eba6 0807 	sub.w	r8, r6, r7
 800843c:	608b      	str	r3, [r1, #8]
 800843e:	f1b8 0f00 	cmp.w	r8, #0
 8008442:	dd9c      	ble.n	800837e <__sflush_r+0x1a>
 8008444:	6a21      	ldr	r1, [r4, #32]
 8008446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008448:	4643      	mov	r3, r8
 800844a:	463a      	mov	r2, r7
 800844c:	4628      	mov	r0, r5
 800844e:	47b0      	blx	r6
 8008450:	2800      	cmp	r0, #0
 8008452:	dc06      	bgt.n	8008462 <__sflush_r+0xfe>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008460:	e78e      	b.n	8008380 <__sflush_r+0x1c>
 8008462:	4407      	add	r7, r0
 8008464:	eba8 0800 	sub.w	r8, r8, r0
 8008468:	e7e9      	b.n	800843e <__sflush_r+0xda>
 800846a:	bf00      	nop
 800846c:	dfbffffe 	.word	0xdfbffffe

08008470 <_fflush_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	690b      	ldr	r3, [r1, #16]
 8008474:	4605      	mov	r5, r0
 8008476:	460c      	mov	r4, r1
 8008478:	b913      	cbnz	r3, 8008480 <_fflush_r+0x10>
 800847a:	2500      	movs	r5, #0
 800847c:	4628      	mov	r0, r5
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	b118      	cbz	r0, 800848a <_fflush_r+0x1a>
 8008482:	6a03      	ldr	r3, [r0, #32]
 8008484:	b90b      	cbnz	r3, 800848a <_fflush_r+0x1a>
 8008486:	f7fe fe73 	bl	8007170 <__sinit>
 800848a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0f3      	beq.n	800847a <_fflush_r+0xa>
 8008492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008494:	07d0      	lsls	r0, r2, #31
 8008496:	d404      	bmi.n	80084a2 <_fflush_r+0x32>
 8008498:	0599      	lsls	r1, r3, #22
 800849a:	d402      	bmi.n	80084a2 <_fflush_r+0x32>
 800849c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800849e:	f7fe fed4 	bl	800724a <__retarget_lock_acquire_recursive>
 80084a2:	4628      	mov	r0, r5
 80084a4:	4621      	mov	r1, r4
 80084a6:	f7ff ff5d 	bl	8008364 <__sflush_r>
 80084aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084ac:	07da      	lsls	r2, r3, #31
 80084ae:	4605      	mov	r5, r0
 80084b0:	d4e4      	bmi.n	800847c <_fflush_r+0xc>
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	059b      	lsls	r3, r3, #22
 80084b6:	d4e1      	bmi.n	800847c <_fflush_r+0xc>
 80084b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ba:	f7fe fec7 	bl	800724c <__retarget_lock_release_recursive>
 80084be:	e7dd      	b.n	800847c <_fflush_r+0xc>

080084c0 <__malloc_lock>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__malloc_lock+0x8>)
 80084c2:	f7fe bec2 	b.w	800724a <__retarget_lock_acquire_recursive>
 80084c6:	bf00      	nop
 80084c8:	20000894 	.word	0x20000894

080084cc <__malloc_unlock>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__malloc_unlock+0x8>)
 80084ce:	f7fe bebd 	b.w	800724c <__retarget_lock_release_recursive>
 80084d2:	bf00      	nop
 80084d4:	20000894 	.word	0x20000894

080084d8 <_Balloc>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	69c6      	ldr	r6, [r0, #28]
 80084dc:	4604      	mov	r4, r0
 80084de:	460d      	mov	r5, r1
 80084e0:	b976      	cbnz	r6, 8008500 <_Balloc+0x28>
 80084e2:	2010      	movs	r0, #16
 80084e4:	f7ff fe96 	bl	8008214 <malloc>
 80084e8:	4602      	mov	r2, r0
 80084ea:	61e0      	str	r0, [r4, #28]
 80084ec:	b920      	cbnz	r0, 80084f8 <_Balloc+0x20>
 80084ee:	4b18      	ldr	r3, [pc, #96]	; (8008550 <_Balloc+0x78>)
 80084f0:	4818      	ldr	r0, [pc, #96]	; (8008554 <_Balloc+0x7c>)
 80084f2:	216b      	movs	r1, #107	; 0x6b
 80084f4:	f000 fc4e 	bl	8008d94 <__assert_func>
 80084f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084fc:	6006      	str	r6, [r0, #0]
 80084fe:	60c6      	str	r6, [r0, #12]
 8008500:	69e6      	ldr	r6, [r4, #28]
 8008502:	68f3      	ldr	r3, [r6, #12]
 8008504:	b183      	cbz	r3, 8008528 <_Balloc+0x50>
 8008506:	69e3      	ldr	r3, [r4, #28]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800850e:	b9b8      	cbnz	r0, 8008540 <_Balloc+0x68>
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f605 	lsl.w	r6, r1, r5
 8008516:	1d72      	adds	r2, r6, #5
 8008518:	0092      	lsls	r2, r2, #2
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fc58 	bl	8008dd0 <_calloc_r>
 8008520:	b160      	cbz	r0, 800853c <_Balloc+0x64>
 8008522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008526:	e00e      	b.n	8008546 <_Balloc+0x6e>
 8008528:	2221      	movs	r2, #33	; 0x21
 800852a:	2104      	movs	r1, #4
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fc4f 	bl	8008dd0 <_calloc_r>
 8008532:	69e3      	ldr	r3, [r4, #28]
 8008534:	60f0      	str	r0, [r6, #12]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e4      	bne.n	8008506 <_Balloc+0x2e>
 800853c:	2000      	movs	r0, #0
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	6802      	ldr	r2, [r0, #0]
 8008542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008546:	2300      	movs	r3, #0
 8008548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800854c:	e7f7      	b.n	800853e <_Balloc+0x66>
 800854e:	bf00      	nop
 8008550:	080095d5 	.word	0x080095d5
 8008554:	08009666 	.word	0x08009666

08008558 <_Bfree>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	69c6      	ldr	r6, [r0, #28]
 800855c:	4605      	mov	r5, r0
 800855e:	460c      	mov	r4, r1
 8008560:	b976      	cbnz	r6, 8008580 <_Bfree+0x28>
 8008562:	2010      	movs	r0, #16
 8008564:	f7ff fe56 	bl	8008214 <malloc>
 8008568:	4602      	mov	r2, r0
 800856a:	61e8      	str	r0, [r5, #28]
 800856c:	b920      	cbnz	r0, 8008578 <_Bfree+0x20>
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <_Bfree+0x3c>)
 8008570:	4809      	ldr	r0, [pc, #36]	; (8008598 <_Bfree+0x40>)
 8008572:	218f      	movs	r1, #143	; 0x8f
 8008574:	f000 fc0e 	bl	8008d94 <__assert_func>
 8008578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800857c:	6006      	str	r6, [r0, #0]
 800857e:	60c6      	str	r6, [r0, #12]
 8008580:	b13c      	cbz	r4, 8008592 <_Bfree+0x3a>
 8008582:	69eb      	ldr	r3, [r5, #28]
 8008584:	6862      	ldr	r2, [r4, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800858c:	6021      	str	r1, [r4, #0]
 800858e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	080095d5 	.word	0x080095d5
 8008598:	08009666 	.word	0x08009666

0800859c <__multadd>:
 800859c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a0:	690d      	ldr	r5, [r1, #16]
 80085a2:	4607      	mov	r7, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	461e      	mov	r6, r3
 80085a8:	f101 0c14 	add.w	ip, r1, #20
 80085ac:	2000      	movs	r0, #0
 80085ae:	f8dc 3000 	ldr.w	r3, [ip]
 80085b2:	b299      	uxth	r1, r3
 80085b4:	fb02 6101 	mla	r1, r2, r1, r6
 80085b8:	0c1e      	lsrs	r6, r3, #16
 80085ba:	0c0b      	lsrs	r3, r1, #16
 80085bc:	fb02 3306 	mla	r3, r2, r6, r3
 80085c0:	b289      	uxth	r1, r1
 80085c2:	3001      	adds	r0, #1
 80085c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085c8:	4285      	cmp	r5, r0
 80085ca:	f84c 1b04 	str.w	r1, [ip], #4
 80085ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085d2:	dcec      	bgt.n	80085ae <__multadd+0x12>
 80085d4:	b30e      	cbz	r6, 800861a <__multadd+0x7e>
 80085d6:	68a3      	ldr	r3, [r4, #8]
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dc19      	bgt.n	8008610 <__multadd+0x74>
 80085dc:	6861      	ldr	r1, [r4, #4]
 80085de:	4638      	mov	r0, r7
 80085e0:	3101      	adds	r1, #1
 80085e2:	f7ff ff79 	bl	80084d8 <_Balloc>
 80085e6:	4680      	mov	r8, r0
 80085e8:	b928      	cbnz	r0, 80085f6 <__multadd+0x5a>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4b0c      	ldr	r3, [pc, #48]	; (8008620 <__multadd+0x84>)
 80085ee:	480d      	ldr	r0, [pc, #52]	; (8008624 <__multadd+0x88>)
 80085f0:	21ba      	movs	r1, #186	; 0xba
 80085f2:	f000 fbcf 	bl	8008d94 <__assert_func>
 80085f6:	6922      	ldr	r2, [r4, #16]
 80085f8:	3202      	adds	r2, #2
 80085fa:	f104 010c 	add.w	r1, r4, #12
 80085fe:	0092      	lsls	r2, r2, #2
 8008600:	300c      	adds	r0, #12
 8008602:	f7fe fe24 	bl	800724e <memcpy>
 8008606:	4621      	mov	r1, r4
 8008608:	4638      	mov	r0, r7
 800860a:	f7ff ffa5 	bl	8008558 <_Bfree>
 800860e:	4644      	mov	r4, r8
 8008610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008614:	3501      	adds	r5, #1
 8008616:	615e      	str	r6, [r3, #20]
 8008618:	6125      	str	r5, [r4, #16]
 800861a:	4620      	mov	r0, r4
 800861c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008620:	08009644 	.word	0x08009644
 8008624:	08009666 	.word	0x08009666

08008628 <__hi0bits>:
 8008628:	0c03      	lsrs	r3, r0, #16
 800862a:	041b      	lsls	r3, r3, #16
 800862c:	b9d3      	cbnz	r3, 8008664 <__hi0bits+0x3c>
 800862e:	0400      	lsls	r0, r0, #16
 8008630:	2310      	movs	r3, #16
 8008632:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008636:	bf04      	itt	eq
 8008638:	0200      	lsleq	r0, r0, #8
 800863a:	3308      	addeq	r3, #8
 800863c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008640:	bf04      	itt	eq
 8008642:	0100      	lsleq	r0, r0, #4
 8008644:	3304      	addeq	r3, #4
 8008646:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800864a:	bf04      	itt	eq
 800864c:	0080      	lsleq	r0, r0, #2
 800864e:	3302      	addeq	r3, #2
 8008650:	2800      	cmp	r0, #0
 8008652:	db05      	blt.n	8008660 <__hi0bits+0x38>
 8008654:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008658:	f103 0301 	add.w	r3, r3, #1
 800865c:	bf08      	it	eq
 800865e:	2320      	moveq	r3, #32
 8008660:	4618      	mov	r0, r3
 8008662:	4770      	bx	lr
 8008664:	2300      	movs	r3, #0
 8008666:	e7e4      	b.n	8008632 <__hi0bits+0xa>

08008668 <__lo0bits>:
 8008668:	6803      	ldr	r3, [r0, #0]
 800866a:	f013 0207 	ands.w	r2, r3, #7
 800866e:	d00c      	beq.n	800868a <__lo0bits+0x22>
 8008670:	07d9      	lsls	r1, r3, #31
 8008672:	d422      	bmi.n	80086ba <__lo0bits+0x52>
 8008674:	079a      	lsls	r2, r3, #30
 8008676:	bf49      	itett	mi
 8008678:	085b      	lsrmi	r3, r3, #1
 800867a:	089b      	lsrpl	r3, r3, #2
 800867c:	6003      	strmi	r3, [r0, #0]
 800867e:	2201      	movmi	r2, #1
 8008680:	bf5c      	itt	pl
 8008682:	6003      	strpl	r3, [r0, #0]
 8008684:	2202      	movpl	r2, #2
 8008686:	4610      	mov	r0, r2
 8008688:	4770      	bx	lr
 800868a:	b299      	uxth	r1, r3
 800868c:	b909      	cbnz	r1, 8008692 <__lo0bits+0x2a>
 800868e:	0c1b      	lsrs	r3, r3, #16
 8008690:	2210      	movs	r2, #16
 8008692:	b2d9      	uxtb	r1, r3
 8008694:	b909      	cbnz	r1, 800869a <__lo0bits+0x32>
 8008696:	3208      	adds	r2, #8
 8008698:	0a1b      	lsrs	r3, r3, #8
 800869a:	0719      	lsls	r1, r3, #28
 800869c:	bf04      	itt	eq
 800869e:	091b      	lsreq	r3, r3, #4
 80086a0:	3204      	addeq	r2, #4
 80086a2:	0799      	lsls	r1, r3, #30
 80086a4:	bf04      	itt	eq
 80086a6:	089b      	lsreq	r3, r3, #2
 80086a8:	3202      	addeq	r2, #2
 80086aa:	07d9      	lsls	r1, r3, #31
 80086ac:	d403      	bmi.n	80086b6 <__lo0bits+0x4e>
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	f102 0201 	add.w	r2, r2, #1
 80086b4:	d003      	beq.n	80086be <__lo0bits+0x56>
 80086b6:	6003      	str	r3, [r0, #0]
 80086b8:	e7e5      	b.n	8008686 <__lo0bits+0x1e>
 80086ba:	2200      	movs	r2, #0
 80086bc:	e7e3      	b.n	8008686 <__lo0bits+0x1e>
 80086be:	2220      	movs	r2, #32
 80086c0:	e7e1      	b.n	8008686 <__lo0bits+0x1e>
	...

080086c4 <__i2b>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	460c      	mov	r4, r1
 80086c8:	2101      	movs	r1, #1
 80086ca:	f7ff ff05 	bl	80084d8 <_Balloc>
 80086ce:	4602      	mov	r2, r0
 80086d0:	b928      	cbnz	r0, 80086de <__i2b+0x1a>
 80086d2:	4b05      	ldr	r3, [pc, #20]	; (80086e8 <__i2b+0x24>)
 80086d4:	4805      	ldr	r0, [pc, #20]	; (80086ec <__i2b+0x28>)
 80086d6:	f240 1145 	movw	r1, #325	; 0x145
 80086da:	f000 fb5b 	bl	8008d94 <__assert_func>
 80086de:	2301      	movs	r3, #1
 80086e0:	6144      	str	r4, [r0, #20]
 80086e2:	6103      	str	r3, [r0, #16]
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	bf00      	nop
 80086e8:	08009644 	.word	0x08009644
 80086ec:	08009666 	.word	0x08009666

080086f0 <__multiply>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	4691      	mov	r9, r2
 80086f6:	690a      	ldr	r2, [r1, #16]
 80086f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	bfb8      	it	lt
 8008700:	460b      	movlt	r3, r1
 8008702:	460c      	mov	r4, r1
 8008704:	bfbc      	itt	lt
 8008706:	464c      	movlt	r4, r9
 8008708:	4699      	movlt	r9, r3
 800870a:	6927      	ldr	r7, [r4, #16]
 800870c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008710:	68a3      	ldr	r3, [r4, #8]
 8008712:	6861      	ldr	r1, [r4, #4]
 8008714:	eb07 060a 	add.w	r6, r7, sl
 8008718:	42b3      	cmp	r3, r6
 800871a:	b085      	sub	sp, #20
 800871c:	bfb8      	it	lt
 800871e:	3101      	addlt	r1, #1
 8008720:	f7ff feda 	bl	80084d8 <_Balloc>
 8008724:	b930      	cbnz	r0, 8008734 <__multiply+0x44>
 8008726:	4602      	mov	r2, r0
 8008728:	4b44      	ldr	r3, [pc, #272]	; (800883c <__multiply+0x14c>)
 800872a:	4845      	ldr	r0, [pc, #276]	; (8008840 <__multiply+0x150>)
 800872c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008730:	f000 fb30 	bl	8008d94 <__assert_func>
 8008734:	f100 0514 	add.w	r5, r0, #20
 8008738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800873c:	462b      	mov	r3, r5
 800873e:	2200      	movs	r2, #0
 8008740:	4543      	cmp	r3, r8
 8008742:	d321      	bcc.n	8008788 <__multiply+0x98>
 8008744:	f104 0314 	add.w	r3, r4, #20
 8008748:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800874c:	f109 0314 	add.w	r3, r9, #20
 8008750:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008754:	9202      	str	r2, [sp, #8]
 8008756:	1b3a      	subs	r2, r7, r4
 8008758:	3a15      	subs	r2, #21
 800875a:	f022 0203 	bic.w	r2, r2, #3
 800875e:	3204      	adds	r2, #4
 8008760:	f104 0115 	add.w	r1, r4, #21
 8008764:	428f      	cmp	r7, r1
 8008766:	bf38      	it	cc
 8008768:	2204      	movcc	r2, #4
 800876a:	9201      	str	r2, [sp, #4]
 800876c:	9a02      	ldr	r2, [sp, #8]
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	429a      	cmp	r2, r3
 8008772:	d80c      	bhi.n	800878e <__multiply+0x9e>
 8008774:	2e00      	cmp	r6, #0
 8008776:	dd03      	ble.n	8008780 <__multiply+0x90>
 8008778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800877c:	2b00      	cmp	r3, #0
 800877e:	d05b      	beq.n	8008838 <__multiply+0x148>
 8008780:	6106      	str	r6, [r0, #16]
 8008782:	b005      	add	sp, #20
 8008784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008788:	f843 2b04 	str.w	r2, [r3], #4
 800878c:	e7d8      	b.n	8008740 <__multiply+0x50>
 800878e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008792:	f1ba 0f00 	cmp.w	sl, #0
 8008796:	d024      	beq.n	80087e2 <__multiply+0xf2>
 8008798:	f104 0e14 	add.w	lr, r4, #20
 800879c:	46a9      	mov	r9, r5
 800879e:	f04f 0c00 	mov.w	ip, #0
 80087a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80087a6:	f8d9 1000 	ldr.w	r1, [r9]
 80087aa:	fa1f fb82 	uxth.w	fp, r2
 80087ae:	b289      	uxth	r1, r1
 80087b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80087b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087b8:	f8d9 2000 	ldr.w	r2, [r9]
 80087bc:	4461      	add	r1, ip
 80087be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80087c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087ca:	b289      	uxth	r1, r1
 80087cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087d0:	4577      	cmp	r7, lr
 80087d2:	f849 1b04 	str.w	r1, [r9], #4
 80087d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087da:	d8e2      	bhi.n	80087a2 <__multiply+0xb2>
 80087dc:	9a01      	ldr	r2, [sp, #4]
 80087de:	f845 c002 	str.w	ip, [r5, r2]
 80087e2:	9a03      	ldr	r2, [sp, #12]
 80087e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087e8:	3304      	adds	r3, #4
 80087ea:	f1b9 0f00 	cmp.w	r9, #0
 80087ee:	d021      	beq.n	8008834 <__multiply+0x144>
 80087f0:	6829      	ldr	r1, [r5, #0]
 80087f2:	f104 0c14 	add.w	ip, r4, #20
 80087f6:	46ae      	mov	lr, r5
 80087f8:	f04f 0a00 	mov.w	sl, #0
 80087fc:	f8bc b000 	ldrh.w	fp, [ip]
 8008800:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008804:	fb09 220b 	mla	r2, r9, fp, r2
 8008808:	4452      	add	r2, sl
 800880a:	b289      	uxth	r1, r1
 800880c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008810:	f84e 1b04 	str.w	r1, [lr], #4
 8008814:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008818:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800881c:	f8be 1000 	ldrh.w	r1, [lr]
 8008820:	fb09 110a 	mla	r1, r9, sl, r1
 8008824:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008828:	4567      	cmp	r7, ip
 800882a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800882e:	d8e5      	bhi.n	80087fc <__multiply+0x10c>
 8008830:	9a01      	ldr	r2, [sp, #4]
 8008832:	50a9      	str	r1, [r5, r2]
 8008834:	3504      	adds	r5, #4
 8008836:	e799      	b.n	800876c <__multiply+0x7c>
 8008838:	3e01      	subs	r6, #1
 800883a:	e79b      	b.n	8008774 <__multiply+0x84>
 800883c:	08009644 	.word	0x08009644
 8008840:	08009666 	.word	0x08009666

08008844 <__pow5mult>:
 8008844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008848:	4615      	mov	r5, r2
 800884a:	f012 0203 	ands.w	r2, r2, #3
 800884e:	4606      	mov	r6, r0
 8008850:	460f      	mov	r7, r1
 8008852:	d007      	beq.n	8008864 <__pow5mult+0x20>
 8008854:	4c25      	ldr	r4, [pc, #148]	; (80088ec <__pow5mult+0xa8>)
 8008856:	3a01      	subs	r2, #1
 8008858:	2300      	movs	r3, #0
 800885a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800885e:	f7ff fe9d 	bl	800859c <__multadd>
 8008862:	4607      	mov	r7, r0
 8008864:	10ad      	asrs	r5, r5, #2
 8008866:	d03d      	beq.n	80088e4 <__pow5mult+0xa0>
 8008868:	69f4      	ldr	r4, [r6, #28]
 800886a:	b97c      	cbnz	r4, 800888c <__pow5mult+0x48>
 800886c:	2010      	movs	r0, #16
 800886e:	f7ff fcd1 	bl	8008214 <malloc>
 8008872:	4602      	mov	r2, r0
 8008874:	61f0      	str	r0, [r6, #28]
 8008876:	b928      	cbnz	r0, 8008884 <__pow5mult+0x40>
 8008878:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <__pow5mult+0xac>)
 800887a:	481e      	ldr	r0, [pc, #120]	; (80088f4 <__pow5mult+0xb0>)
 800887c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008880:	f000 fa88 	bl	8008d94 <__assert_func>
 8008884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008888:	6004      	str	r4, [r0, #0]
 800888a:	60c4      	str	r4, [r0, #12]
 800888c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008894:	b94c      	cbnz	r4, 80088aa <__pow5mult+0x66>
 8008896:	f240 2171 	movw	r1, #625	; 0x271
 800889a:	4630      	mov	r0, r6
 800889c:	f7ff ff12 	bl	80086c4 <__i2b>
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80088a6:	4604      	mov	r4, r0
 80088a8:	6003      	str	r3, [r0, #0]
 80088aa:	f04f 0900 	mov.w	r9, #0
 80088ae:	07eb      	lsls	r3, r5, #31
 80088b0:	d50a      	bpl.n	80088c8 <__pow5mult+0x84>
 80088b2:	4639      	mov	r1, r7
 80088b4:	4622      	mov	r2, r4
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff ff1a 	bl	80086f0 <__multiply>
 80088bc:	4639      	mov	r1, r7
 80088be:	4680      	mov	r8, r0
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff fe49 	bl	8008558 <_Bfree>
 80088c6:	4647      	mov	r7, r8
 80088c8:	106d      	asrs	r5, r5, #1
 80088ca:	d00b      	beq.n	80088e4 <__pow5mult+0xa0>
 80088cc:	6820      	ldr	r0, [r4, #0]
 80088ce:	b938      	cbnz	r0, 80088e0 <__pow5mult+0x9c>
 80088d0:	4622      	mov	r2, r4
 80088d2:	4621      	mov	r1, r4
 80088d4:	4630      	mov	r0, r6
 80088d6:	f7ff ff0b 	bl	80086f0 <__multiply>
 80088da:	6020      	str	r0, [r4, #0]
 80088dc:	f8c0 9000 	str.w	r9, [r0]
 80088e0:	4604      	mov	r4, r0
 80088e2:	e7e4      	b.n	80088ae <__pow5mult+0x6a>
 80088e4:	4638      	mov	r0, r7
 80088e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ea:	bf00      	nop
 80088ec:	080097b0 	.word	0x080097b0
 80088f0:	080095d5 	.word	0x080095d5
 80088f4:	08009666 	.word	0x08009666

080088f8 <__lshift>:
 80088f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	6849      	ldr	r1, [r1, #4]
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	4607      	mov	r7, r0
 800890a:	4691      	mov	r9, r2
 800890c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008910:	f108 0601 	add.w	r6, r8, #1
 8008914:	42b3      	cmp	r3, r6
 8008916:	db0b      	blt.n	8008930 <__lshift+0x38>
 8008918:	4638      	mov	r0, r7
 800891a:	f7ff fddd 	bl	80084d8 <_Balloc>
 800891e:	4605      	mov	r5, r0
 8008920:	b948      	cbnz	r0, 8008936 <__lshift+0x3e>
 8008922:	4602      	mov	r2, r0
 8008924:	4b28      	ldr	r3, [pc, #160]	; (80089c8 <__lshift+0xd0>)
 8008926:	4829      	ldr	r0, [pc, #164]	; (80089cc <__lshift+0xd4>)
 8008928:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800892c:	f000 fa32 	bl	8008d94 <__assert_func>
 8008930:	3101      	adds	r1, #1
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	e7ee      	b.n	8008914 <__lshift+0x1c>
 8008936:	2300      	movs	r3, #0
 8008938:	f100 0114 	add.w	r1, r0, #20
 800893c:	f100 0210 	add.w	r2, r0, #16
 8008940:	4618      	mov	r0, r3
 8008942:	4553      	cmp	r3, sl
 8008944:	db33      	blt.n	80089ae <__lshift+0xb6>
 8008946:	6920      	ldr	r0, [r4, #16]
 8008948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800894c:	f104 0314 	add.w	r3, r4, #20
 8008950:	f019 091f 	ands.w	r9, r9, #31
 8008954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008958:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800895c:	d02b      	beq.n	80089b6 <__lshift+0xbe>
 800895e:	f1c9 0e20 	rsb	lr, r9, #32
 8008962:	468a      	mov	sl, r1
 8008964:	2200      	movs	r2, #0
 8008966:	6818      	ldr	r0, [r3, #0]
 8008968:	fa00 f009 	lsl.w	r0, r0, r9
 800896c:	4310      	orrs	r0, r2
 800896e:	f84a 0b04 	str.w	r0, [sl], #4
 8008972:	f853 2b04 	ldr.w	r2, [r3], #4
 8008976:	459c      	cmp	ip, r3
 8008978:	fa22 f20e 	lsr.w	r2, r2, lr
 800897c:	d8f3      	bhi.n	8008966 <__lshift+0x6e>
 800897e:	ebac 0304 	sub.w	r3, ip, r4
 8008982:	3b15      	subs	r3, #21
 8008984:	f023 0303 	bic.w	r3, r3, #3
 8008988:	3304      	adds	r3, #4
 800898a:	f104 0015 	add.w	r0, r4, #21
 800898e:	4584      	cmp	ip, r0
 8008990:	bf38      	it	cc
 8008992:	2304      	movcc	r3, #4
 8008994:	50ca      	str	r2, [r1, r3]
 8008996:	b10a      	cbz	r2, 800899c <__lshift+0xa4>
 8008998:	f108 0602 	add.w	r6, r8, #2
 800899c:	3e01      	subs	r6, #1
 800899e:	4638      	mov	r0, r7
 80089a0:	612e      	str	r6, [r5, #16]
 80089a2:	4621      	mov	r1, r4
 80089a4:	f7ff fdd8 	bl	8008558 <_Bfree>
 80089a8:	4628      	mov	r0, r5
 80089aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80089b2:	3301      	adds	r3, #1
 80089b4:	e7c5      	b.n	8008942 <__lshift+0x4a>
 80089b6:	3904      	subs	r1, #4
 80089b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80089c0:	459c      	cmp	ip, r3
 80089c2:	d8f9      	bhi.n	80089b8 <__lshift+0xc0>
 80089c4:	e7ea      	b.n	800899c <__lshift+0xa4>
 80089c6:	bf00      	nop
 80089c8:	08009644 	.word	0x08009644
 80089cc:	08009666 	.word	0x08009666

080089d0 <__mcmp>:
 80089d0:	b530      	push	{r4, r5, lr}
 80089d2:	6902      	ldr	r2, [r0, #16]
 80089d4:	690c      	ldr	r4, [r1, #16]
 80089d6:	1b12      	subs	r2, r2, r4
 80089d8:	d10e      	bne.n	80089f8 <__mcmp+0x28>
 80089da:	f100 0314 	add.w	r3, r0, #20
 80089de:	3114      	adds	r1, #20
 80089e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089f0:	42a5      	cmp	r5, r4
 80089f2:	d003      	beq.n	80089fc <__mcmp+0x2c>
 80089f4:	d305      	bcc.n	8008a02 <__mcmp+0x32>
 80089f6:	2201      	movs	r2, #1
 80089f8:	4610      	mov	r0, r2
 80089fa:	bd30      	pop	{r4, r5, pc}
 80089fc:	4283      	cmp	r3, r0
 80089fe:	d3f3      	bcc.n	80089e8 <__mcmp+0x18>
 8008a00:	e7fa      	b.n	80089f8 <__mcmp+0x28>
 8008a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a06:	e7f7      	b.n	80089f8 <__mcmp+0x28>

08008a08 <__mdiff>:
 8008a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	4606      	mov	r6, r0
 8008a10:	4611      	mov	r1, r2
 8008a12:	4620      	mov	r0, r4
 8008a14:	4690      	mov	r8, r2
 8008a16:	f7ff ffdb 	bl	80089d0 <__mcmp>
 8008a1a:	1e05      	subs	r5, r0, #0
 8008a1c:	d110      	bne.n	8008a40 <__mdiff+0x38>
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4630      	mov	r0, r6
 8008a22:	f7ff fd59 	bl	80084d8 <_Balloc>
 8008a26:	b930      	cbnz	r0, 8008a36 <__mdiff+0x2e>
 8008a28:	4b3a      	ldr	r3, [pc, #232]	; (8008b14 <__mdiff+0x10c>)
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	f240 2137 	movw	r1, #567	; 0x237
 8008a30:	4839      	ldr	r0, [pc, #228]	; (8008b18 <__mdiff+0x110>)
 8008a32:	f000 f9af 	bl	8008d94 <__assert_func>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a40:	bfa4      	itt	ge
 8008a42:	4643      	movge	r3, r8
 8008a44:	46a0      	movge	r8, r4
 8008a46:	4630      	mov	r0, r6
 8008a48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a4c:	bfa6      	itte	ge
 8008a4e:	461c      	movge	r4, r3
 8008a50:	2500      	movge	r5, #0
 8008a52:	2501      	movlt	r5, #1
 8008a54:	f7ff fd40 	bl	80084d8 <_Balloc>
 8008a58:	b920      	cbnz	r0, 8008a64 <__mdiff+0x5c>
 8008a5a:	4b2e      	ldr	r3, [pc, #184]	; (8008b14 <__mdiff+0x10c>)
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	f240 2145 	movw	r1, #581	; 0x245
 8008a62:	e7e5      	b.n	8008a30 <__mdiff+0x28>
 8008a64:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a68:	6926      	ldr	r6, [r4, #16]
 8008a6a:	60c5      	str	r5, [r0, #12]
 8008a6c:	f104 0914 	add.w	r9, r4, #20
 8008a70:	f108 0514 	add.w	r5, r8, #20
 8008a74:	f100 0e14 	add.w	lr, r0, #20
 8008a78:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a80:	f108 0210 	add.w	r2, r8, #16
 8008a84:	46f2      	mov	sl, lr
 8008a86:	2100      	movs	r1, #0
 8008a88:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a8c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a90:	fa11 f88b 	uxtah	r8, r1, fp
 8008a94:	b299      	uxth	r1, r3
 8008a96:	0c1b      	lsrs	r3, r3, #16
 8008a98:	eba8 0801 	sub.w	r8, r8, r1
 8008a9c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008aa0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008aa4:	fa1f f888 	uxth.w	r8, r8
 8008aa8:	1419      	asrs	r1, r3, #16
 8008aaa:	454e      	cmp	r6, r9
 8008aac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ab0:	f84a 3b04 	str.w	r3, [sl], #4
 8008ab4:	d8e8      	bhi.n	8008a88 <__mdiff+0x80>
 8008ab6:	1b33      	subs	r3, r6, r4
 8008ab8:	3b15      	subs	r3, #21
 8008aba:	f023 0303 	bic.w	r3, r3, #3
 8008abe:	3304      	adds	r3, #4
 8008ac0:	3415      	adds	r4, #21
 8008ac2:	42a6      	cmp	r6, r4
 8008ac4:	bf38      	it	cc
 8008ac6:	2304      	movcc	r3, #4
 8008ac8:	441d      	add	r5, r3
 8008aca:	4473      	add	r3, lr
 8008acc:	469e      	mov	lr, r3
 8008ace:	462e      	mov	r6, r5
 8008ad0:	4566      	cmp	r6, ip
 8008ad2:	d30e      	bcc.n	8008af2 <__mdiff+0xea>
 8008ad4:	f10c 0203 	add.w	r2, ip, #3
 8008ad8:	1b52      	subs	r2, r2, r5
 8008ada:	f022 0203 	bic.w	r2, r2, #3
 8008ade:	3d03      	subs	r5, #3
 8008ae0:	45ac      	cmp	ip, r5
 8008ae2:	bf38      	it	cc
 8008ae4:	2200      	movcc	r2, #0
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008aec:	b17a      	cbz	r2, 8008b0e <__mdiff+0x106>
 8008aee:	6107      	str	r7, [r0, #16]
 8008af0:	e7a4      	b.n	8008a3c <__mdiff+0x34>
 8008af2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008af6:	fa11 f288 	uxtah	r2, r1, r8
 8008afa:	1414      	asrs	r4, r2, #16
 8008afc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b00:	b292      	uxth	r2, r2
 8008b02:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b06:	f84e 2b04 	str.w	r2, [lr], #4
 8008b0a:	1421      	asrs	r1, r4, #16
 8008b0c:	e7e0      	b.n	8008ad0 <__mdiff+0xc8>
 8008b0e:	3f01      	subs	r7, #1
 8008b10:	e7ea      	b.n	8008ae8 <__mdiff+0xe0>
 8008b12:	bf00      	nop
 8008b14:	08009644 	.word	0x08009644
 8008b18:	08009666 	.word	0x08009666

08008b1c <__d2b>:
 8008b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	460f      	mov	r7, r1
 8008b22:	2101      	movs	r1, #1
 8008b24:	ec59 8b10 	vmov	r8, r9, d0
 8008b28:	4616      	mov	r6, r2
 8008b2a:	f7ff fcd5 	bl	80084d8 <_Balloc>
 8008b2e:	4604      	mov	r4, r0
 8008b30:	b930      	cbnz	r0, 8008b40 <__d2b+0x24>
 8008b32:	4602      	mov	r2, r0
 8008b34:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <__d2b+0xac>)
 8008b36:	4825      	ldr	r0, [pc, #148]	; (8008bcc <__d2b+0xb0>)
 8008b38:	f240 310f 	movw	r1, #783	; 0x30f
 8008b3c:	f000 f92a 	bl	8008d94 <__assert_func>
 8008b40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b48:	bb2d      	cbnz	r5, 8008b96 <__d2b+0x7a>
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b50:	d026      	beq.n	8008ba0 <__d2b+0x84>
 8008b52:	4668      	mov	r0, sp
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	f7ff fd87 	bl	8008668 <__lo0bits>
 8008b5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b5e:	b1e8      	cbz	r0, 8008b9c <__d2b+0x80>
 8008b60:	f1c0 0320 	rsb	r3, r0, #32
 8008b64:	fa02 f303 	lsl.w	r3, r2, r3
 8008b68:	430b      	orrs	r3, r1
 8008b6a:	40c2      	lsrs	r2, r0
 8008b6c:	6163      	str	r3, [r4, #20]
 8008b6e:	9201      	str	r2, [sp, #4]
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	61a3      	str	r3, [r4, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bf14      	ite	ne
 8008b78:	2202      	movne	r2, #2
 8008b7a:	2201      	moveq	r2, #1
 8008b7c:	6122      	str	r2, [r4, #16]
 8008b7e:	b1bd      	cbz	r5, 8008bb0 <__d2b+0x94>
 8008b80:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b84:	4405      	add	r5, r0
 8008b86:	603d      	str	r5, [r7, #0]
 8008b88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b8c:	6030      	str	r0, [r6, #0]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	b003      	add	sp, #12
 8008b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b9a:	e7d6      	b.n	8008b4a <__d2b+0x2e>
 8008b9c:	6161      	str	r1, [r4, #20]
 8008b9e:	e7e7      	b.n	8008b70 <__d2b+0x54>
 8008ba0:	a801      	add	r0, sp, #4
 8008ba2:	f7ff fd61 	bl	8008668 <__lo0bits>
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	6163      	str	r3, [r4, #20]
 8008baa:	3020      	adds	r0, #32
 8008bac:	2201      	movs	r2, #1
 8008bae:	e7e5      	b.n	8008b7c <__d2b+0x60>
 8008bb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bb8:	6038      	str	r0, [r7, #0]
 8008bba:	6918      	ldr	r0, [r3, #16]
 8008bbc:	f7ff fd34 	bl	8008628 <__hi0bits>
 8008bc0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bc4:	e7e2      	b.n	8008b8c <__d2b+0x70>
 8008bc6:	bf00      	nop
 8008bc8:	08009644 	.word	0x08009644
 8008bcc:	08009666 	.word	0x08009666

08008bd0 <__sread>:
 8008bd0:	b510      	push	{r4, lr}
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd8:	f000 f8a8 	bl	8008d2c <_read_r>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	bfab      	itete	ge
 8008be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008be2:	89a3      	ldrhlt	r3, [r4, #12]
 8008be4:	181b      	addge	r3, r3, r0
 8008be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bea:	bfac      	ite	ge
 8008bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bee:	81a3      	strhlt	r3, [r4, #12]
 8008bf0:	bd10      	pop	{r4, pc}

08008bf2 <__swrite>:
 8008bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf6:	461f      	mov	r7, r3
 8008bf8:	898b      	ldrh	r3, [r1, #12]
 8008bfa:	05db      	lsls	r3, r3, #23
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	4616      	mov	r6, r2
 8008c02:	d505      	bpl.n	8008c10 <__swrite+0x1e>
 8008c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c08:	2302      	movs	r3, #2
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f000 f87c 	bl	8008d08 <_lseek_r>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	463b      	mov	r3, r7
 8008c20:	4628      	mov	r0, r5
 8008c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c26:	f000 b8a3 	b.w	8008d70 <_write_r>

08008c2a <__sseek>:
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c32:	f000 f869 	bl	8008d08 <_lseek_r>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	bf15      	itete	ne
 8008c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c46:	81a3      	strheq	r3, [r4, #12]
 8008c48:	bf18      	it	ne
 8008c4a:	81a3      	strhne	r3, [r4, #12]
 8008c4c:	bd10      	pop	{r4, pc}

08008c4e <__sclose>:
 8008c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c52:	f000 b849 	b.w	8008ce8 <_close_r>

08008c56 <_realloc_r>:
 8008c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5a:	4680      	mov	r8, r0
 8008c5c:	4614      	mov	r4, r2
 8008c5e:	460e      	mov	r6, r1
 8008c60:	b921      	cbnz	r1, 8008c6c <_realloc_r+0x16>
 8008c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c66:	4611      	mov	r1, r2
 8008c68:	f7ff bafc 	b.w	8008264 <_malloc_r>
 8008c6c:	b92a      	cbnz	r2, 8008c7a <_realloc_r+0x24>
 8008c6e:	f000 f8c5 	bl	8008dfc <_free_r>
 8008c72:	4625      	mov	r5, r4
 8008c74:	4628      	mov	r0, r5
 8008c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7a:	f000 f91d 	bl	8008eb8 <_malloc_usable_size_r>
 8008c7e:	4284      	cmp	r4, r0
 8008c80:	4607      	mov	r7, r0
 8008c82:	d802      	bhi.n	8008c8a <_realloc_r+0x34>
 8008c84:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c88:	d812      	bhi.n	8008cb0 <_realloc_r+0x5a>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4640      	mov	r0, r8
 8008c8e:	f7ff fae9 	bl	8008264 <_malloc_r>
 8008c92:	4605      	mov	r5, r0
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d0ed      	beq.n	8008c74 <_realloc_r+0x1e>
 8008c98:	42bc      	cmp	r4, r7
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	bf28      	it	cs
 8008ca0:	463a      	movcs	r2, r7
 8008ca2:	f7fe fad4 	bl	800724e <memcpy>
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4640      	mov	r0, r8
 8008caa:	f000 f8a7 	bl	8008dfc <_free_r>
 8008cae:	e7e1      	b.n	8008c74 <_realloc_r+0x1e>
 8008cb0:	4635      	mov	r5, r6
 8008cb2:	e7df      	b.n	8008c74 <_realloc_r+0x1e>

08008cb4 <memmove>:
 8008cb4:	4288      	cmp	r0, r1
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	eb01 0402 	add.w	r4, r1, r2
 8008cbc:	d902      	bls.n	8008cc4 <memmove+0x10>
 8008cbe:	4284      	cmp	r4, r0
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	d807      	bhi.n	8008cd4 <memmove+0x20>
 8008cc4:	1e43      	subs	r3, r0, #1
 8008cc6:	42a1      	cmp	r1, r4
 8008cc8:	d008      	beq.n	8008cdc <memmove+0x28>
 8008cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cd2:	e7f8      	b.n	8008cc6 <memmove+0x12>
 8008cd4:	4402      	add	r2, r0
 8008cd6:	4601      	mov	r1, r0
 8008cd8:	428a      	cmp	r2, r1
 8008cda:	d100      	bne.n	8008cde <memmove+0x2a>
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ce6:	e7f7      	b.n	8008cd8 <memmove+0x24>

08008ce8 <_close_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	; (8008d04 <_close_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f9 f893 	bl	8001e1e <_close>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_close_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_close_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	200008a0 	.word	0x200008a0

08008d08 <_lseek_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d07      	ldr	r5, [pc, #28]	; (8008d28 <_lseek_r+0x20>)
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4611      	mov	r1, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	602a      	str	r2, [r5, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f7f9 f8a8 	bl	8001e6c <_lseek>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_lseek_r+0x1e>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_lseek_r+0x1e>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	200008a0 	.word	0x200008a0

08008d2c <_read_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d07      	ldr	r5, [pc, #28]	; (8008d4c <_read_r+0x20>)
 8008d30:	4604      	mov	r4, r0
 8008d32:	4608      	mov	r0, r1
 8008d34:	4611      	mov	r1, r2
 8008d36:	2200      	movs	r2, #0
 8008d38:	602a      	str	r2, [r5, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f7f9 f836 	bl	8001dac <_read>
 8008d40:	1c43      	adds	r3, r0, #1
 8008d42:	d102      	bne.n	8008d4a <_read_r+0x1e>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	b103      	cbz	r3, 8008d4a <_read_r+0x1e>
 8008d48:	6023      	str	r3, [r4, #0]
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	200008a0 	.word	0x200008a0

08008d50 <_sbrk_r>:
 8008d50:	b538      	push	{r3, r4, r5, lr}
 8008d52:	4d06      	ldr	r5, [pc, #24]	; (8008d6c <_sbrk_r+0x1c>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	4604      	mov	r4, r0
 8008d58:	4608      	mov	r0, r1
 8008d5a:	602b      	str	r3, [r5, #0]
 8008d5c:	f7f9 f894 	bl	8001e88 <_sbrk>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_sbrk_r+0x1a>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_sbrk_r+0x1a>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	200008a0 	.word	0x200008a0

08008d70 <_write_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d07      	ldr	r5, [pc, #28]	; (8008d90 <_write_r+0x20>)
 8008d74:	4604      	mov	r4, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	4611      	mov	r1, r2
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7f9 f831 	bl	8001de6 <_write>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_write_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_write_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	200008a0 	.word	0x200008a0

08008d94 <__assert_func>:
 8008d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d96:	4614      	mov	r4, r2
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <__assert_func+0x2c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4605      	mov	r5, r0
 8008da0:	68d8      	ldr	r0, [r3, #12]
 8008da2:	b14c      	cbz	r4, 8008db8 <__assert_func+0x24>
 8008da4:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <__assert_func+0x30>)
 8008da6:	9100      	str	r1, [sp, #0]
 8008da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dac:	4906      	ldr	r1, [pc, #24]	; (8008dc8 <__assert_func+0x34>)
 8008dae:	462b      	mov	r3, r5
 8008db0:	f000 f88a 	bl	8008ec8 <fiprintf>
 8008db4:	f000 f8a7 	bl	8008f06 <abort>
 8008db8:	4b04      	ldr	r3, [pc, #16]	; (8008dcc <__assert_func+0x38>)
 8008dba:	461c      	mov	r4, r3
 8008dbc:	e7f3      	b.n	8008da6 <__assert_func+0x12>
 8008dbe:	bf00      	nop
 8008dc0:	2000006c 	.word	0x2000006c
 8008dc4:	080098c7 	.word	0x080098c7
 8008dc8:	080098d4 	.word	0x080098d4
 8008dcc:	08009902 	.word	0x08009902

08008dd0 <_calloc_r>:
 8008dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dd2:	fba1 2402 	umull	r2, r4, r1, r2
 8008dd6:	b94c      	cbnz	r4, 8008dec <_calloc_r+0x1c>
 8008dd8:	4611      	mov	r1, r2
 8008dda:	9201      	str	r2, [sp, #4]
 8008ddc:	f7ff fa42 	bl	8008264 <_malloc_r>
 8008de0:	9a01      	ldr	r2, [sp, #4]
 8008de2:	4605      	mov	r5, r0
 8008de4:	b930      	cbnz	r0, 8008df4 <_calloc_r+0x24>
 8008de6:	4628      	mov	r0, r5
 8008de8:	b003      	add	sp, #12
 8008dea:	bd30      	pop	{r4, r5, pc}
 8008dec:	220c      	movs	r2, #12
 8008dee:	6002      	str	r2, [r0, #0]
 8008df0:	2500      	movs	r5, #0
 8008df2:	e7f8      	b.n	8008de6 <_calloc_r+0x16>
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7fe f9f1 	bl	80071dc <memset>
 8008dfa:	e7f4      	b.n	8008de6 <_calloc_r+0x16>

08008dfc <_free_r>:
 8008dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	d044      	beq.n	8008e8c <_free_r+0x90>
 8008e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e06:	9001      	str	r0, [sp, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e0e:	bfb8      	it	lt
 8008e10:	18e4      	addlt	r4, r4, r3
 8008e12:	f7ff fb55 	bl	80084c0 <__malloc_lock>
 8008e16:	4a1e      	ldr	r2, [pc, #120]	; (8008e90 <_free_r+0x94>)
 8008e18:	9801      	ldr	r0, [sp, #4]
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	b933      	cbnz	r3, 8008e2c <_free_r+0x30>
 8008e1e:	6063      	str	r3, [r4, #4]
 8008e20:	6014      	str	r4, [r2, #0]
 8008e22:	b003      	add	sp, #12
 8008e24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e28:	f7ff bb50 	b.w	80084cc <__malloc_unlock>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d908      	bls.n	8008e42 <_free_r+0x46>
 8008e30:	6825      	ldr	r5, [r4, #0]
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf01      	itttt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	1949      	addeq	r1, r1, r5
 8008e3e:	6021      	streq	r1, [r4, #0]
 8008e40:	e7ed      	b.n	8008e1e <_free_r+0x22>
 8008e42:	461a      	mov	r2, r3
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	b10b      	cbz	r3, 8008e4c <_free_r+0x50>
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	d9fa      	bls.n	8008e42 <_free_r+0x46>
 8008e4c:	6811      	ldr	r1, [r2, #0]
 8008e4e:	1855      	adds	r5, r2, r1
 8008e50:	42a5      	cmp	r5, r4
 8008e52:	d10b      	bne.n	8008e6c <_free_r+0x70>
 8008e54:	6824      	ldr	r4, [r4, #0]
 8008e56:	4421      	add	r1, r4
 8008e58:	1854      	adds	r4, r2, r1
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	d1e0      	bne.n	8008e22 <_free_r+0x26>
 8008e60:	681c      	ldr	r4, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	6053      	str	r3, [r2, #4]
 8008e66:	440c      	add	r4, r1
 8008e68:	6014      	str	r4, [r2, #0]
 8008e6a:	e7da      	b.n	8008e22 <_free_r+0x26>
 8008e6c:	d902      	bls.n	8008e74 <_free_r+0x78>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	e7d6      	b.n	8008e22 <_free_r+0x26>
 8008e74:	6825      	ldr	r5, [r4, #0]
 8008e76:	1961      	adds	r1, r4, r5
 8008e78:	428b      	cmp	r3, r1
 8008e7a:	bf04      	itt	eq
 8008e7c:	6819      	ldreq	r1, [r3, #0]
 8008e7e:	685b      	ldreq	r3, [r3, #4]
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	bf04      	itt	eq
 8008e84:	1949      	addeq	r1, r1, r5
 8008e86:	6021      	streq	r1, [r4, #0]
 8008e88:	6054      	str	r4, [r2, #4]
 8008e8a:	e7ca      	b.n	8008e22 <_free_r+0x26>
 8008e8c:	b003      	add	sp, #12
 8008e8e:	bd30      	pop	{r4, r5, pc}
 8008e90:	20000898 	.word	0x20000898

08008e94 <__ascii_mbtowc>:
 8008e94:	b082      	sub	sp, #8
 8008e96:	b901      	cbnz	r1, 8008e9a <__ascii_mbtowc+0x6>
 8008e98:	a901      	add	r1, sp, #4
 8008e9a:	b142      	cbz	r2, 8008eae <__ascii_mbtowc+0x1a>
 8008e9c:	b14b      	cbz	r3, 8008eb2 <__ascii_mbtowc+0x1e>
 8008e9e:	7813      	ldrb	r3, [r2, #0]
 8008ea0:	600b      	str	r3, [r1, #0]
 8008ea2:	7812      	ldrb	r2, [r2, #0]
 8008ea4:	1e10      	subs	r0, r2, #0
 8008ea6:	bf18      	it	ne
 8008ea8:	2001      	movne	r0, #1
 8008eaa:	b002      	add	sp, #8
 8008eac:	4770      	bx	lr
 8008eae:	4610      	mov	r0, r2
 8008eb0:	e7fb      	b.n	8008eaa <__ascii_mbtowc+0x16>
 8008eb2:	f06f 0001 	mvn.w	r0, #1
 8008eb6:	e7f8      	b.n	8008eaa <__ascii_mbtowc+0x16>

08008eb8 <_malloc_usable_size_r>:
 8008eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ebc:	1f18      	subs	r0, r3, #4
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bfbc      	itt	lt
 8008ec2:	580b      	ldrlt	r3, [r1, r0]
 8008ec4:	18c0      	addlt	r0, r0, r3
 8008ec6:	4770      	bx	lr

08008ec8 <fiprintf>:
 8008ec8:	b40e      	push	{r1, r2, r3}
 8008eca:	b503      	push	{r0, r1, lr}
 8008ecc:	4601      	mov	r1, r0
 8008ece:	ab03      	add	r3, sp, #12
 8008ed0:	4805      	ldr	r0, [pc, #20]	; (8008ee8 <fiprintf+0x20>)
 8008ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed6:	6800      	ldr	r0, [r0, #0]
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	f000 f845 	bl	8008f68 <_vfiprintf_r>
 8008ede:	b002      	add	sp, #8
 8008ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ee4:	b003      	add	sp, #12
 8008ee6:	4770      	bx	lr
 8008ee8:	2000006c 	.word	0x2000006c

08008eec <__ascii_wctomb>:
 8008eec:	b149      	cbz	r1, 8008f02 <__ascii_wctomb+0x16>
 8008eee:	2aff      	cmp	r2, #255	; 0xff
 8008ef0:	bf85      	ittet	hi
 8008ef2:	238a      	movhi	r3, #138	; 0x8a
 8008ef4:	6003      	strhi	r3, [r0, #0]
 8008ef6:	700a      	strbls	r2, [r1, #0]
 8008ef8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008efc:	bf98      	it	ls
 8008efe:	2001      	movls	r0, #1
 8008f00:	4770      	bx	lr
 8008f02:	4608      	mov	r0, r1
 8008f04:	4770      	bx	lr

08008f06 <abort>:
 8008f06:	b508      	push	{r3, lr}
 8008f08:	2006      	movs	r0, #6
 8008f0a:	f000 fa89 	bl	8009420 <raise>
 8008f0e:	2001      	movs	r0, #1
 8008f10:	f7f8 ff42 	bl	8001d98 <_exit>

08008f14 <__sfputc_r>:
 8008f14:	6893      	ldr	r3, [r2, #8]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	b410      	push	{r4}
 8008f1c:	6093      	str	r3, [r2, #8]
 8008f1e:	da08      	bge.n	8008f32 <__sfputc_r+0x1e>
 8008f20:	6994      	ldr	r4, [r2, #24]
 8008f22:	42a3      	cmp	r3, r4
 8008f24:	db01      	blt.n	8008f2a <__sfputc_r+0x16>
 8008f26:	290a      	cmp	r1, #10
 8008f28:	d103      	bne.n	8008f32 <__sfputc_r+0x1e>
 8008f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f2e:	f000 b935 	b.w	800919c <__swbuf_r>
 8008f32:	6813      	ldr	r3, [r2, #0]
 8008f34:	1c58      	adds	r0, r3, #1
 8008f36:	6010      	str	r0, [r2, #0]
 8008f38:	7019      	strb	r1, [r3, #0]
 8008f3a:	4608      	mov	r0, r1
 8008f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <__sfputs_r>:
 8008f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f44:	4606      	mov	r6, r0
 8008f46:	460f      	mov	r7, r1
 8008f48:	4614      	mov	r4, r2
 8008f4a:	18d5      	adds	r5, r2, r3
 8008f4c:	42ac      	cmp	r4, r5
 8008f4e:	d101      	bne.n	8008f54 <__sfputs_r+0x12>
 8008f50:	2000      	movs	r0, #0
 8008f52:	e007      	b.n	8008f64 <__sfputs_r+0x22>
 8008f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f58:	463a      	mov	r2, r7
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	f7ff ffda 	bl	8008f14 <__sfputc_r>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d1f3      	bne.n	8008f4c <__sfputs_r+0xa>
 8008f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f68 <_vfiprintf_r>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	460d      	mov	r5, r1
 8008f6e:	b09d      	sub	sp, #116	; 0x74
 8008f70:	4614      	mov	r4, r2
 8008f72:	4698      	mov	r8, r3
 8008f74:	4606      	mov	r6, r0
 8008f76:	b118      	cbz	r0, 8008f80 <_vfiprintf_r+0x18>
 8008f78:	6a03      	ldr	r3, [r0, #32]
 8008f7a:	b90b      	cbnz	r3, 8008f80 <_vfiprintf_r+0x18>
 8008f7c:	f7fe f8f8 	bl	8007170 <__sinit>
 8008f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	d405      	bmi.n	8008f92 <_vfiprintf_r+0x2a>
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	059a      	lsls	r2, r3, #22
 8008f8a:	d402      	bmi.n	8008f92 <_vfiprintf_r+0x2a>
 8008f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f8e:	f7fe f95c 	bl	800724a <__retarget_lock_acquire_recursive>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	071b      	lsls	r3, r3, #28
 8008f96:	d501      	bpl.n	8008f9c <_vfiprintf_r+0x34>
 8008f98:	692b      	ldr	r3, [r5, #16]
 8008f9a:	b99b      	cbnz	r3, 8008fc4 <_vfiprintf_r+0x5c>
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f000 f93a 	bl	8009218 <__swsetup_r>
 8008fa4:	b170      	cbz	r0, 8008fc4 <_vfiprintf_r+0x5c>
 8008fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa8:	07dc      	lsls	r4, r3, #31
 8008faa:	d504      	bpl.n	8008fb6 <_vfiprintf_r+0x4e>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fb0:	b01d      	add	sp, #116	; 0x74
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	89ab      	ldrh	r3, [r5, #12]
 8008fb8:	0598      	lsls	r0, r3, #22
 8008fba:	d4f7      	bmi.n	8008fac <_vfiprintf_r+0x44>
 8008fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fbe:	f7fe f945 	bl	800724c <__retarget_lock_release_recursive>
 8008fc2:	e7f3      	b.n	8008fac <_vfiprintf_r+0x44>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc8:	2320      	movs	r3, #32
 8008fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fd2:	2330      	movs	r3, #48	; 0x30
 8008fd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009188 <_vfiprintf_r+0x220>
 8008fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fdc:	f04f 0901 	mov.w	r9, #1
 8008fe0:	4623      	mov	r3, r4
 8008fe2:	469a      	mov	sl, r3
 8008fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe8:	b10a      	cbz	r2, 8008fee <_vfiprintf_r+0x86>
 8008fea:	2a25      	cmp	r2, #37	; 0x25
 8008fec:	d1f9      	bne.n	8008fe2 <_vfiprintf_r+0x7a>
 8008fee:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff2:	d00b      	beq.n	800900c <_vfiprintf_r+0xa4>
 8008ff4:	465b      	mov	r3, fp
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f7ff ffa1 	bl	8008f42 <__sfputs_r>
 8009000:	3001      	adds	r0, #1
 8009002:	f000 80a9 	beq.w	8009158 <_vfiprintf_r+0x1f0>
 8009006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009008:	445a      	add	r2, fp
 800900a:	9209      	str	r2, [sp, #36]	; 0x24
 800900c:	f89a 3000 	ldrb.w	r3, [sl]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 80a1 	beq.w	8009158 <_vfiprintf_r+0x1f0>
 8009016:	2300      	movs	r3, #0
 8009018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800901c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009020:	f10a 0a01 	add.w	sl, sl, #1
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	9307      	str	r3, [sp, #28]
 8009028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800902c:	931a      	str	r3, [sp, #104]	; 0x68
 800902e:	4654      	mov	r4, sl
 8009030:	2205      	movs	r2, #5
 8009032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009036:	4854      	ldr	r0, [pc, #336]	; (8009188 <_vfiprintf_r+0x220>)
 8009038:	f7f7 f8a2 	bl	8000180 <memchr>
 800903c:	9a04      	ldr	r2, [sp, #16]
 800903e:	b9d8      	cbnz	r0, 8009078 <_vfiprintf_r+0x110>
 8009040:	06d1      	lsls	r1, r2, #27
 8009042:	bf44      	itt	mi
 8009044:	2320      	movmi	r3, #32
 8009046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800904a:	0713      	lsls	r3, r2, #28
 800904c:	bf44      	itt	mi
 800904e:	232b      	movmi	r3, #43	; 0x2b
 8009050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009054:	f89a 3000 	ldrb.w	r3, [sl]
 8009058:	2b2a      	cmp	r3, #42	; 0x2a
 800905a:	d015      	beq.n	8009088 <_vfiprintf_r+0x120>
 800905c:	9a07      	ldr	r2, [sp, #28]
 800905e:	4654      	mov	r4, sl
 8009060:	2000      	movs	r0, #0
 8009062:	f04f 0c0a 	mov.w	ip, #10
 8009066:	4621      	mov	r1, r4
 8009068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800906c:	3b30      	subs	r3, #48	; 0x30
 800906e:	2b09      	cmp	r3, #9
 8009070:	d94d      	bls.n	800910e <_vfiprintf_r+0x1a6>
 8009072:	b1b0      	cbz	r0, 80090a2 <_vfiprintf_r+0x13a>
 8009074:	9207      	str	r2, [sp, #28]
 8009076:	e014      	b.n	80090a2 <_vfiprintf_r+0x13a>
 8009078:	eba0 0308 	sub.w	r3, r0, r8
 800907c:	fa09 f303 	lsl.w	r3, r9, r3
 8009080:	4313      	orrs	r3, r2
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	46a2      	mov	sl, r4
 8009086:	e7d2      	b.n	800902e <_vfiprintf_r+0xc6>
 8009088:	9b03      	ldr	r3, [sp, #12]
 800908a:	1d19      	adds	r1, r3, #4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	9103      	str	r1, [sp, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	bfbb      	ittet	lt
 8009094:	425b      	neglt	r3, r3
 8009096:	f042 0202 	orrlt.w	r2, r2, #2
 800909a:	9307      	strge	r3, [sp, #28]
 800909c:	9307      	strlt	r3, [sp, #28]
 800909e:	bfb8      	it	lt
 80090a0:	9204      	strlt	r2, [sp, #16]
 80090a2:	7823      	ldrb	r3, [r4, #0]
 80090a4:	2b2e      	cmp	r3, #46	; 0x2e
 80090a6:	d10c      	bne.n	80090c2 <_vfiprintf_r+0x15a>
 80090a8:	7863      	ldrb	r3, [r4, #1]
 80090aa:	2b2a      	cmp	r3, #42	; 0x2a
 80090ac:	d134      	bne.n	8009118 <_vfiprintf_r+0x1b0>
 80090ae:	9b03      	ldr	r3, [sp, #12]
 80090b0:	1d1a      	adds	r2, r3, #4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	9203      	str	r2, [sp, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	bfb8      	it	lt
 80090ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80090be:	3402      	adds	r4, #2
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009198 <_vfiprintf_r+0x230>
 80090c6:	7821      	ldrb	r1, [r4, #0]
 80090c8:	2203      	movs	r2, #3
 80090ca:	4650      	mov	r0, sl
 80090cc:	f7f7 f858 	bl	8000180 <memchr>
 80090d0:	b138      	cbz	r0, 80090e2 <_vfiprintf_r+0x17a>
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	eba0 000a 	sub.w	r0, r0, sl
 80090d8:	2240      	movs	r2, #64	; 0x40
 80090da:	4082      	lsls	r2, r0
 80090dc:	4313      	orrs	r3, r2
 80090de:	3401      	adds	r4, #1
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e6:	4829      	ldr	r0, [pc, #164]	; (800918c <_vfiprintf_r+0x224>)
 80090e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ec:	2206      	movs	r2, #6
 80090ee:	f7f7 f847 	bl	8000180 <memchr>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d03f      	beq.n	8009176 <_vfiprintf_r+0x20e>
 80090f6:	4b26      	ldr	r3, [pc, #152]	; (8009190 <_vfiprintf_r+0x228>)
 80090f8:	bb1b      	cbnz	r3, 8009142 <_vfiprintf_r+0x1da>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	3307      	adds	r3, #7
 80090fe:	f023 0307 	bic.w	r3, r3, #7
 8009102:	3308      	adds	r3, #8
 8009104:	9303      	str	r3, [sp, #12]
 8009106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009108:	443b      	add	r3, r7
 800910a:	9309      	str	r3, [sp, #36]	; 0x24
 800910c:	e768      	b.n	8008fe0 <_vfiprintf_r+0x78>
 800910e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009112:	460c      	mov	r4, r1
 8009114:	2001      	movs	r0, #1
 8009116:	e7a6      	b.n	8009066 <_vfiprintf_r+0xfe>
 8009118:	2300      	movs	r3, #0
 800911a:	3401      	adds	r4, #1
 800911c:	9305      	str	r3, [sp, #20]
 800911e:	4619      	mov	r1, r3
 8009120:	f04f 0c0a 	mov.w	ip, #10
 8009124:	4620      	mov	r0, r4
 8009126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800912a:	3a30      	subs	r2, #48	; 0x30
 800912c:	2a09      	cmp	r2, #9
 800912e:	d903      	bls.n	8009138 <_vfiprintf_r+0x1d0>
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0c6      	beq.n	80090c2 <_vfiprintf_r+0x15a>
 8009134:	9105      	str	r1, [sp, #20]
 8009136:	e7c4      	b.n	80090c2 <_vfiprintf_r+0x15a>
 8009138:	fb0c 2101 	mla	r1, ip, r1, r2
 800913c:	4604      	mov	r4, r0
 800913e:	2301      	movs	r3, #1
 8009140:	e7f0      	b.n	8009124 <_vfiprintf_r+0x1bc>
 8009142:	ab03      	add	r3, sp, #12
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	462a      	mov	r2, r5
 8009148:	4b12      	ldr	r3, [pc, #72]	; (8009194 <_vfiprintf_r+0x22c>)
 800914a:	a904      	add	r1, sp, #16
 800914c:	4630      	mov	r0, r6
 800914e:	f7fd fb89 	bl	8006864 <_printf_float>
 8009152:	4607      	mov	r7, r0
 8009154:	1c78      	adds	r0, r7, #1
 8009156:	d1d6      	bne.n	8009106 <_vfiprintf_r+0x19e>
 8009158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915a:	07d9      	lsls	r1, r3, #31
 800915c:	d405      	bmi.n	800916a <_vfiprintf_r+0x202>
 800915e:	89ab      	ldrh	r3, [r5, #12]
 8009160:	059a      	lsls	r2, r3, #22
 8009162:	d402      	bmi.n	800916a <_vfiprintf_r+0x202>
 8009164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009166:	f7fe f871 	bl	800724c <__retarget_lock_release_recursive>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	065b      	lsls	r3, r3, #25
 800916e:	f53f af1d 	bmi.w	8008fac <_vfiprintf_r+0x44>
 8009172:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009174:	e71c      	b.n	8008fb0 <_vfiprintf_r+0x48>
 8009176:	ab03      	add	r3, sp, #12
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	462a      	mov	r2, r5
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <_vfiprintf_r+0x22c>)
 800917e:	a904      	add	r1, sp, #16
 8009180:	4630      	mov	r0, r6
 8009182:	f7fd fe13 	bl	8006dac <_printf_i>
 8009186:	e7e4      	b.n	8009152 <_vfiprintf_r+0x1ea>
 8009188:	08009655 	.word	0x08009655
 800918c:	0800965f 	.word	0x0800965f
 8009190:	08006865 	.word	0x08006865
 8009194:	08008f43 	.word	0x08008f43
 8009198:	0800965b 	.word	0x0800965b

0800919c <__swbuf_r>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	460e      	mov	r6, r1
 80091a0:	4614      	mov	r4, r2
 80091a2:	4605      	mov	r5, r0
 80091a4:	b118      	cbz	r0, 80091ae <__swbuf_r+0x12>
 80091a6:	6a03      	ldr	r3, [r0, #32]
 80091a8:	b90b      	cbnz	r3, 80091ae <__swbuf_r+0x12>
 80091aa:	f7fd ffe1 	bl	8007170 <__sinit>
 80091ae:	69a3      	ldr	r3, [r4, #24]
 80091b0:	60a3      	str	r3, [r4, #8]
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	071a      	lsls	r2, r3, #28
 80091b6:	d525      	bpl.n	8009204 <__swbuf_r+0x68>
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	b31b      	cbz	r3, 8009204 <__swbuf_r+0x68>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	6922      	ldr	r2, [r4, #16]
 80091c0:	1a98      	subs	r0, r3, r2
 80091c2:	6963      	ldr	r3, [r4, #20]
 80091c4:	b2f6      	uxtb	r6, r6
 80091c6:	4283      	cmp	r3, r0
 80091c8:	4637      	mov	r7, r6
 80091ca:	dc04      	bgt.n	80091d6 <__swbuf_r+0x3a>
 80091cc:	4621      	mov	r1, r4
 80091ce:	4628      	mov	r0, r5
 80091d0:	f7ff f94e 	bl	8008470 <_fflush_r>
 80091d4:	b9e0      	cbnz	r0, 8009210 <__swbuf_r+0x74>
 80091d6:	68a3      	ldr	r3, [r4, #8]
 80091d8:	3b01      	subs	r3, #1
 80091da:	60a3      	str	r3, [r4, #8]
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	6022      	str	r2, [r4, #0]
 80091e2:	701e      	strb	r6, [r3, #0]
 80091e4:	6962      	ldr	r2, [r4, #20]
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d004      	beq.n	80091f6 <__swbuf_r+0x5a>
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	07db      	lsls	r3, r3, #31
 80091f0:	d506      	bpl.n	8009200 <__swbuf_r+0x64>
 80091f2:	2e0a      	cmp	r6, #10
 80091f4:	d104      	bne.n	8009200 <__swbuf_r+0x64>
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f7ff f939 	bl	8008470 <_fflush_r>
 80091fe:	b938      	cbnz	r0, 8009210 <__swbuf_r+0x74>
 8009200:	4638      	mov	r0, r7
 8009202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009204:	4621      	mov	r1, r4
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f806 	bl	8009218 <__swsetup_r>
 800920c:	2800      	cmp	r0, #0
 800920e:	d0d5      	beq.n	80091bc <__swbuf_r+0x20>
 8009210:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009214:	e7f4      	b.n	8009200 <__swbuf_r+0x64>
	...

08009218 <__swsetup_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4b2a      	ldr	r3, [pc, #168]	; (80092c4 <__swsetup_r+0xac>)
 800921c:	4605      	mov	r5, r0
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	460c      	mov	r4, r1
 8009222:	b118      	cbz	r0, 800922c <__swsetup_r+0x14>
 8009224:	6a03      	ldr	r3, [r0, #32]
 8009226:	b90b      	cbnz	r3, 800922c <__swsetup_r+0x14>
 8009228:	f7fd ffa2 	bl	8007170 <__sinit>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009232:	0718      	lsls	r0, r3, #28
 8009234:	d422      	bmi.n	800927c <__swsetup_r+0x64>
 8009236:	06d9      	lsls	r1, r3, #27
 8009238:	d407      	bmi.n	800924a <__swsetup_r+0x32>
 800923a:	2309      	movs	r3, #9
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009248:	e034      	b.n	80092b4 <__swsetup_r+0x9c>
 800924a:	0758      	lsls	r0, r3, #29
 800924c:	d512      	bpl.n	8009274 <__swsetup_r+0x5c>
 800924e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009250:	b141      	cbz	r1, 8009264 <__swsetup_r+0x4c>
 8009252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009256:	4299      	cmp	r1, r3
 8009258:	d002      	beq.n	8009260 <__swsetup_r+0x48>
 800925a:	4628      	mov	r0, r5
 800925c:	f7ff fdce 	bl	8008dfc <_free_r>
 8009260:	2300      	movs	r3, #0
 8009262:	6363      	str	r3, [r4, #52]	; 0x34
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	2300      	movs	r3, #0
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	6923      	ldr	r3, [r4, #16]
 8009272:	6023      	str	r3, [r4, #0]
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	f043 0308 	orr.w	r3, r3, #8
 800927a:	81a3      	strh	r3, [r4, #12]
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	b94b      	cbnz	r3, 8009294 <__swsetup_r+0x7c>
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800928a:	d003      	beq.n	8009294 <__swsetup_r+0x7c>
 800928c:	4621      	mov	r1, r4
 800928e:	4628      	mov	r0, r5
 8009290:	f000 f840 	bl	8009314 <__smakebuf_r>
 8009294:	89a0      	ldrh	r0, [r4, #12]
 8009296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800929a:	f010 0301 	ands.w	r3, r0, #1
 800929e:	d00a      	beq.n	80092b6 <__swsetup_r+0x9e>
 80092a0:	2300      	movs	r3, #0
 80092a2:	60a3      	str	r3, [r4, #8]
 80092a4:	6963      	ldr	r3, [r4, #20]
 80092a6:	425b      	negs	r3, r3
 80092a8:	61a3      	str	r3, [r4, #24]
 80092aa:	6923      	ldr	r3, [r4, #16]
 80092ac:	b943      	cbnz	r3, 80092c0 <__swsetup_r+0xa8>
 80092ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092b2:	d1c4      	bne.n	800923e <__swsetup_r+0x26>
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	0781      	lsls	r1, r0, #30
 80092b8:	bf58      	it	pl
 80092ba:	6963      	ldrpl	r3, [r4, #20]
 80092bc:	60a3      	str	r3, [r4, #8]
 80092be:	e7f4      	b.n	80092aa <__swsetup_r+0x92>
 80092c0:	2000      	movs	r0, #0
 80092c2:	e7f7      	b.n	80092b4 <__swsetup_r+0x9c>
 80092c4:	2000006c 	.word	0x2000006c

080092c8 <__swhatbuf_r>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	460c      	mov	r4, r1
 80092cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d0:	2900      	cmp	r1, #0
 80092d2:	b096      	sub	sp, #88	; 0x58
 80092d4:	4615      	mov	r5, r2
 80092d6:	461e      	mov	r6, r3
 80092d8:	da0d      	bge.n	80092f6 <__swhatbuf_r+0x2e>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092e0:	f04f 0100 	mov.w	r1, #0
 80092e4:	bf0c      	ite	eq
 80092e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092ea:	2340      	movne	r3, #64	; 0x40
 80092ec:	2000      	movs	r0, #0
 80092ee:	6031      	str	r1, [r6, #0]
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	b016      	add	sp, #88	; 0x58
 80092f4:	bd70      	pop	{r4, r5, r6, pc}
 80092f6:	466a      	mov	r2, sp
 80092f8:	f000 f848 	bl	800938c <_fstat_r>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	dbec      	blt.n	80092da <__swhatbuf_r+0x12>
 8009300:	9901      	ldr	r1, [sp, #4]
 8009302:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009306:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800930a:	4259      	negs	r1, r3
 800930c:	4159      	adcs	r1, r3
 800930e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009312:	e7eb      	b.n	80092ec <__swhatbuf_r+0x24>

08009314 <__smakebuf_r>:
 8009314:	898b      	ldrh	r3, [r1, #12]
 8009316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009318:	079d      	lsls	r5, r3, #30
 800931a:	4606      	mov	r6, r0
 800931c:	460c      	mov	r4, r1
 800931e:	d507      	bpl.n	8009330 <__smakebuf_r+0x1c>
 8009320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	2301      	movs	r3, #1
 800932a:	6163      	str	r3, [r4, #20]
 800932c:	b002      	add	sp, #8
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	ab01      	add	r3, sp, #4
 8009332:	466a      	mov	r2, sp
 8009334:	f7ff ffc8 	bl	80092c8 <__swhatbuf_r>
 8009338:	9900      	ldr	r1, [sp, #0]
 800933a:	4605      	mov	r5, r0
 800933c:	4630      	mov	r0, r6
 800933e:	f7fe ff91 	bl	8008264 <_malloc_r>
 8009342:	b948      	cbnz	r0, 8009358 <__smakebuf_r+0x44>
 8009344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009348:	059a      	lsls	r2, r3, #22
 800934a:	d4ef      	bmi.n	800932c <__smakebuf_r+0x18>
 800934c:	f023 0303 	bic.w	r3, r3, #3
 8009350:	f043 0302 	orr.w	r3, r3, #2
 8009354:	81a3      	strh	r3, [r4, #12]
 8009356:	e7e3      	b.n	8009320 <__smakebuf_r+0xc>
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	6020      	str	r0, [r4, #0]
 800935c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009360:	81a3      	strh	r3, [r4, #12]
 8009362:	9b00      	ldr	r3, [sp, #0]
 8009364:	6163      	str	r3, [r4, #20]
 8009366:	9b01      	ldr	r3, [sp, #4]
 8009368:	6120      	str	r0, [r4, #16]
 800936a:	b15b      	cbz	r3, 8009384 <__smakebuf_r+0x70>
 800936c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009370:	4630      	mov	r0, r6
 8009372:	f000 f81d 	bl	80093b0 <_isatty_r>
 8009376:	b128      	cbz	r0, 8009384 <__smakebuf_r+0x70>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f023 0303 	bic.w	r3, r3, #3
 800937e:	f043 0301 	orr.w	r3, r3, #1
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	89a3      	ldrh	r3, [r4, #12]
 8009386:	431d      	orrs	r5, r3
 8009388:	81a5      	strh	r5, [r4, #12]
 800938a:	e7cf      	b.n	800932c <__smakebuf_r+0x18>

0800938c <_fstat_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4d07      	ldr	r5, [pc, #28]	; (80093ac <_fstat_r+0x20>)
 8009390:	2300      	movs	r3, #0
 8009392:	4604      	mov	r4, r0
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	f7f8 fd4c 	bl	8001e36 <_fstat>
 800939e:	1c43      	adds	r3, r0, #1
 80093a0:	d102      	bne.n	80093a8 <_fstat_r+0x1c>
 80093a2:	682b      	ldr	r3, [r5, #0]
 80093a4:	b103      	cbz	r3, 80093a8 <_fstat_r+0x1c>
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	bd38      	pop	{r3, r4, r5, pc}
 80093aa:	bf00      	nop
 80093ac:	200008a0 	.word	0x200008a0

080093b0 <_isatty_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d06      	ldr	r5, [pc, #24]	; (80093cc <_isatty_r+0x1c>)
 80093b4:	2300      	movs	r3, #0
 80093b6:	4604      	mov	r4, r0
 80093b8:	4608      	mov	r0, r1
 80093ba:	602b      	str	r3, [r5, #0]
 80093bc:	f7f8 fd4b 	bl	8001e56 <_isatty>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d102      	bne.n	80093ca <_isatty_r+0x1a>
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	b103      	cbz	r3, 80093ca <_isatty_r+0x1a>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	200008a0 	.word	0x200008a0

080093d0 <_raise_r>:
 80093d0:	291f      	cmp	r1, #31
 80093d2:	b538      	push	{r3, r4, r5, lr}
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	d904      	bls.n	80093e4 <_raise_r+0x14>
 80093da:	2316      	movs	r3, #22
 80093dc:	6003      	str	r3, [r0, #0]
 80093de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80093e6:	b112      	cbz	r2, 80093ee <_raise_r+0x1e>
 80093e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093ec:	b94b      	cbnz	r3, 8009402 <_raise_r+0x32>
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 f830 	bl	8009454 <_getpid_r>
 80093f4:	462a      	mov	r2, r5
 80093f6:	4601      	mov	r1, r0
 80093f8:	4620      	mov	r0, r4
 80093fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093fe:	f000 b817 	b.w	8009430 <_kill_r>
 8009402:	2b01      	cmp	r3, #1
 8009404:	d00a      	beq.n	800941c <_raise_r+0x4c>
 8009406:	1c59      	adds	r1, r3, #1
 8009408:	d103      	bne.n	8009412 <_raise_r+0x42>
 800940a:	2316      	movs	r3, #22
 800940c:	6003      	str	r3, [r0, #0]
 800940e:	2001      	movs	r0, #1
 8009410:	e7e7      	b.n	80093e2 <_raise_r+0x12>
 8009412:	2400      	movs	r4, #0
 8009414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009418:	4628      	mov	r0, r5
 800941a:	4798      	blx	r3
 800941c:	2000      	movs	r0, #0
 800941e:	e7e0      	b.n	80093e2 <_raise_r+0x12>

08009420 <raise>:
 8009420:	4b02      	ldr	r3, [pc, #8]	; (800942c <raise+0xc>)
 8009422:	4601      	mov	r1, r0
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	f7ff bfd3 	b.w	80093d0 <_raise_r>
 800942a:	bf00      	nop
 800942c:	2000006c 	.word	0x2000006c

08009430 <_kill_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d07      	ldr	r5, [pc, #28]	; (8009450 <_kill_r+0x20>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	4611      	mov	r1, r2
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	f7f8 fc9b 	bl	8001d78 <_kill>
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	d102      	bne.n	800944c <_kill_r+0x1c>
 8009446:	682b      	ldr	r3, [r5, #0]
 8009448:	b103      	cbz	r3, 800944c <_kill_r+0x1c>
 800944a:	6023      	str	r3, [r4, #0]
 800944c:	bd38      	pop	{r3, r4, r5, pc}
 800944e:	bf00      	nop
 8009450:	200008a0 	.word	0x200008a0

08009454 <_getpid_r>:
 8009454:	f7f8 bc88 	b.w	8001d68 <_getpid>

08009458 <_init>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr

08009464 <_fini>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	bf00      	nop
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr
